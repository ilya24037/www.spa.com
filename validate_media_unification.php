<?php

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π Media
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –ø–ª–∞–Ω–∞ "–£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π Media"
 */
require_once __DIR__ . '/vendor/autoload.php';

use App\Domain\Media\Models\Media;
use App\Domain\Media\Models\Photo;
use App\Domain\Media\Models\Video;
use App\Domain\Media\Traits\MediaTrait;
use App\Domain\Media\Repositories\UnifiedMediaRepository;

echo "üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –£–ù–ò–§–ò–ö–ê–¶–ò–ò –ú–û–î–ï–õ–ï–ô MEDIA\n";
echo "==========================================\n\n";

$validationResults = [];

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–æ–∑–¥–∞–Ω MediaTrait
echo "1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ç—Ä–µ–π—Ç–∞ MediaTrait:\n";

if (trait_exists(MediaTrait::class)) {
    $traitReflection = new ReflectionClass(MediaTrait::class);
    $methods = $traitReflection->getMethods();
    $expectedMethods = ['getUrl', 'getThumbUrl', 'getFormattedFileSize', 'fileExists', 'getMediaType'];
    
    $hasAllMethods = true;
    foreach ($expectedMethods as $method) {
        if (!$traitReflection->hasMethod($method)) {
            echo "   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥: $method\n";
            $hasAllMethods = false;
        }
    }
    
    if ($hasAllMethods) {
        echo "   ‚úÖ MediaTrait —Å–æ–∑–¥–∞–Ω —Å –≤—Å–µ–º–∏ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏\n";
        $validationResults['trait_created'] = true;
    } else {
        echo "   ‚ùå MediaTrait —Å–æ–∑–¥–∞–Ω, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã\n";
        $validationResults['trait_created'] = false;
    }
} else {
    echo "   ‚ùå MediaTrait –Ω–µ —Å–æ–∑–¥–∞–Ω\n";
    $validationResults['trait_created'] = false;
}

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç MediaTrait
echo "\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MediaTrait –≤ –º–æ–¥–µ–ª—è—Ö:\n";

$models = [
    'Media' => Media::class,
    'Photo' => Photo::class,
    'Video' => Video::class
];

$modelsUsingTrait = 0;
foreach ($models as $name => $class) {
    if (class_exists($class)) {
        $reflection = new ReflectionClass($class);
        $traits = $reflection->getTraitNames();
        
        if (in_array(MediaTrait::class, $traits)) {
            echo "   ‚úÖ $name –º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç MediaTrait\n";
            $modelsUsingTrait++;
        } else {
            echo "   ‚ùå $name –º–æ–¥–µ–ª—å –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç MediaTrait\n";
        }
    } else {
        echo "   ‚ö†Ô∏è  $name –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n";
    }
}

$validationResults['models_use_trait'] = $modelsUsingTrait === 3;

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –≤ –º–æ–¥–µ–ª—è—Ö
echo "\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –≤ –º–æ–¥–µ–ª—è—Ö:\n";

$unifiedMethods = ['getUrl', 'getThumbUrl', 'getFormattedFileSize', 'isImage', 'isVideo'];
$modelsWithMethods = 0;

foreach ($models as $name => $class) {
    if (class_exists($class)) {
        $reflection = new ReflectionClass($class);
        $hasAllMethods = true;
        
        foreach ($unifiedMethods as $method) {
            if (!$reflection->hasMethod($method)) {
                $hasAllMethods = false;
                break;
            }
        }
        
        if ($hasAllMethods) {
            echo "   ‚úÖ $name –º–æ–¥–µ–ª—å –∏–º–µ–µ—Ç –≤—Å–µ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã\n";
            $modelsWithMethods++;
        } else {
            echo "   ‚ùå $name –º–æ–¥–µ–ª—å –ù–ï –∏–º–µ–µ—Ç –≤—Å–µ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã\n";
        }
    }
}

$validationResults['unified_methods'] = $modelsWithMethods === 3;

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
echo "\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —É–Ωifik–∞—Ü–∏–∏:\n";

$migrationFile = 'database/migrations/2024_12_07_120000_migrate_photos_videos_to_media_table.php';
if (file_exists($migrationFile)) {
    echo "   ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞\n";
    $validationResults['migration_created'] = true;
} else {
    echo "   ‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ù–ï —Å–æ–∑–¥–∞–Ω–∞\n";
    $validationResults['migration_created'] = false;
}

// 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ UnifiedMediaRepository
echo "\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:\n";

if (class_exists(UnifiedMediaRepository::class)) {
    $repoReflection = new ReflectionClass(UnifiedMediaRepository::class);
    $expectedRepoMethods = [
        'findByMasterProfile', 
        'findPhotosByMasterProfile', 
        'findVideosByMasterProfile',
        'createMedia',
        'deleteMediaWithFiles'
    ];
    
    $hasAllRepoMethods = true;
    foreach ($expectedRepoMethods as $method) {
        if (!$repoReflection->hasMethod($method)) {
            echo "   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥: $method\n";
            $hasAllRepoMethods = false;
        }
    }
    
    if ($hasAllRepoMethods) {
        echo "   ‚úÖ UnifiedMediaRepository —Å–æ–∑–¥–∞–Ω —Å –≤—Å–µ–º–∏ –º–µ—Ç–æ–¥–∞–º–∏\n";
        $validationResults['unified_repo'] = true;
    } else {
        echo "   ‚ùå UnifiedMediaRepository —Å–æ–∑–¥–∞–Ω, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç–æ–¥—ã\n";
        $validationResults['unified_repo'] = false;
    }
} else {
    echo "   ‚ùå UnifiedMediaRepository –Ω–µ —Å–æ–∑–¥–∞–Ω\n";
    $validationResults['unified_repo'] = false;
}

// 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
echo "\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º:\n";

$dataAccessMethods = ['getWidth', 'getHeight', 'getMimeType', 'isMain', 'isApproved'];
$modelsWithDataAccess = 0;

foreach (['Photo' => Photo::class, 'Video' => Video::class] as $name => $class) {
    if (class_exists($class)) {
        $reflection = new ReflectionClass($class);
        $hasDataMethods = true;
        
        foreach ($dataAccessMethods as $method) {
            if (!$reflection->hasMethod($method)) {
                $hasDataMethods = false;
                break;
            }
        }
        
        if ($hasDataMethods) {
            echo "   ‚úÖ $name –º–æ–¥–µ–ª—å –∏–º–µ–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º\n";
            $modelsWithDataAccess++;
        } else {
            echo "   ‚ùå $name –º–æ–¥–µ–ª—å –ù–ï –∏–º–µ–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º\n";
        }
    }
}

$validationResults['data_access_methods'] = $modelsWithDataAccess === 2;

// 7. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
echo "\n==========================================\n";
echo "üìä –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –£–ù–ò–§–ò–ö–ê–¶–ò–ò:\n";

$totalChecks = count($validationResults);
$passedChecks = array_sum($validationResults);
$percentage = round(($passedChecks / $totalChecks) * 100, 1);

echo "–ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: $passedChecks –∏–∑ $totalChecks ($percentage%)\n";

if ($percentage >= 90.0) {
    echo "üéâ –£–ù–ò–§–ò–ö–ê–¶–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê –£–°–ü–ï–®–ù–û!\n";
    echo "‚úÖ –ë–∞–∑–æ–≤—ã–π —Ç—Ä–µ–π—Ç MediaTrait —Å–æ–∑–¥–∞–Ω\n";
    echo "‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n";
    echo "‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –º–µ—Ç–æ–¥—ã getUrl(), delete(), –∏ –¥—Ä.\n";
    echo "‚úÖ –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–ª—è —á–µ—Ä–µ–∑ JSON metadata\n";
    echo "‚úÖ –°–æ–∑–¥–∞–Ω —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\n";
    echo "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞\n";
    echo "‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—É–Ω–∫—Ç—É –ø–ª–∞–Ω–∞: {$percentage}%\n";
} elseif ($percentage >= 70.0) {
    echo "‚ö° –£–ù–ò–§–ò–ö–ê–¶–ò–Ø –í –û–°–ù–û–í–ù–û–ú –í–´–ü–û–õ–ù–ï–ù–ê\n";
    echo "‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞\n"; 
    echo "‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤\n";
    echo "üìà –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—É–Ω–∫—Ç—É –ø–ª–∞–Ω–∞: {$percentage}%\n";
} else {
    echo "‚ùå –£–ù–ò–§–ò–ö–ê–¶–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê –ß–ê–°–¢–ò–ß–ù–û!\n";
    echo "üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞\n";
    echo "üìâ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—É–Ω–∫—Ç—É –ø–ª–∞–Ω–∞: {$percentage}%\n";
}

echo "\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –£–ù–ò–§–ò–ö–ê–¶–ò–ò:\n";
echo "‚Ä¢ –°–æ–∑–¥–∞–Ω–∞ –µ–¥–∏–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è Media, Photo, Video\n";
echo "‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –º–µ—Ç–æ–¥—ã —á–µ—Ä–µ–∑ MediaTrait\n";
echo "‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –µ–¥–∏–Ω—É—é —Ç–∞–±–ª–∏—Ü—É\n";
echo "‚Ä¢ –°–æ–∑–¥–∞–Ω—ã –∞–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è backward compatibility\n";

echo "\n==========================================\n";