<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;

return new class extends Migration
{
    /**
     * Run the migrations.
     * –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ ads
     * 
     * –ü—Ä–æ–±–ª–µ–º–∞: –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–Ω—ã–º–∏ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏:
     * - status –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–≤–∞–ª—Å—è —Ç—Ä–∏–∂–¥—ã 
     * - user_id+status –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–≤–∞–ª—Å—è –¥–≤–∞–∂–¥—ã
     */
    public function up(): void
    {
        Schema::table('ads', function (Blueprint $table) {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã
            $indexes = $this->getExistingIndexes();
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            foreach ($indexes as $index) {
                if (in_array($index, [
                    'ads_status_index',           // –ò–∑ 2025_07_23_142115
                    'ads_user_status_index',      // –ò–∑ 2025_07_23_142115  
                    'ads_user_status_created_index', // –ò–∑ 2025_07_23_142115
                    'idx_status',                 // –ò–∑ 2025_08_17_122007
                    'idx_user_status',            // –ò–∑ 2025_08_17_122007
                    'idx_created',                // –ò–∑ 2025_08_17_122007
                    'idx_status_expires',         // –ò–∑ 2025_08_17_122007
                ])) {
                    try {
                        $table->dropIndex($index);
                        echo "‚úÖ –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å: {$index}\n";
                    } catch (\Exception $e) {
                        echo "‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å {$index} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω\n";
                    }
                }
            }
        });
        
        // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –∏–Ω–¥–µ–∫—Å–æ–≤
        Schema::table('ads', function (Blueprint $table) {
            // –¢–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
            if (!$this->indexExists('ads_user_status_optimized')) {
                $table->index(['user_id', 'status'], 'ads_user_status_optimized');
                echo "‚úÖ –°–æ–∑–¥–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å: ads_user_status_optimized\n";
            }
            
            if (!$this->indexExists('ads_status_expires_optimized')) {
                $table->index(['status', 'expires_at'], 'ads_status_expires_optimized');
                echo "‚úÖ –°–æ–∑–¥–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å: ads_status_expires_optimized\n";
            }
            
            if (!$this->indexExists('ads_created_at_optimized')) {
                $table->index('created_at', 'ads_created_at_optimized');
                echo "‚úÖ –°–æ–∑–¥–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å: ads_created_at_optimized\n";
            }
        });
        
        echo "\nüéØ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n";
        echo "–û—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ 3 –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–∞ –≤–º–µ—Å—Ç–æ 7+ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö\n";
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('ads', function (Blueprint $table) {
            // –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
            try {
                $table->dropIndex('ads_user_status_optimized');
                $table->dropIndex('ads_status_expires_optimized'); 
                $table->dropIndex('ads_created_at_optimized');
            } catch (\Exception $e) {
                // –ò–Ω–¥–µ–∫—Å—ã –º–æ–≥—É—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
            }
        });
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã –Ω–µ –±—É–¥–µ–º - –æ–Ω–∏ –±—ã–ª–∏ –ø—Ä–æ–±–ª–µ–º–æ–π
        echo "‚ö†Ô∏è –°—Ç–∞—Ä—ã–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã –ù–ï –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ\n";
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
     */
    private function getExistingIndexes(): array
    {
        $indexes = [];
        try {
            $result = DB::select("SHOW INDEX FROM ads");
            foreach ($result as $index) {
                if ($index->Key_name !== 'PRIMARY') {
                    $indexes[] = $index->Key_name;
                }
            }
        } catch (\Exception $e) {
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        }
        
        return array_unique($indexes);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
     */
    private function indexExists(string $indexName): bool
    {
        try {
            $result = DB::select("SHOW INDEX FROM ads WHERE Key_name = ?", [$indexName]);
            return !empty($result);
        } catch (\Exception $e) {
            return false;
        }
    }
};
