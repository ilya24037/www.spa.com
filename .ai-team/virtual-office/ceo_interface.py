#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CEO Interface for Virtual Office
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI –∫–æ–º–∞–Ω–¥–æ–π —á–µ—Ä–µ–∑ Python –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""

import json
import os
import sys
import subprocess
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional

class CEOInterface:
    """CEO –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –æ—Ñ–∏—Å–æ–º"""

    def __init__(self):
        try:
            self.base_path = Path(r"C:\www.spa.com\.ai-team")
            self.virtual_office = self.base_path / "virtual-office"
            self.tasks_dir = self.virtual_office / "tasks"
            self.inbox_dir = self.virtual_office / "inbox"
            self.reports_dir = self.virtual_office / "reports"
            self.chat_file = self.base_path / "chat.md"
            self.agents_config = self.base_path / "system" / "agents.json"

            # Create directories if not exist
            self.tasks_dir.mkdir(parents=True, exist_ok=True)
            self.inbox_dir.mkdir(parents=True, exist_ok=True)
            self.reports_dir.mkdir(parents=True, exist_ok=True)
            (self.base_path / "system").mkdir(parents=True, exist_ok=True)

            # Load agents configuration
            self.agents = self.load_agents()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            sys.exit(1)

    def load_agents(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–æ–≤"""
        if self.agents_config.exists():
            with open(self.agents_config, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}

    def create_task(self, title: str, description: str, assignee: str = "",
                   priority: str = "normal", deadline: str = "") -> str:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"""
        try:
            task_id = f"TASK-{datetime.now().strftime('%Y%m%d')}-{os.urandom(2).hex()}"

            if not deadline:
                deadline = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")

            task = {
                "task_id": task_id,
                "title": title,
                "description": description,
                "assignee": assignee,
                "priority": priority,
                "status": "assigned" if assignee else "new",
                "deadline": deadline,
                "created_at": datetime.now().isoformat(),
                "updated_at": datetime.now().isoformat(),
                "dependencies": [],
                "comments": []
            }

            # Save task
            task_file = self.tasks_dir / f"{task_id}.json"
            with open(task_file, 'w', encoding='utf-8') as f:
                json.dump(task, f, indent=2, ensure_ascii=False)

            # Notify in chat
            if assignee:
                self.send_to_chat(f"[SYSTEM]: New task {task_id} assigned to @{assignee} - {title}")

            print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task_id}")
            return task_id
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            return ""

    def send_message(self, to_agent: str, message: str, priority: str = "normal"):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É"""
        msg_id = f"MSG-{datetime.now().strftime('%Y%m%d%H%M%S')}"

        msg = {
            "id": msg_id,
            "from": "CEO",
            "to": to_agent,
            "message": message,
            "priority": priority,
            "timestamp": datetime.now().isoformat(),
            "status": "unread"
        }

        # Save to agent's inbox
        inbox_path = self.inbox_dir / to_agent
        inbox_path.mkdir(parents=True, exist_ok=True)

        msg_file = inbox_path / f"{msg_id}.json"
        with open(msg_file, 'w', encoding='utf-8') as f:
            json.dump(msg, f, indent=2, ensure_ascii=False)

        print(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {to_agent}")

    def broadcast_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–π –∫–æ–º–∞–Ω–¥–µ"""
        for agent in ["teamlead", "backend", "frontend", "qa", "devops"]:
            self.send_message(agent, message)

        self.send_to_chat(f"[CEO]: @all {message}")
        print(f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–π –∫–æ–º–∞–Ω–¥–µ")

    def send_to_chat(self, message: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —á–∞—Ç"""
        timestamp = datetime.now().strftime("[%H:%M]")
        with open(self.chat_file, 'a', encoding='utf-8') as f:
            f.write(f"{timestamp} {message}\n")

    def get_tasks_summary(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º"""
        if not self.tasks_dir.exists():
            return {}

        tasks = []
        for task_file in self.tasks_dir.glob("*.json"):
            with open(task_file, 'r', encoding='utf-8') as f:
                tasks.append(json.load(f))

        summary = {
            "total": len(tasks),
            "by_status": {},
            "by_assignee": {},
            "by_priority": {}
        }

        for task in tasks:
            # By status
            status = task.get("status", "unknown")
            summary["by_status"][status] = summary["by_status"].get(status, 0) + 1

            # By assignee
            assignee = task.get("assignee", "unassigned")
            summary["by_assignee"][assignee] = summary["by_assignee"].get(assignee, 0) + 1

            # By priority
            priority = task.get("priority", "normal")
            summary["by_priority"][priority] = summary["by_priority"].get(priority, 0) + 1

        return summary

    def view_inbox_summary(self) -> Dict:
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–¥–∫–∏ –ø–æ inbox –∞–≥–µ–Ω—Ç–æ–≤"""
        summary = {}

        for agent in ["teamlead", "backend", "frontend", "qa", "devops"]:
            inbox_path = self.inbox_dir / agent
            if inbox_path.exists():
                messages = list(inbox_path.glob("*.json"))
                unread = 0

                for msg_file in messages:
                    with open(msg_file, 'r', encoding='utf-8') as f:
                        msg = json.load(f)
                        if msg.get("status") == "unread":
                            unread += 1

                summary[agent] = {
                    "total": len(messages),
                    "unread": unread
                }
            else:
                summary[agent] = {"total": 0, "unread": 0}

        return summary

    def generate_daily_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report = []
        report.append("=" * 50)
        report.append(f"üìä DAILY REPORT - {datetime.now().strftime('%Y-%m-%d')}")
        report.append("=" * 50)

        # Tasks summary
        tasks_summary = self.get_tasks_summary()
        report.append("\nüìã –ó–ê–î–ê–ß–ò:")
        report.append(f"–í—Å–µ–≥–æ: {tasks_summary.get('total', 0)}")

        if tasks_summary.get('by_status'):
            report.append("\n–ü–æ —Å—Ç–∞—Ç—É—Å—É:")
            for status, count in tasks_summary['by_status'].items():
                report.append(f"  {status}: {count}")

        if tasks_summary.get('by_assignee'):
            report.append("\n–ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º:")
            for assignee, count in tasks_summary['by_assignee'].items():
                report.append(f"  {assignee}: {count}")

        # Inbox summary
        inbox_summary = self.view_inbox_summary()
        report.append("\nüì¨ –°–û–û–ë–©–ï–ù–ò–Ø:")
        for agent, stats in inbox_summary.items():
            if stats['unread'] > 0:
                report.append(f"  {agent}: {stats['unread']} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö")

        report_text = "\n".join(report)

        # Save report
        report_file = self.reports_dir / f"report_{datetime.now().strftime('%Y%m%d')}.txt"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report_text)

        return report_text

    def interactive_menu(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é CEO"""
        while True:
            print("\n" + "=" * 60)
            print("üè¢ CEO VIRTUAL OFFICE CONTROL PANEL")
            print("=" * 60)
            print("\n1. üìã –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
            print("2. üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á")
            print("3. üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É")
            print("4. üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–π –∫–æ–º–∞–Ω–¥–µ")
            print("5. üìà –°–≤–æ–¥–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º")
            print("6. üì¨ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å inbox –∞–≥–µ–Ω—Ç–æ–≤")
            print("7. üìë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")
            print("8. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É")
            print("0. üö™ –í—ã—Ö–æ–¥")

            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

            if choice == "1":
                title = input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ")
                description = input("–û–ø–∏—Å–∞–Ω–∏–µ: ")
                assignee = input("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (teamlead/backend/frontend/qa/devops): ")
                priority = input("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (low/normal/high/critical) [normal]: ") or "normal"
                deadline = input("–î–µ–¥–ª–∞–π–Ω (YYYY-MM-DD) [–∑–∞–≤—Ç—Ä–∞]: ")

                self.create_task(title, description, assignee, priority, deadline)

            elif choice == "2":
                # Run PowerShell task manager
                subprocess.run([
                    "powershell", "-ExecutionPolicy", "Bypass",
                    "-File", str(self.base_path / "scripts" / "task-manager.ps1"),
                    "-Action", "list"
                ])

            elif choice == "3":
                agent = input("–ö–æ–º—É (teamlead/backend/frontend/qa/devops): ")
                message = input("–°–æ–æ–±—â–µ–Ω–∏–µ: ")
                priority = input("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (low/normal/high) [normal]: ") or "normal"

                self.send_message(agent, message, priority)

            elif choice == "4":
                message = input("–°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–π –∫–æ–º–∞–Ω–¥–µ: ")
                self.broadcast_message(message)

            elif choice == "5":
                summary = self.get_tasks_summary()
                print("\nüìä –°–í–û–î–ö–ê –ü–û –ó–ê–î–ê–ß–ê–ú:")
                print(f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á: {summary.get('total', 0)}")

                if summary.get('by_status'):
                    print("\n–ü–æ —Å—Ç–∞—Ç—É—Å—É:")
                    for status, count in summary['by_status'].items():
                        print(f"  {status}: {count}")

                if summary.get('by_assignee'):
                    print("\n–ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º:")
                    for assignee, count in summary['by_assignee'].items():
                        print(f"  {assignee}: {count}")

            elif choice == "6":
                inbox_summary = self.view_inbox_summary()
                print("\nüì¨ INBOX –ê–ì–ï–ù–¢–û–í:")
                for agent, stats in inbox_summary.items():
                    status = "üî¥" if stats['unread'] > 0 else "üü¢"
                    print(f"{status} {agent}: {stats['total']} –≤—Å–µ–≥–æ, {stats['unread']} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö")

            elif choice == "7":
                report = self.generate_daily_report()
                print(report)
                print("\n‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ virtual-office/reports/")

            elif choice == "8":
                print("\n–ó–∞–ø—É—Å–∫ AI –∫–æ–º–∞–Ω–¥—ã...")
                subprocess.run([
                    str(self.base_path / "scripts" / "START-AI-TEAM-FINAL.bat")
                ], shell=True)

            elif choice == "0":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break

            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    ceo = CEOInterface()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        command = sys.argv[1]

        if command == "task" and len(sys.argv) > 3:
            title = sys.argv[2]
            assignee = sys.argv[3] if len(sys.argv) > 3 else ""
            ceo.create_task(title, "Task from CLI", assignee)

        elif command == "message" and len(sys.argv) > 3:
            agent = sys.argv[2]
            message = " ".join(sys.argv[3:])
            ceo.send_message(agent, message)

        elif command == "broadcast" and len(sys.argv) > 2:
            message = " ".join(sys.argv[2:])
            ceo.broadcast_message(message)

        elif command == "report":
            print(ceo.generate_daily_report())

        else:
            print("Usage:")
            print("  python ceo_interface.py                    - Interactive mode")
            print("  python ceo_interface.py task <title> [assignee]")
            print("  python ceo_interface.py message <agent> <message>")
            print("  python ceo_interface.py broadcast <message>")
            print("  python ceo_interface.py report")
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        ceo.interactive_menu()

if __name__ == "__main__":
    main()