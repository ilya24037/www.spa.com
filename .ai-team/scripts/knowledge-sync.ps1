# knowledge-sync.ps1 - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–Ω–∞–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞ —Å –∞–≥–µ–Ω—Ç–∞–º–∏
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞

param(
    [string]$Mode = "sync",  # sync|check|update
    [switch]$Verbose
)

$ErrorActionPreference = "Stop"
Set-Location $PSScriptRoot\..

Write-Host "üìö Knowledge Sync System for Virtual Office" -ForegroundColor Cyan
Write-Host "=" * 60

# –ü—É—Ç–∏ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
$DocsPath = "..\..\docs"
$KnowledgeMapPath = "$DocsPath\KNOWLEDGE_MAP_2025.md"
$LessonsPath = "$DocsPath\LESSONS"
$ProblemsPath = "$DocsPath\PROBLEMS"
$RefactoringPath = "$DocsPath\REFACTORING"

# –ü—É—Ç–∏ –∫ –∞–≥–µ–Ω—Ç–∞–º
$AgentsPath = "."
$VirtualOfficePath = "virtual-office\knowledge"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function Write-Log {
    param([string]$Message, [string]$Type = "INFO")

    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "[$timestamp] [$Type] $Message"

    switch ($Type) {
        "ERROR" { Write-Host $logMessage -ForegroundColor Red }
        "SUCCESS" { Write-Host $logMessage -ForegroundColor Green }
        "WARNING" { Write-Host $logMessage -ForegroundColor Yellow }
        default { Write-Host $logMessage -ForegroundColor White }
    }

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ª–æ–≥ —Ñ–∞–π–ª
    Add-Content -Path "system\logs\knowledge-sync.log" -Value $logMessage
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
function Initialize-KnowledgeStructure {
    Write-Log "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–Ω–∞–Ω–∏–π..." "INFO"

    $directories = @(
        "virtual-office\knowledge",
        "virtual-office\knowledge\lessons",
        "virtual-office\knowledge\problems",
        "virtual-office\knowledge\patterns",
        "virtual-office\knowledge\refactoring",
        "system\logs"
    )

    foreach ($dir in $directories) {
        if (-not (Test-Path $dir)) {
            New-Item -ItemType Directory -Path $dir -Force | Out-Null
            Write-Log "–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $dir" "SUCCESS"
        }
    }
}

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –∑–Ω–∞–Ω–∏–π
function Sync-KnowledgeMap {
    Write-Log "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –∑–Ω–∞–Ω–∏–π..." "INFO"

    if (Test-Path $KnowledgeMapPath) {
        $content = Get-Content $KnowledgeMapPath -Raw -Encoding UTF8

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ä—Ç—ã
        Set-Content -Path "$VirtualOfficePath\KNOWLEDGE_MAP.md" -Value $content -Encoding UTF8

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
        $quickCommands = @"
# ‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∫–∞—Ä—Ç—ã –∑–Ω–∞–Ω–∏–π

## –ü—Ä–∏ –æ—à–∏–±–∫–µ "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å"
``````bash
grep -r "—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏" app/Domain/*/Actions/
``````

## –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å `$fillable –≤ –º–æ–¥–µ–ª–∏
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å watcher –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å emit —Ñ–æ—Ä–º–∞—Ç

## –ü–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏–π
``````bash
grep -r "–ø–æ—Ö–æ–∂–∞—è –ø—Ä–æ–±–ª–µ–º–∞" docs/LESSONS/
find app/ -name "*–ø–æ—Ö–æ–∂–∏–π_—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª*"
``````

## –ü—Ä–∏–Ω—Ü–∏–ø—ã
- KISS - –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Å—Ç–µ–π—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ
- –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —Å–Ω–∞—á–∞–ª–∞
- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
"@
        Set-Content -Path "$VirtualOfficePath\QUICK_REFERENCE.md" -Value $quickCommands -Encoding UTF8

        Write-Log "–ö–∞—Ä—Ç–∞ –∑–Ω–∞–Ω–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞" "SUCCESS"
    } else {
        Write-Log "–ö–∞—Ä—Ç–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $KnowledgeMapPath" "WARNING"
    }
}

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Ä–æ–∫–æ–≤
function Sync-Lessons {
    Write-Log "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤..." "INFO"

    if (Test-Path $LessonsPath) {
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        $criticalLessons = @(
            "APPROACHES\BUSINESS_LOGIC_FIRST.md",
            "ANTI_PATTERNS\FRONTEND_FIRST_DEBUGGING.md",
            "WORKFLOWS\NEW_TASK_WORKFLOW.md",
            "QUICK_WINS\STATUS_VALIDATION_PATTERNS.md",
            "QUICK_REFERENCE.md"
        )

        foreach ($lesson in $criticalLessons) {
            $sourcePath = Join-Path $LessonsPath $lesson
            if (Test-Path $sourcePath) {
                $fileName = Split-Path $lesson -Leaf
                Copy-Item $sourcePath "$VirtualOfficePath\lessons\$fileName" -Force
                if ($Verbose) {
                    Write-Log "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —É—Ä–æ–∫: $fileName" "SUCCESS"
                }
            }
        }

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —É—Ä–æ–∫–æ–≤
        $lessonsSummary = @"
# üìö –°–≤–æ–¥–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞

## ‚ö° –ì–ª–∞–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã
1. **BUSINESS_LOGIC_FIRST** - –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–Ω–∞—á–∞–ª–∞ backend
2. **–ê–Ω—Ç–∏-–ø–∞—Ç—Ç–µ—Ä–Ω FRONTEND_FIRST** - –ù–ï –º–µ–Ω—è–π frontend –ø—Ä–∏ API –æ—à–∏–±–∫–∞—Ö
3. **KISS** - –ø—Ä–æ—Å—Ç–µ–π—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –ª—É—á—à–µ
4. **Watchers –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã** - –∏–Ω–∞—á–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è—é—Ç—Å—è

## üîç –ë—ã—Å—Ç—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è
- –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ‚Üí grep ‚Üí Action ‚Üí –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (5-30 –º–∏–Ω)
- –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è ‚Üí –ø—Ä–æ–≤–µ—Ä—å `$fillable –∏ watchers (10 –º–∏–Ω)
- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Üí –Ω–∞–π–¥–∏ –∞–Ω–∞–ª–æ–≥ ‚Üí —Å–∫–æ–ø–∏—Ä—É–π –ø–∞—Ç—Ç–µ—Ä–Ω (30-60 –º–∏–Ω)

## üö´ –ß–µ–≥–æ –ù–ï –¥–µ–ª–∞—Ç—å
- –ù–ï —Å–æ–∑–¥–∞–≤–∞–π –Ω–æ–≤—ã–µ API –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏
- –ù–ï —É—Å–ª–æ–∂–Ω—è–π –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏
- –ù–ï –∏–≥–Ω–æ—Ä–∏—Ä—É–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
"@
        Set-Content -Path "$VirtualOfficePath\lessons\SUMMARY.md" -Value $lessonsSummary -Encoding UTF8

        Write-Log "–£—Ä–æ–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: $($criticalLessons.Count) —Ñ–∞–π–ª–æ–≤" "SUCCESS"
    }
}

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º
function Sync-Problems {
    Write-Log "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º..." "INFO"

    if (Test-Path $ProblemsPath) {
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–æ–±–ª–µ–º
        $problems = Get-ChildItem -Path $ProblemsPath -Filter "*.md" | Select-Object -First 20

        $problemsIndex = @"
# üêõ –ò–Ω–¥–µ–∫—Å —Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º

## –¢–æ–ø —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º
"@

        foreach ($problem in $problems) {
            $content = Get-Content $problem.FullName -First 10 | Out-String
            $title = ($content | Select-String -Pattern "^#\s+(.+)" | Select-Object -First 1).Matches[0].Groups[1].Value

            if ($title) {
                $problemsIndex += "`n- **$($problem.BaseName)**: $title"
            }
        }

        Set-Content -Path "$VirtualOfficePath\problems\INDEX.md" -Value $problemsIndex -Encoding UTF8

        Write-Log "–ò–Ω–¥–µ–∫—Å –ø—Ä–æ–±–ª–µ–º —Å–æ–∑–¥–∞–Ω: $($problems.Count) –∑–∞–ø–∏—Å–µ–π" "SUCCESS"
    }
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤
function Update-AgentConfigs {
    Write-Log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤..." "INFO"

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ –∑–Ω–∞–Ω–∏—è–º –≤ agents.json
    $configPath = "system\agents.json"
    if (Test-Path $configPath) {
        $config = Get-Content $configPath -Raw | ConvertFrom-Json

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ knowledge_path –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        foreach ($agentName in $config.agents.PSObject.Properties.Name) {
            $agent = $config.agents.$agentName

            if (-not $agent.knowledge_path) {
                Add-Member -InputObject $agent -MemberType NoteProperty -Name "knowledge_path" -Value "virtual-office/knowledge" -Force
            }

            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
            switch ($agentName) {
                "backend" {
                    Add-Member -InputObject $agent -MemberType NoteProperty -Name "patterns" -Value @(
                        "BUSINESS_LOGIC_FIRST",
                        "Repository Pattern",
                        "Service Layer"
                    ) -Force
                }
                "frontend" {
                    Add-Member -InputObject $agent -MemberType NoteProperty -Name "patterns" -Value @(
                        "Watcher Pattern",
                        "Computed Protection",
                        "FSD Architecture"
                    ) -Force
                }
                "qa" {
                    Add-Member -InputObject $agent -MemberType NoteProperty -Name "test_patterns" -Value @(
                        "Data Chain Testing",
                        "Regression Testing",
                        "Status Validation"
                    ) -Force
                }
            }
        }

        $config | ConvertTo-Json -Depth 10 | Set-Content $configPath -Encoding UTF8
        Write-Log "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞" "SUCCESS"
    }
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
function Create-QuickScripts {
    Write-Log "–°–æ–∑–¥–∞–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤..." "INFO"

    # –°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏—è
    $quickFixScript = @'
# quick-fix.ps1 - –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
param([string]$Error)

Write-Host "üîç –ü–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è: $Error" -ForegroundColor Cyan

# –ü–æ–∏—Å–∫ –≤ —É—Ä–æ–∫–∞—Ö
$lessons = Get-ChildItem "virtual-office\knowledge\lessons" -Filter "*.md"
foreach ($lesson in $lessons) {
    $content = Get-Content $lesson.FullName -Raw
    if ($content -match $Error) {
        Write-Host "‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ –≤: $($lesson.Name)" -ForegroundColor Green
        Write-Host $content
        break
    }
}

# –ü–æ–∏—Å–∫ –≤ –ø—Ä–æ–±–ª–µ–º–∞—Ö
$problems = Get-Content "virtual-office\knowledge\problems\INDEX.md" -Raw
if ($problems -match $Error) {
    Write-Host "üìã –ü–æ—Ö–æ–∂–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –∏–Ω–¥–µ–∫—Å–µ" -ForegroundColor Yellow
}
'@

    Set-Content -Path "scripts\quick-fix.ps1" -Value $quickFixScript -Encoding UTF8

    Write-Log "–ë—ã—Å—Ç—Ä—ã–µ —Å–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω—ã" "SUCCESS"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
function Check-Sync {
    Write-Log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏..." "INFO"

    $status = @{
        KnowledgeMap = Test-Path "$VirtualOfficePath\KNOWLEDGE_MAP.md"
        Lessons = Test-Path "$VirtualOfficePath\lessons\SUMMARY.md"
        Problems = Test-Path "$VirtualOfficePath\problems\INDEX.md"
        QuickRef = Test-Path "$VirtualOfficePath\QUICK_REFERENCE.md"
    }

    Write-Host "`nüìä –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:" -ForegroundColor Cyan
    foreach ($item in $status.GetEnumerator()) {
        $icon = if ($item.Value) { "‚úÖ" } else { "‚ùå" }
        $color = if ($item.Value) { "Green" } else { "Red" }
        Write-Host "$icon $($item.Key)" -ForegroundColor $color
    }

    $synced = ($status.Values | Where-Object { $_ -eq $true }).Count
    $total = $status.Count

    Write-Host "`n–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: $synced/$total" -ForegroundColor $(if ($synced -eq $total) { "Green" } else { "Yellow" })

    return $synced -eq $total
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
try {
    Initialize-KnowledgeStructure

    switch ($Mode) {
        "sync" {
            Write-Host "`nüîÑ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è..." -ForegroundColor Cyan
            Sync-KnowledgeMap
            Sync-Lessons
            Sync-Problems
            Update-AgentConfigs
            Create-QuickScripts

            if (Check-Sync) {
                Write-Log "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!" "SUCCESS"
            } else {
                Write-Log "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏" "WARNING"
            }
        }

        "check" {
            Check-Sync
        }

        "update" {
            Write-Host "`nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π..." -ForegroundColor Cyan
            Update-AgentConfigs
            Write-Log "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã" "SUCCESS"
        }

        default {
            Write-Log "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: $Mode" "ERROR"
            exit 1
        }
    }

    Write-Host "`n‚úÖ –ì–æ—Ç–æ–≤–æ!" -ForegroundColor Green
    Write-Host "–ê–≥–µ–Ω—Ç—ã —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞." -ForegroundColor Cyan
    Write-Host "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ quick-fix.ps1 –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏–π." -ForegroundColor Yellow
}
catch {
    Write-Log "–û—à–∏–±–∫–∞: $_" "ERROR"
    exit 1
}