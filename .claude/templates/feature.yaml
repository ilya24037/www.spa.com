name: new-feature
description: Создание новой функциональности по FSD/DDD архитектуре
prompt: |
  Реализуй новую функциональность следуя архитектуре проекта:
  
  ## ПЛАНИРОВАНИЕ:
  1. Определи к какому слою относится функция:
     - shared/ - переиспользуемый UI компонент
     - entities/ - бизнес-сущность
     - features/ - конкретная функциональность
     - widgets/ - композиция features
     - pages/ - страница приложения
  
  2. Определи необходимые домены (backend):
     - Нужен ли новый домен или используем существующий?
     - Какие сервисы потребуются?
     - Нужны ли новые модели/миграции?
  
  ## FRONTEND РЕАЛИЗАЦИЯ (Vue 3 + TypeScript):
  
  ### Структура компонента:
  ```
  features/[feature-name]/
  ├── ui/
  │   ├── FeatureName.vue
  │   ├── FeatureName.types.ts
  │   └── components/
  ├── model/
  │   ├── store.ts (если нужен store)
  │   └── types.ts
  ├── api/
  │   └── featureApi.ts
  └── composables/
      └── useFeatureName.ts
  ```
  
  ### Обязательные элементы:
  ✅ TypeScript интерфейсы для всех props и данных
  ✅ Composables для бизнес-логики
  ✅ Обработка состояний: loading, error, empty, success
  ✅ Skeleton loader для загрузки
  ✅ Валидация входных данных
  ✅ Мобильная адаптивность (Tailwind)
  
  ## BACKEND РЕАЛИЗАЦИЯ (Laravel DDD):
  
  ### Структура домена:
  ```
  Domain/[DomainName]/
  ├── Models/
  ├── Services/
  ├── Repositories/
  ├── DTOs/
  ├── Actions/
  └── Events/
  ```
  
  ### Правила реализации:
  ✅ Контроллер только делегирует в сервис
  ✅ Вся логика в сервисном слое
  ✅ DTO для передачи данных между слоями
  ✅ Repository для работы с БД
  ✅ События для междоменного взаимодействия
  ✅ Валидация через Form Requests
  
  ## ИНТЕГРАЦИЯ:
  1. API endpoint в routes/api.php или routes/web.php
  2. Inertia props если нужны данные на странице
  3. Проверка прав доступа (policies, gates)
  4. Кеширование если нужно
  
  ## ТЕСТИРОВАНИЕ:
  - Unit тесты для сервисов
  - Feature тесты для API
  - Component тесты для Vue
  
  ## ДОКУМЕНТАЦИЯ:
  - JSDoc/PHPDoc для публичных методов
  - README если функция сложная
  - Примеры использования
  
  ВАЖНО: Проверь что похожего функционала еще нет в проекте!