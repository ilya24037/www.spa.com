<?php

require_once __DIR__ . '/vendor/autoload.php';

$app = require_once __DIR__ . '/bootstrap/app.php';
$kernel = $app->make(Illuminate\Contracts\Http\Kernel::class);
$request = Illuminate\Http\Request::capture();
$response = $kernel->handle($request);
$kernel->terminate($request, $response);

echo "üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê\n";
echo "===================================\n\n";

$allOk = true;

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å—Ç–∞—Ä—ã–π —Å–µ—Ä–≤–∏—Å —É–¥–∞–ª–µ–Ω
echo "1. –°–¢–ê–†–´–ô –ú–û–ù–û–õ–ò–¢–ù–´–ô –°–ï–†–í–ò–°:\n";
$oldExists = class_exists(\App\Domain\Booking\Services\BookingSlotService::class);
if (!$oldExists) {
    echo "   ‚úÖ BookingSlotService —É–¥–∞–ª–µ–Ω\n";
} else {
    echo "   ‚ùå BookingSlotService –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n";
    $allOk = false;
}

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
echo "\n2. –ù–û–í–´–ï –°–ï–†–í–ò–°–´:\n";
$services = [
    'AvailabilityCheckService' => 299,
    'SlotManagementService' => 462,
    'BookingValidationService' => 401, // —É–≤–µ–ª–∏—á–∏–ª—Å—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤
    'BookingNotificationService' => 407
];

foreach ($services as $service => $expectedLines) {
    $className = "App\\Domain\\Booking\\Services\\{$service}";
    if (class_exists($className)) {
        $file = __DIR__ . "/app/Domain/Booking/Services/{$service}.php";
        $lines = count(file($file));
        $status = $lines < 500 ? '‚úÖ' : '‚ö†Ô∏è';
        echo "   {$status} {$service}: {$lines} —Å—Ç—Ä–æ–∫\n";
    } else {
        echo "   ‚ùå {$service}: –ù–ï –ù–ê–ô–î–ï–ù\n";
        $allOk = false;
    }
}

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ DI Container
echo "\n3. DEPENDENCY INJECTION:\n";
try {
    $bookingService = app(\App\Domain\Booking\Services\BookingService::class);
    echo "   ‚úÖ BookingService —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ DI\n";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    $reflection = new ReflectionClass($bookingService);
    $constructor = $reflection->getConstructor();
    $params = $constructor->getParameters();
    
    $expectedDeps = [
        'bookingRepository',
        'availabilityService',
        'slotService', 
        'validationService',
        'notificationService'
    ];
    
    $foundDeps = array_map(fn($p) => $p->getName(), array_slice($params, 0, 5));
    
    foreach ($expectedDeps as $dep) {
        if (in_array($dep, $foundDeps)) {
            echo "   ‚úÖ {$dep} –≤–Ω–µ–¥—Ä–µ–Ω\n";
        } else {
            echo "   ‚ùå {$dep} –ù–ï –≤–Ω–µ–¥—Ä–µ–Ω\n";
            $allOk = false;
        }
    }
} catch (Exception $e) {
    echo "   ‚ùå –û–®–ò–ë–ö–ê DI: " . $e->getMessage() . "\n";
    $allOk = false;
}

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –≤ –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
echo "\n4. –ü–†–û–í–ï–†–ö–ê –ú–ï–¢–û–î–û–í:\n";

// BookingValidationService –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
$validationService = new \App\Domain\Booking\Services\BookingValidationService(
    app(\App\Domain\Booking\Repositories\BookingRepository::class)
);

$validationMethods = [
    'validateCreate',
    'validateCancellation', 
    'validateTimeSlot',
    'validateTimeSlotAvailability',
    'canCancelBooking'
];

foreach ($validationMethods as $method) {
    if (method_exists($validationService, $method)) {
        echo "   ‚úÖ BookingValidationService::{$method}()\n";
    } else {
        echo "   ‚ùå BookingValidationService::{$method}() –ù–ï –ù–ê–ô–î–ï–ù\n";
        $allOk = false;
    }
}

// 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π (start_at vs booking_date)
echo "\n5. –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ï–ô:\n";
$notificationCode = file_get_contents(__DIR__ . '/app/Domain/Booking/Services/BookingNotificationService.php');
$hasStartAt = preg_match('/\$booking->start_at/', $notificationCode);
$hasBookingDate = preg_match('/\$booking->booking_date/', $notificationCode);

if (!$hasStartAt) {
    echo "   ‚úÖ start_at –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–µ–Ω\n";
} else {
    echo "   ‚ùå start_at –≤—Å–µ –µ—â–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!\n";
    $allOk = false;
}

if ($hasBookingDate) {
    echo "   ‚úÖ booking_date –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è\n";
} else {
    echo "   ‚ùå booking_date –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è\n";
    $allOk = false;
}

// 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ DDD –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
echo "\n6. DDD –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:\n";
if (interface_exists(\App\Domain\Notification\Contracts\NotificationServiceInterface::class)) {
    echo "   ‚úÖ NotificationServiceInterface —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n";
    echo "   ‚úÖ Domain –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Infrastructure\n";
} else {
    echo "   ‚ùå NotificationServiceInterface –ù–ï –Ω–∞–π–¥–µ–Ω\n";
    $allOk = false;
}

// –ò–¢–û–ì
echo "\n" . str_repeat("=", 50) . "\n";
if ($allOk) {
    echo "‚úÖ –†–ï–§–ê–ö–¢–û–†–ò–ù–ì –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!\n";
    echo "\n–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n";
    echo "‚Ä¢ BookingSlotService (952 —Å—Ç—Ä–æ–∫–∏) ‚Üí —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ 2 —Å–µ—Ä–≤–∏—Å–∞\n";
    echo "‚Ä¢ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã < 500 —Å—Ç—Ä–æ–∫ (KISS –ø—Ä–∏–Ω—Ü–∏–ø —Å–æ–±–ª—é–¥–µ–Ω)\n";
    echo "‚Ä¢ DDD –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n";
    echo "‚Ä¢ –ü–æ–ª—è –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∫ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—é\n";
    echo "‚Ä¢ DI Container —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n";
} else {
    echo "‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!\n";
    echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.\n";
}