/**
 * OZON Map Widget
 * 
 * –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–∞—Ä—Ç –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
 * –°–æ–∑–¥–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ OZON –∏ MapLibre GL JS
 * 
 * @version 1.0.0
 * @author OZON Map Widget Team
 * @license MIT
 */

// –°—Ç–∏–ª–∏
export * from './1-Styles'

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
export * from './2-Config'

// Vue –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
export * from './3-Components'

// –í–∏–¥–∂–µ—Ç—ã
export * from './4-Widgets'

// –õ–æ–≥–∏–∫–∞ (Composables, Services, Utils)
export * from './5-Logic'

// –ò–∫–æ–Ω–∫–∏
export * from './6-Icons'

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export type {
  // Map types
  MapInitOptions,
  MapInitState,
  UseMapInitReturn,
  
  // Control types
  MapControlsState,
  MapControlsOptions,
  UseMapControlsReturn,
  
  // Geolocation types
  GeolocationState,
  GeolocationOptions,
  UseGeolocationReturn,
  
  // Geocoding types
  GeocodingResult,
  ReverseGeocodingResult,
  GeocodingOptions,
  
  // Routing types
  Route,
  RoutePoint,
  RouteStep,
  RouteOptions,
  RoutingResult,
  
  // Widget types
  LocationSuggestion,
  PickupPoint,
  LocationInfo,
  
  // Component types
  MapContainerProps,
  MapControlsProps,
  LocationSearchProps,
  PickupPointMarkersProps,
  MapPopupProps,
  LocationInfoProps
} from './5-Logic'

// –í–µ—Ä—Å–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
export const VERSION = '1.0.0'

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
export const OZON_COLORS = {
  primary: '#005bff',
  primaryHover: '#0050e0',
  primaryDark: '#0046cc',
  secondary: '#f5f5f5',
  success: '#28a745',
  warning: '#ffc107',
  danger: '#dc3545',
  info: '#17a2b8'
} as const

export const MAP_DEFAULTS = {
  center: [37.6176, 55.7558] as [number, number], // Moscow
  zoom: 10,
  minZoom: 1,
  maxZoom: 18,
  style: 'osm'
} as const

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
export const MapQuickStart = {
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∫–∞—Ä—Ç—ã
   */
  createBasicMap: (container: string | HTMLElement, options?: any) => {
    return import('./5-Logic/composables/useMapInit').then(({ useMapInit }) => {
      const { initMap } = useMapInit()
      return initMap(container, { ...MAP_DEFAULTS, ...options })
    })
  },

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å –ø—É–Ω–∫—Ç–∞–º–∏ –≤—ã–¥–∞—á–∏ OZON
   */
  createPickupMap: (container: string | HTMLElement, pickupPoints: any[], options?: any) => {
    return Promise.all([
      import('./5-Logic/composables/useMapInit'),
      import('./4-Widgets/PickupPointMarkers.vue')
    ]).then(([{ useMapInit }]) => {
      const { initMap } = useMapInit()
      return initMap(container, { 
        ...MAP_DEFAULTS, 
        ...options,
        onLoad: (map: any) => {
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä—ã –ø—É–Ω–∫—Ç–æ–≤ –≤—ã–¥–∞—á–∏
          console.log('Map loaded with pickup points:', pickupPoints)
        }
      })
    })
  },

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å –ø–æ–∏—Å–∫–æ–º
   */
  createSearchMap: (container: string | HTMLElement, options?: any) => {
    return Promise.all([
      import('./5-Logic/composables/useMapInit'),
      import('./5-Logic/services/GeocodingService')
    ]).then(([{ useMapInit }, { geocodingService }]) => {
      const { initMap } = useMapInit()
      return initMap(container, { 
        ...MAP_DEFAULTS, 
        ...options,
        onLoad: (map: any) => {
          console.log('Map loaded with search capability')
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∏—Å–∫
        }
      })
    })
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
export const MapPresets = {
  /**
   * –ö–∞—Ä—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏
   */
  logistics: {
    center: [37.6176, 55.7558] as [number, number],
    zoom: 10,
    minZoom: 8,
    maxZoom: 16,
    showControls: true,
    showPickupPoints: true,
    enableRouting: true
  },

  /**
   * –ö–∞—Ä—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞
   */
  addressPicker: {
    center: [37.6176, 55.7558] as [number, number],
    zoom: 15,
    minZoom: 10,
    maxZoom: 18,
    showControls: true,
    enableSearch: true,
    enableGeolocation: true
  },

  /**
   * –ö–∞—Ä—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
   */
  storeLocator: {
    center: [37.6176, 55.7558] as [number, number],
    zoom: 12,
    minZoom: 8,
    maxZoom: 16,
    showControls: true,
    showStores: true,
    enableSearch: true,
    enableFiltering: true
  },

  /**
   * –ú–∏–Ω–∏–∫–∞—Ä—Ç–∞
   */
  minimap: {
    center: [37.6176, 55.7558] as [number, number],
    zoom: 10,
    minZoom: 8,
    maxZoom: 14,
    showControls: false,
    interactive: false,
    attributionControl: false
  }
} as const

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const BrowserSupport = {
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ WebGL
   */
  isWebGLSupported: (): boolean => {
    try {
      const canvas = document.createElement('canvas')
      const context = canvas.getContext('webgl') || canvas.getContext('experimental-webgl')
      return !!context
    } catch (e) {
      return false
    }
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
   */
  isGeolocationSupported: (): boolean => {
    return 'geolocation' in navigator
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
   */
  isFullscreenSupported: (): boolean => {
    return !!(
      document.fullscreenEnabled ||
      (document as any).webkitFullscreenEnabled ||
      (document as any).mozFullScreenEnabled ||
      (document as any).msFullscreenEnabled
    )
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–∞—É–∑–µ—Ä–µ
   */
  getBrowserInfo: () => {
    const ua = navigator.userAgent
    const isChrome = /Chrome/.test(ua) && /Google Inc/.test(navigator.vendor)
    const isFirefox = /Firefox/.test(ua)
    const isSafari = /Safari/.test(ua) && /Apple Computer/.test(navigator.vendor)
    const isEdge = /Edg/.test(ua)
    const isMobile = /Mobile|Android|iPhone|iPad/.test(ua)

    return {
      isChrome,
      isFirefox,
      isSafari,
      isEdge,
      isMobile,
      userAgent: ua,
      supportsWebGL: BrowserSupport.isWebGLSupported(),
      supportsGeolocation: BrowserSupport.isGeolocationSupported(),
      supportsFullscreen: BrowserSupport.isFullscreenSupported()
    }
  }
}

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
export const LibraryInfo = {
  name: 'OZON Map Widget',
  version: VERSION,
  description: '–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–∞—Ä—Ç –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π',
  author: 'OZON Map Widget Team',
  license: 'MIT',
  repository: 'https://github.com/ozon/map-widget',
  dependencies: {
    'maplibre-gl': '^3.6.2',
    'vue': '^3.0.0'
  },
  buildDate: new Date().toISOString(),
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
   */
  getInfo: () => ({
    ...LibraryInfo,
    browserSupport: BrowserSupport.getBrowserInfo(),
    timestamp: Date.now()
  })
}

// –õ–æ–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –≤ development)
if (process.env.NODE_ENV === 'development') {
  console.log('üó∫Ô∏è OZON Map Widget v' + VERSION + ' loaded')
  console.log('üìä Browser support:', BrowserSupport.getBrowserInfo())
}

// Default export –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export default {
  VERSION,
  OZON_COLORS,
  MAP_DEFAULTS,
  MapQuickStart,
  MapPresets,
  BrowserSupport,
  LibraryInfo
}