/**
 * üîÑ IMMER PATTERNS
 * –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞–±–æ—Ç—ã —Å –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Avito
 * –§–∞–π–ª –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑: avito-favorite-collections-integration.js
 */

import { produce, createDraft, finishDraft } from 'immer'

/**
 * –ë–∞–∑–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Immer (–∏–∑ –∫–æ–¥–∞ Avito)
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–∏—Å–∞—Ç—å "–º—É—Ç–∏—Ä—É—é—â–∏–π" –∫–æ–¥ –¥–ª—è –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 */
export function updateStateWithImmer(currentState, updater) {
  return produce(currentState, draft => {
    // –í draft –º–æ–∂–Ω–æ "–º—É—Ç–∏—Ä–æ–≤–∞—Ç—å" –Ω–∞–ø—Ä—è–º—É—é
    updater(draft)
  })
}

/**
 * –ü—Ä–∏–º–µ—Ä —Å–ª–æ–∂–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
 * –ü–∞—Ç—Ç–µ—Ä–Ω –∏–∑ Avito –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏
 */
export function updateNestedCollection(state, collectionId, itemId, updates) {
  return produce(state, draft => {
    const collection = draft.collections.find(c => c.id === collectionId)
    if (collection) {
      const item = collection.items.find(i => i.id === itemId)
      if (item) {
        // –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        Object.assign(item, updates)
        item.updatedAt = Date.now()
      }
    }
  })
}

/**
 * –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –±–∞—Ç—á–µ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–∏–∑ Avito)
 */
export function batchUpdateItems(state, updates) {
  return produce(state, draft => {
    updates.forEach(update => {
      const index = draft.items.findIndex(item => item.id === update.id)
      if (index !== -1) {
        draft.items[index] = {
          ...draft.items[index],
          ...update.changes,
          lastModified: Date.now()
        }
      }
    })
  })
}

/**
 * –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å draft –Ω–∞–ø—Ä—è–º—É—é (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Avito –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
export class ImmerStateManager {
  constructor(initialState) {
    this.baseState = initialState
    this.draft = null
  }
  
  startUpdate() {
    this.draft = createDraft(this.baseState)
    return this.draft
  }
  
  applyUpdate(updater) {
    if (!this.draft) {
      this.startUpdate()
    }
    updater(this.draft)
  }
  
  finishUpdate() {
    if (this.draft) {
      this.baseState = finishDraft(this.draft)
      this.draft = null
      return this.baseState
    }
    return this.baseState
  }
  
  cancelUpdate() {
    this.draft = null
  }
}

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∏–∑ Avito)
 */
export const stateUtils = {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç draft
  isDraft: (obj) => {
    return obj && obj['__$immer_state']
  },
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
  getOriginal: (draft) => {
    if (stateUtils.isDraft(draft)) {
      return draft['__$immer_state'].base
    }
    return draft
  },
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  hasChanges: (draft) => {
    if (stateUtils.isDraft(draft)) {
      return draft['__$immer_state'].modified
    }
    return false
  }
}

/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Redux reducer
 */
export const exampleReducer = (state = initialState, action) => {
  return produce(state, draft => {
    switch (action.type) {
      case 'ADD_ITEM':
        draft.items.push(action.payload)
        break
        
      case 'UPDATE_ITEM':
        const item = draft.items.find(i => i.id === action.payload.id)
        if (item) {
          Object.assign(item, action.payload.updates)
        }
        break
        
      case 'DELETE_ITEM':
        const index = draft.items.findIndex(i => i.id === action.payload)
        if (index !== -1) {
          draft.items.splice(index, 1)
        }
        break
        
      default:
        // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, Immer –≤–µ—Ä–Ω–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π state
    }
  })
}