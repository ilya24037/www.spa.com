<?php

namespace App\Infrastructure\Monitoring;

use Illuminate\Console\Command;

/**
 * –°–µ—Ä–≤–∏—Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
class MetricsDisplayService
{
    private Command $command;

    public function __construct(Command $command)
    {
        $this->command = $command;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏
     */
    public function displayMetrics(array $metrics): void
    {
        $this->command->line('');
        $this->command->line('üìä <fg=blue>–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</fg=blue> - ' . $metrics['timestamp']);
        $this->command->line(str_repeat('=', 60));

        $this->displayDatabaseMetrics($metrics['database'] ?? []);
        $this->displayCacheMetrics($metrics['cache'] ?? []);
        $this->displayMemoryMetrics($metrics['memory'] ?? []);
        $this->displayRequestMetrics($metrics['requests'] ?? []);
        $this->displayQueueMetrics($metrics['queues'] ?? []);

        $this->command->line('');
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
     */
    public function displayDetailedMetrics(array $metrics): void
    {
        $this->displayMetrics($metrics);
        
        if (isset($metrics['system'])) {
            $this->displaySystemMetrics($metrics['system']);
        }
        
        if (isset($metrics['application'])) {
            $this->displayApplicationMetrics($metrics['application']);
        }
        
        if (isset($metrics['storage'])) {
            $this->displayStorageMetrics($metrics['storage']);
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    private function displayDatabaseMetrics(array $metrics): void
    {
        $this->command->line('üóÑÔ∏è  <fg=yellow>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</fg=yellow>');
        
        if ($metrics['status'] === 'connected') {
            $statusColor = 'green';
            $statusText = '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞';
        } else {
            $statusColor = 'red';
            $statusText = '‚ùå –û—à–∏–±–∫–∞';
        }
        
        $this->command->line("   –°—Ç–∞—Ç—É—Å: <fg=$statusColor>$statusText</fg=$statusColor>");
        
        if (isset($metrics['response_time_ms'])) {
            $responseTime = $metrics['response_time_ms'];
            $timeColor = $responseTime < 50 ? 'green' : ($responseTime < 200 ? 'yellow' : 'red');
            $this->command->line("   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: <fg=$timeColor>{$responseTime}ms</fg=$timeColor>");
        }
        
        if (isset($metrics['connections'])) {
            $this->command->line("   –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {$metrics['connections']}");
        }
        
        if (isset($metrics['queries'])) {
            $this->command->line("   –ó–∞–ø—Ä–æ—Å—ã: {$metrics['queries']}");
        }
        
        if (isset($metrics['slow_queries']) && $metrics['slow_queries'] > 0) {
            $this->command->line("   <fg=red>–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {$metrics['slow_queries']}</fg=red>");
        }
        
        $this->command->line('');
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∫–µ—à–∞
     */
    private function displayCacheMetrics(array $metrics): void
    {
        $this->command->line('üóÉÔ∏è  <fg=yellow>–ö–µ—à:</fg=yellow>');
        
        if ($metrics['status'] === 'working') {
            $statusColor = 'green';
            $statusText = '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç';
        } else {
            $statusColor = 'red';
            $statusText = '‚ùå –û—à–∏–±–∫–∞';
        }
        
        $this->command->line("   –°—Ç–∞—Ç—É—Å: <fg=$statusColor>$statusText</fg=$statusColor>");
        
        if (isset($metrics['response_time_ms'])) {
            $responseTime = $metrics['response_time_ms'];
            $timeColor = $responseTime < 10 ? 'green' : ($responseTime < 50 ? 'yellow' : 'red');
            $this->command->line("   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: <fg=$timeColor>{$responseTime}ms</fg=$timeColor>");
        }
        
        if (isset($metrics['driver'])) {
            $this->command->line("   –î—Ä–∞–π–≤–µ—Ä: {$metrics['driver']}");
        }
        
        $this->command->line('');
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø–∞–º—è—Ç–∏
     */
    private function displayMemoryMetrics(array $metrics): void
    {
        $this->command->line('üíæ <fg=yellow>–ü–∞–º—è—Ç—å:</fg=yellow>');
        
        if (isset($metrics['current_mb'])) {
            $this->command->line("   –¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {$metrics['current_mb']} MB");
        }
        
        if (isset($metrics['peak_mb'])) {
            $this->command->line("   –ü–∏–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {$metrics['peak_mb']} MB");
        }
        
        if (isset($metrics['limit_mb']) && $metrics['limit_mb'] > 0) {
            $this->command->line("   –õ–∏–º–∏—Ç: {$metrics['limit_mb']} MB");
            
            if (isset($metrics['usage_percent'])) {
                $usage = $metrics['usage_percent'];
                $usageColor = $usage < 70 ? 'green' : ($usage < 90 ? 'yellow' : 'red');
                $this->command->line("   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <fg=$usageColor>{$usage}%</fg=$usageColor>");
            }
        }
        
        $this->command->line('');
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    private function displayRequestMetrics(array $metrics): void
    {
        $this->command->line('üì° <fg=yellow>HTTP –ó–∞–ø—Ä–æ—Å—ã:</fg=yellow>');
        
        if (isset($metrics['total'])) {
            $this->command->line("   –í—Å–µ–≥–æ: {$metrics['total']}");
        }
        
        if (isset($metrics['success'])) {
            $this->command->line("   <fg=green>–£—Å–ø–µ—à–Ω—ã–µ: {$metrics['success']}</fg=green>");
        }
        
        if (isset($metrics['errors'])) {
            $errorColor = $metrics['errors'] > 0 ? 'red' : 'green';
            $this->command->line("   <fg=$errorColor>–û—à–∏–±–∫–∏: {$metrics['errors']}</fg=$errorColor>");
        }
        
        if (isset($metrics['error_rate_percent'])) {
            $errorRate = $metrics['error_rate_percent'];
            $rateColor = $errorRate < 1 ? 'green' : ($errorRate < 5 ? 'yellow' : 'red');
            $this->command->line("   –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: <fg=$rateColor>{$errorRate}%</fg=$rateColor>");
        }
        
        if (isset($metrics['avg_response_time_ms'])) {
            $avgTime = $metrics['avg_response_time_ms'];
            $timeColor = $avgTime < 200 ? 'green' : ($avgTime < 1000 ? 'yellow' : 'red');
            $this->command->line("   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: <fg=$timeColor>{$avgTime}ms</fg=$timeColor>");
        }
        
        $this->command->line('');
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π
     */
    private function displayQueueMetrics(array $metrics): void
    {
        $this->command->line('‚ö° <fg=yellow>–û—á–µ—Ä–µ–¥–∏:</fg=yellow>');
        
        if (isset($metrics['connection'])) {
            $this->command->line("   –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {$metrics['connection']}");
        }
        
        if ($metrics['status'] === 'active') {
            $this->command->line("   –°—Ç–∞—Ç—É—Å: <fg=green>‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ</fg=green>");
        } elseif ($metrics['status'] === 'error') {
            $this->command->line("   –°—Ç–∞—Ç—É—Å: <fg=red>‚ùå –û—à–∏–±–∫–∞</fg=red>");
            if (isset($metrics['error'])) {
                $this->command->line("   –û—à–∏–±–∫–∞: <fg=red>{$metrics['error']}</fg=red>");
            }
        } else {
            $this->command->line("   –°—Ç–∞—Ç—É—Å: <fg=yellow>‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</fg=yellow>");
        }
        
        if (isset($metrics['pending'])) {
            $pendingColor = $metrics['pending'] > 100 ? 'red' : ($metrics['pending'] > 10 ? 'yellow' : 'green');
            $this->command->line("   –û–∂–∏–¥–∞—é—Ç: <fg=$pendingColor>{$metrics['pending']}</fg=$pendingColor>");
        }
        
        if (isset($metrics['failed']) && $metrics['failed'] > 0) {
            $this->command->line("   <fg=red>–ü—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å: {$metrics['failed']}</fg=red>");
        }
        
        $this->command->line('');
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
     */
    private function displaySystemMetrics(array $metrics): void
    {
        $this->command->line('üñ•Ô∏è  <fg=yellow>–°–∏—Å—Ç–µ–º–∞:</fg=yellow>');
        
        if (isset($metrics['php_version'])) {
            $this->command->line("   PHP –≤–µ—Ä—Å–∏—è: {$metrics['php_version']}");
        }
        
        if (isset($metrics['environment'])) {
            $envColor = $metrics['environment'] === 'production' ? 'red' : 'green';
            $this->command->line("   –û–∫—Ä—É–∂–µ–Ω–∏–µ: <fg=$envColor>{$metrics['environment']}</fg=$envColor>");
        }
        
        if (isset($metrics['load_average'])) {
            $load = $metrics['load_average'];
            $this->command->line("   –ó–∞–≥—Ä—É–∑–∫–∞: {$load['1min']} / {$load['5min']} / {$load['15min']}");
        }
        
        $this->command->line('');
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    private function displayApplicationMetrics(array $metrics): void
    {
        $this->command->line('üöÄ <fg=yellow>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</fg=yellow>');
        
        foreach ($metrics as $key => $value) {
            $displayKey = ucfirst(str_replace('_', ' ', $key));
            $this->command->line("   {$displayKey}: {$value}");
        }
        
        $this->command->line('');
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
     */
    private function displayStorageMetrics(array $metrics): void
    {
        $this->command->line('üíΩ <fg=yellow>–•—Ä–∞–Ω–∏–ª–∏—â–µ:</fg=yellow>');
        
        if (isset($metrics['free_gb'])) {
            $this->command->line("   –°–≤–æ–±–æ–¥–Ω–æ: {$metrics['free_gb']} GB");
        }
        
        if (isset($metrics['total_gb'])) {
            $this->command->line("   –í—Å–µ–≥–æ: {$metrics['total_gb']} GB");
        }
        
        if (isset($metrics['used_percent'])) {
            $usage = $metrics['used_percent'];
            $usageColor = $usage < 80 ? 'green' : ($usage < 95 ? 'yellow' : 'red');
            $this->command->line("   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <fg=$usageColor>{$usage}%</fg=$usageColor>");
        }
        
        $this->command->line('');
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
     */
    public function showRealtimeHeader(): void
    {
        $this->command->info('–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏... (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)');
        $this->command->line('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥');
        $this->command->line('');
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
     */
    public function clearScreen(): void
    {
        if (PHP_OS_FAMILY === 'Windows') {
            system('cls');
        } else {
            system('clear');
        }
    }
}