<?php

namespace App\Infrastructure\Analysis\AiContext\Analyzers;

use Illuminate\Support\Facades\File;

class FileAnalyzer extends BaseAnalyzer
{
    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
     */
    public function analyze(): array
    {
        $this->clearOutput();
        
        $this->addSection('üìÅ –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê');
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
        $stats = $this->calculateFileStats();
        $this->addLine('**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤:**');
        $this->addLine("- PHP —Ñ–∞–π–ª–æ–≤: {$stats['php']}");
        $this->addLine("- Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {$stats['vue']}");
        $this->addLine("- JavaScript: {$stats['js']}");
        $this->addLine("- –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞: " . number_format($stats['total_lines']));
        $this->addLine();
        
        return $this->getOutput();
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
     */
    public function getRecentlyModifiedFiles(int $limit = 10): array
    {
        $files = [];
        $directories = [
            'app',
            'resources/js',
            'resources/views',
            'database/migrations'
        ];
        
        foreach ($directories as $dir) {
            $path = base_path($dir);
            if (!File::exists($path)) continue;
            
            $iterator = new \RecursiveIteratorIterator(
                new \RecursiveDirectoryIterator($path, \RecursiveDirectoryIterator::SKIP_DOTS)
            );
            
            foreach ($iterator as $file) {
                if ($file->isFile() && !$this->shouldIgnoreFile($file->getPathname())) {
                    $relativePath = str_replace(base_path() . DIRECTORY_SEPARATOR, '', $file->getPathname());
                    $files[] = [
                        'path' => str_replace('\\', '/', $relativePath),
                        'time' => $file->getMTime()
                    ];
                }
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        usort($files, function($a, $b) {
            return $b['time'] - $a['time'];
        });
        
        return array_slice($files, 0, $limit);
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
     */
    public function getFileType(string $path): string
    {
        $extension = pathinfo($path, PATHINFO_EXTENSION);
        $filename = basename($path);
        
        $types = [
            'vue' => 'üß© –ö–æ–º–ø–æ–Ω–µ–Ω—Ç',
            'php' => 'üìã',
            'js' => '‚ö° JavaScript',
            'blade.php' => 'üìÑ –®–∞–±–ª–æ–Ω',
            'json' => 'üì¶ –ö–æ–Ω—Ñ–∏–≥',
            'md' => 'üìù –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'
        ];
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è PHP —Ñ–∞–π–ª–æ–≤
        if ($extension === 'php') {
            if (str_contains($path, 'Controller')) return 'üéÆ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä';
            if (str_contains($path, 'Model')) return 'üìã –ú–æ–¥–µ–ª—å';
            if (str_contains($path, 'Service')) return 'üîß –°–µ—Ä–≤–∏—Å';
            if (str_contains($path, 'migration')) return 'üóÑÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è';
        }
        
        return $types[$extension] ?? 'üìÑ';
    }
    
    /**
     * –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–æ–≤
     */
    private function calculateFileStats(): array
    {
        $stats = [
            'php' => 0,
            'vue' => 0,
            'js' => 0,
            'total_lines' => 0
        ];
        
        // PHP —Ñ–∞–π–ª—ã
        $phpFiles = glob(base_path('app/**/*.php'));
        $stats['php'] = count($phpFiles);
        
        // Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        $vueFiles = glob(base_path('resources/js/**/*.vue'));
        $stats['vue'] = count($vueFiles);
        
        // JavaScript —Ñ–∞–π–ª—ã
        $jsFiles = glob(base_path('resources/js/**/*.js'));
        $stats['js'] = count($jsFiles);
        
        // –ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        $allFiles = array_merge($phpFiles, $vueFiles, $jsFiles);
        foreach ($allFiles as $file) {
            if (file_exists($file)) {
                $stats['total_lines'] += count(file($file));
            }
        }
        
        return $stats;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª
     */
    private function shouldIgnoreFile(string $path): bool
    {
        $ignorePaths = [
            'node_modules',
            'vendor',
            'storage',
            '.git',
            'public/build',
            'bootstrap/cache'
        ];
        
        foreach ($ignorePaths as $ignore) {
            if (str_contains($path, $ignore)) {
                return true;
            }
        }
        
        return false;
    }
}