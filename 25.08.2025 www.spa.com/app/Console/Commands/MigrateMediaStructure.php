<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Infrastructure\Media\PathGenerator;
use App\Domain\Ad\Models\Ad;
use Illuminate\Support\Facades\Storage;

class MigrateMediaStructure extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'media:migrate 
                            {--dry-run : –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è}
                            {--user=* : –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö user ID}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤...');
        
        $isDryRun = $this->option('dry-run');
        $userIds = $this->option('user');
        
        if ($isDryRun) {
            $this->warn('‚ö†Ô∏è  –†–µ–∂–∏–º DRY RUN - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
        $query = Ad::whereNotNull('photos')->orWhereNotNull('video');
        
        if (!empty($userIds)) {
            $query->whereIn('user_id', $userIds);
        }
        
        $ads = $query->get();
        $totalAds = $ads->count();
        
        $this->info("üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: {$totalAds}");
        
        $bar = $this->output->createProgressBar($totalAds);
        $bar->start();
        
        $stats = [
            'photos_migrated' => 0,
            'videos_migrated' => 0,
            'errors' => 0,
            'skipped' => 0
        ];
        
        foreach ($ads as $ad) {
            try {
                $this->migrateAdMedia($ad, $isDryRun, $stats);
            } catch (\Exception $e) {
                $stats['errors']++;
                $this->error("\n‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è {$ad->id}: " . $e->getMessage());
            }
            
            $bar->advance();
        }
        
        $bar->finish();
        
        // –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        $this->newLine(2);
        $this->info('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:');
        $this->table(
            ['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
            [
                ['–§–æ—Ç–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ', $stats['photos_migrated']],
                ['–í–∏–¥–µ–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ', $stats['videos_migrated']],
                ['–ü—Ä–æ–ø—É—â–µ–Ω–æ', $stats['skipped']],
                ['–û—à–∏–±–æ–∫', $stats['errors']]
            ]
        );
        
        if (!$isDryRun) {
            $this->info('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            
            // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
            if ($this->confirm('–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –ø–∞–ø–æ–∫?')) {
                $this->cleanupOldFiles();
            }
        }
    }
    
    /**
     * –ú–∏–≥—Ä–∞—Ü–∏—è –º–µ–¥–∏–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    private function migrateAdMedia(Ad $ad, bool $isDryRun, array &$stats): void
    {
        $user = $ad->user;
        if (!$user) {
            $stats['skipped']++;
            return;
        }
        
        $newPhotoPaths = [];
        $newVideoPaths = [];
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $userBasePath = PathGenerator::getUserBasePath($user->id);
        $adBasePath = PathGenerator::getAdBasePath($user->id, $ad->id);
        
        // –ú–∏–≥—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        if ($ad->photos) {
            $photos = json_decode($ad->photos, true);
            
            foreach ($photos as $oldPath) {
                if (is_array($oldPath)) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –º–∞—Å—Å–∏–≤
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —Ñ–∞–π–ª (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å /users/)
                if (str_contains($oldPath, '/users/') && PathGenerator::isAdMediaPath($oldPath)) {
                    $this->info("‚úì –£–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω: {$oldPath}");
                    $newPhotoPaths[] = $oldPath;
                    continue;
                }
                
                $oldFullPath = $this->getFullPath($oldPath);
                
                if (!file_exists($oldFullPath)) {
                    $this->warn("\n‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {$oldPath}");
                    continue;
                }
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å
                $extension = pathinfo($oldPath, PATHINFO_EXTENSION);
                $newPath = PathGenerator::adPhotoPath($user->id, $ad->id, $extension, 'original');
                
                if (!$isDryRun) {
                    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    Storage::disk('public')->makeDirectory(dirname($newPath));
                    
                    // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª (–Ω–µ –ø–µ—Ä–µ–º–µ—â–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ)
                    Storage::disk('public')->copy(
                        $this->getStoragePath($oldPath),
                        $newPath
                    );
                }
                
                $newPhotoPaths[] = "/storage/{$newPath}";
                $stats['photos_migrated']++;
                
                $this->info("‚Üí –§–æ—Ç–æ: {$oldPath} ‚Üí {$newPath}");
            }
        }
        
        // –ú–∏–≥—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ
        if ($ad->video) {
            $videos = json_decode($ad->video, true);
            
            foreach ($videos as $oldPath) {
                if (is_array($oldPath)) continue;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —Ñ–∞–π–ª (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å /users/)
                if (str_contains($oldPath, '/users/') && PathGenerator::isAdMediaPath($oldPath)) {
                    $this->info("‚úì –£–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {$oldPath}");
                    $newVideoPaths[] = $oldPath;
                    continue;
                }
                
                $oldFullPath = $this->getFullPath($oldPath);
                
                if (!file_exists($oldFullPath)) {
                    $this->warn("\n‚ö†Ô∏è  –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {$oldPath}");
                    continue;
                }
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å
                $extension = pathinfo($oldPath, PATHINFO_EXTENSION);
                $newPath = PathGenerator::adVideoPath($user->id, $ad->id, $extension);
                
                if (!$isDryRun) {
                    Storage::disk('public')->makeDirectory(dirname($newPath));
                    Storage::disk('public')->copy(
                        $this->getStoragePath($oldPath),
                        $newPath
                    );
                }
                
                $newVideoPaths[] = "/storage/{$newPath}";
                $stats['videos_migrated']++;
                
                $this->info("‚Üí –í–∏–¥–µ–æ: {$oldPath} ‚Üí {$newPath}");
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ –ë–î
        if (!$isDryRun && (count($newPhotoPaths) > 0 || count($newVideoPaths) > 0)) {
            $ad->update([
                'photos' => count($newPhotoPaths) > 0 ? json_encode($newPhotoPaths) : $ad->photos,
                'video' => count($newVideoPaths) > 0 ? json_encode($newVideoPaths) : $ad->video,
                'user_folder' => $userBasePath,
                'media_paths' => json_encode([
                    'photos' => $newPhotoPaths,
                    'videos' => $newVideoPaths,
                    'migrated_at' => now()
                ])
            ]);
        }
    }
    
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
     */
    private function cleanupOldFiles(): void
    {
        $this->info('üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤...');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        $ads = Ad::whereNotNull('media_paths')->get();
        
        foreach ($ads as $ad) {
            $mediaPaths = json_decode($ad->media_paths, true);
            
            if (!isset($mediaPaths['migrated_at'])) {
                continue;
            }
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
            $oldPhotos = json_decode($ad->photos, true);
            $oldVideos = json_decode($ad->video, true);
            
            // –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
            // ...
        }
        
        $this->info('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
    
    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
     */
    private function getFullPath(string $path): string
    {
        return storage_path('app/public' . str_replace('/storage', '', $path));
    }
    
    private function getStoragePath(string $path): string
    {
        return str_replace('/storage/', '', $path);
    }
}