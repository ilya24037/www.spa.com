<?php

namespace App\Console\Commands\Performance;

use Illuminate\Console\Command;
use App\Infrastructure\Monitoring\MetricsCollectorService;
use App\Infrastructure\Monitoring\MetricsDisplayService;
use App\Infrastructure\Monitoring\PerformanceReportService;

/**
 * –ö–æ–º–∞–Ω–¥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
 * 
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ app:monitor-performance –≤–º–µ—Å—Ç–æ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
 */
class PerformanceMonitorCommand extends Command
{
    /**
     * The name and signature of the console command.
     */
    protected $signature = 'performance:monitor 
                          {--url=/ : URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏}
                          {--runs=5 : –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–æ–Ω–æ–≤}
                          {--detailed : –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç}
                          {--report : –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å JSON –æ—Ç—á–µ—Ç}
                          {--realtime : –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏}';

    /**
     * The console command description.
     */
    protected $description = '[DEPRECATED] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ app:monitor-performance';

    private MetricsCollectorService $metricsCollector;
    private MetricsDisplayService $metricsDisplay;
    private PerformanceReportService $reportService;

    public function __construct()
    {
        parent::__construct();
        
        $this->metricsCollector = new MetricsCollectorService();
        $this->metricsDisplay = new MetricsDisplayService($this);
        $this->reportService = new PerformanceReportService($this->metricsCollector, $this);
    }

    /**
     * Execute the console command.
     */
    public function handle(): int
    {
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –∫–æ–º–∞–Ω–¥–µ
        $this->warn('‚ö†Ô∏è  –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.');
        $this->warn('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–º–µ—Å—Ç–æ –Ω–µ—ë: php artisan app:monitor-performance');
        $this->newLine();

        // –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        if (!$this->confirm('–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π?')) {
            $this->info('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: php artisan app:monitor-performance');
            return Command::SUCCESS;
        }

        // –î–µ–ª–µ–≥–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –æ–±—â–∏–º —Å–µ—Ä–≤–∏—Å–∞–º
        if ($this->option('realtime')) {
            return $this->runRealtimeMonitoring();
        }

        if ($this->option('report')) {
            return $this->generateReport();
        }

        if ($this->option('detailed')) {
            return $this->showDetailedMetrics();
        }

        // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        return $this->showCurrentMetrics();
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
     */
    private function showCurrentMetrics(): int
    {
        $this->info('üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SPA Platform');
        $this->newLine();

        // –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —á–µ—Ä–µ–∑ –æ–±—â–∏–π —Å–µ—Ä–≤–∏—Å
        $metrics = $this->metricsCollector->collectAllMetrics();
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —á–µ—Ä–µ–∑ –æ–±—â–∏–π —Å–µ—Ä–≤–∏—Å
        $this->metricsDisplay->displayMetrics($metrics);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        $warnings = $this->reportService->checkThresholds($metrics);
        if (!empty($warnings)) {
            $this->newLine();
            $this->error('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');
            foreach ($warnings as $warning) {
                $this->warn($warning['message']);
            }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        $recommendations = $this->reportService->generateRecommendations();
        if (!empty($recommendations)) {
            $this->newLine();
            $this->comment('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
            foreach ($recommendations as $rec) {
                $this->line("  ‚Ä¢ {$rec['message']}");
            }
        }

        return Command::SUCCESS;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
     */
    private function showDetailedMetrics(): int
    {
        $this->info('üöÄ –î–µ—Ç–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
        $this->newLine();

        // –°–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        $metrics = $this->metricsCollector->collectDetailedMetrics();
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        $this->metricsDisplay->displayDetailedMetrics($metrics);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        $slowQueries = $this->reportService->getTopSlowQueries();
        if (!empty($slowQueries)) {
            $this->newLine();
            $this->comment('–¢–æ–ø –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:');
            foreach ($slowQueries as $query) {
                $this->line("  ‚Ä¢ {$query['query']} ({$query['time']}ms, {$query['count']} —Ä–∞–∑)");
            }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π –ø–∞–º—è—Ç–∏
        $memoryConsumers = $this->reportService->getTopMemoryConsumers();
        if (!empty($memoryConsumers)) {
            $this->newLine();
            $this->comment('–¢–æ–ø –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π –ø–∞–º—è—Ç–∏:');
            foreach ($memoryConsumers as $consumer) {
                $this->line("  ‚Ä¢ {$consumer['component']}: {$consumer['memory_mb']} MB");
            }
        }

        return Command::SUCCESS;
    }

    /**
     * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
     */
    private function runRealtimeMonitoring(): int
    {
        $this->metricsDisplay->showRealtimeHeader();
        
        while (true) {
            $this->metricsDisplay->clearScreen();
            
            // –°–æ–±–∏—Ä–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            $metrics = $this->metricsCollector->collectAllMetrics();
            $this->metricsDisplay->displayMetrics($metrics);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            $warnings = $this->reportService->checkThresholds($metrics);
            if (!empty($warnings)) {
                $this->newLine();
                $this->error('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
                foreach ($warnings as $warning) {
                    $this->warn($warning['message']);
                }
            }
            
            // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            sleep(5);
        }

        return Command::SUCCESS;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç
     */
    private function generateReport(): int
    {
        $filename = $this->reportService->generateReport();
        $this->info("‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {$filename}");
        
        return Command::SUCCESS;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
     */
    public function getMigrationCommand(): string
    {
        return 'app:monitor-performance';
    }
}