<?php

namespace App\Enums;

/**
 * –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫
 */
enum SubscriptionPlan: string
{
    case FREE = 'free';
    case BASIC = 'basic';
    case PREMIUM = 'premium';
    case VIP = 'vip';

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
     */
    public function getLabel(): string
    {
        return match($this) {
            self::FREE => '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π',
            self::BASIC => '–ë–∞–∑–æ–≤—ã–π',
            self::PREMIUM => '–ü—Ä–µ–º–∏—É–º',
            self::VIP => 'VIP',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
     */
    public function getDescription(): string
    {
        return match($this) {
            self::FREE => '–ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
            self::BASIC => '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –±–æ–ª—å—à–µ —Ñ–æ—Ç–æ',
            self::PREMIUM => '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            self::VIP => '–ú–∞–∫—Å–∏–º—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö –∑–∞ –º–µ—Å—è—Ü
     */
    public function getPrice(): int
    {
        return match($this) {
            self::FREE => 0,
            self::BASIC => 990,
            self::PREMIUM => 2490,
            self::VIP => 4990,
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø–ª–∞–Ω–∞
     */
    public function getLimits(): array
    {
        return match($this) {
            self::FREE => [
                'photos' => 3,
                'videos' => 0,
                'priority' => 0,
                'badge' => false,
                'statistics' => false,
                'no_ads' => false,
                'boost_per_month' => 0,
                'description_length' => 500,
                'services' => 5,
                'work_zones' => 1,
                'response_time_hours' => 48,
            ],
            self::BASIC => [
                'photos' => 10,
                'videos' => 2,
                'priority' => 1,
                'badge' => true,
                'badge_type' => 'basic',
                'statistics' => false,
                'no_ads' => false,
                'boost_per_month' => 1,
                'description_length' => 1000,
                'services' => 10,
                'work_zones' => 3,
                'response_time_hours' => 24,
            ],
            self::PREMIUM => [
                'photos' => 20,
                'videos' => 5,
                'priority' => 2,
                'badge' => true,
                'badge_type' => 'premium',
                'statistics' => true,
                'no_ads' => true,
                'boost_per_month' => 3,
                'description_length' => 2000,
                'services' => 20,
                'work_zones' => 5,
                'response_time_hours' => 12,
                'analytics' => true,
                'competitor_analysis' => false,
            ],
            self::VIP => [
                'photos' => 50,
                'videos' => 10,
                'priority' => 3,
                'badge' => true,
                'badge_type' => 'vip',
                'statistics' => true,
                'no_ads' => true,
                'boost_per_month' => 10,
                'description_length' => 5000,
                'services' => -1, // –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ
                'work_zones' => -1, // –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ
                'response_time_hours' => 1,
                'analytics' => true,
                'competitor_analysis' => true,
                'personal_manager' => true,
                'priority_support' => true,
            ],
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ª–∏–º–∏—Ç
     */
    public function getLimit(string $key): mixed
    {
        $limits = $this->getLimits();
        return $limits[$key] ?? null;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è UI
     */
    public function getColor(): string
    {
        return match($this) {
            self::FREE => '#6B7280',    // gray
            self::BASIC => '#3B82F6',   // blue
            self::PREMIUM => '#8B5CF6', // purple
            self::VIP => '#F59E0B',     // amber
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è UI
     */
    public function getIcon(): string
    {
        return match($this) {
            self::FREE => 'üÜì',
            self::BASIC => '‚≠ê',
            self::PREMIUM => 'üíé',
            self::VIP => 'üëë',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–ª–∞–Ω–∞
     */
    public function getFeatures(): array
    {
        return match($this) {
            self::FREE => [
                '–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å',
                '–î–æ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π',
                '–î–æ 5 —É—Å–ª—É–≥',
                '1 —Ä–∞–π–æ–Ω —Ä–∞–±–æ—Ç—ã',
            ],
            self::BASIC => [
                '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å',
                '–î–æ 10 —Ñ–æ—Ç–æ –∏ 2 –≤–∏–¥–µ–æ',
                '–ó–Ω–∞—á–æ–∫ "–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π"',
                '–î–æ 10 —É—Å–ª—É–≥',
                '3 —Ä–∞–π–æ–Ω–∞ —Ä–∞–±–æ—Ç—ã',
                '1 –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø–æ–¥–Ω—è—Ç–∏–µ –≤ –º–µ—Å—è—Ü',
                '–û—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã',
            ],
            self::PREMIUM => [
                '–í—Å–µ –∏–∑ —Ç–∞—Ä–∏—Ñ–∞ "–ë–∞–∑–æ–≤—ã–π"',
                '–î–æ 20 —Ñ–æ—Ç–æ –∏ 5 –≤–∏–¥–µ–æ',
                '–ó–Ω–∞—á–æ–∫ "–ü—Ä–µ–º–∏—É–º" ‚≠ê',
                '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ',
                '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
                '–ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã',
                '3 –ø–æ–¥–Ω—è—Ç–∏—è –≤ –º–µ—Å—è—Ü',
                '–î–æ 20 —É—Å–ª—É–≥',
                '5 —Ä–∞–π–æ–Ω–æ–≤ —Ä–∞–±–æ—Ç—ã',
            ],
            self::VIP => [
                '–í—Å–µ –∏–∑ —Ç–∞—Ä–∏—Ñ–∞ "–ü—Ä–µ–º–∏—É–º"',
                '–î–æ 50 —Ñ–æ—Ç–æ –∏ 10 –≤–∏–¥–µ–æ',
                '–ó–Ω–∞—á–æ–∫ "VIP" üëë',
                '–¢–æ–ø –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ–∏—Å–∫–µ',
                '–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
                '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä',
                '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7',
                '10 –ø–æ–¥–Ω—è—Ç–∏–π –≤ –º–µ—Å—è—Ü',
                '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏',
                '–†–∞–±–æ—Ç–∞ –ø–æ –≤—Å–µ–º—É –≥–æ—Ä–æ–¥—É',
            ],
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
     */
    public function getDiscount(int $months): int
    {
        if ($this === self::FREE) {
            return 0;
        }

        return match($months) {
            1 => 0,    // –º–µ—Å—è—Ü - –±–µ–∑ —Å–∫–∏–¥–∫–∏
            3 => 10,   // –∫–≤–∞—Ä—Ç–∞–ª - 10%
            6 => 15,   // –ø–æ–ª–≥–æ–¥–∞ - 15%
            12 => 20,  // –≥–æ–¥ - 20%
            default => 0,
        };
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
     */
    public function calculateTotal(int $months): int
    {
        $basePrice = $this->getPrice() * $months;
        $discount = $this->getDiscount($months);
        
        return (int) ($basePrice * (100 - $discount) / 100);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–ª–∞–Ω –±—ã—Ç—å —É–ª—É—á—à–µ–Ω
     */
    public function canUpgrade(): bool
    {
        return $this !== self::VIP;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–ª–∞–Ω –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞
     */
    public function getNextPlan(): ?self
    {
        return match($this) {
            self::FREE => self::BASIC,
            self::BASIC => self::PREMIUM,
            self::PREMIUM => self::VIP,
            self::VIP => null,
        };
    }

    /**
     * –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã
     */
    public static function getAllPlans(): array
    {
        return [
            self::FREE,
            self::BASIC,
            self::PREMIUM,
            self::VIP,
        ];
    }

    /**
     * –ü–ª–∞—Ç–Ω—ã–µ –ø–ª–∞–Ω—ã
     */
    public static function getPaidPlans(): array
    {
        return [
            self::BASIC,
            self::PREMIUM,
            self::VIP,
        ];
    }
}