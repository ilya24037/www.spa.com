<?php

namespace App\Enums;

/**
 * –¢–∏–ø—ã –æ—Ç–∑—ã–≤–æ–≤
 */
enum ReviewType: string
{
    case SERVICE = 'service';         // –û—Ç–∑—ã–≤ –æ —É—Å–ª—É–≥–µ
    case MASTER = 'master';          // –û—Ç–∑—ã–≤ –æ –º–∞—Å—Ç–µ—Ä–µ
    case GENERAL = 'general';        // –û–±—â–∏–π –æ—Ç–∑—ã–≤
    case COMPLAINT = 'complaint';    // –ñ–∞–ª–æ–±–∞

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞
     */
    public function getLabel(): string
    {
        return match($this) {
            self::SERVICE => '–û —É—Å–ª—É–≥–µ',
            self::MASTER => '–û –º–∞—Å—Ç–µ—Ä–µ',
            self::GENERAL => '–û–±—â–∏–π –æ—Ç–∑—ã–≤',
            self::COMPLAINT => '–ñ–∞–ª–æ–±–∞',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É —Ç–∏–ø–∞
     */
    public function getIcon(): string
    {
        return match($this) {
            self::SERVICE => '‚≠ê',
            self::MASTER => 'üë§',
            self::GENERAL => 'üí¨',
            self::COMPLAINT => '‚ö†Ô∏è',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç —Ç–∏–ø–∞
     */
    public function getColor(): string
    {
        return match($this) {
            self::SERVICE => 'primary',
            self::MASTER => 'info',
            self::GENERAL => 'secondary',
            self::COMPLAINT => 'warning',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
     */
    public function getModerationPriority(): string
    {
        return match($this) {
            self::COMPLAINT => 'high',
            self::SERVICE, self::MASTER => 'medium',
            self::GENERAL => 'low',
        };
    }

    /**
     * –¢—Ä–µ–±—É–µ—Ç –ª–∏ —Ç–∏–ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é
     */
    public function requiresModeration(): bool
    {
        return match($this) {
            self::COMPLAINT => true,
            self::SERVICE, self::MASTER, self::GENERAL => false,
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –æ—Ç–∑—ã–≤–∞
     */
    public function getMinLength(): int
    {
        return match($this) {
            self::SERVICE, self::MASTER => 10,
            self::GENERAL => 5,
            self::COMPLAINT => 20,
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –æ—Ç–∑—ã–≤–∞
     */
    public function getMaxLength(): int
    {
        return match($this) {
            self::SERVICE, self::MASTER => 1000,
            self::GENERAL => 500,
            self::COMPLAINT => 2000,
        };
    }

    /**
     * –†–∞–∑—Ä–µ—à–µ–Ω—ã –ª–∏ —Ñ–æ—Ç–æ –≤ –æ—Ç–∑—ã–≤–µ
     */
    public function allowsPhotos(): bool
    {
        return match($this) {
            self::SERVICE, self::MASTER, self::GENERAL => true,
            self::COMPLAINT => false,
        };
    }

    /**
     * –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –ª–∏ –æ—Ü–µ–Ω–∫–∞
     */
    public function requiresRating(): bool
    {
        return match($this) {
            self::SERVICE, self::MASTER => true,
            self::GENERAL, self::COMPLAINT => false,
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     */
    public function getValidationRules(): array
    {
        $rules = [
            'comment' => "required|string|min:{$this->getMinLength()}|max:{$this->getMaxLength()}",
        ];

        if ($this->requiresRating()) {
            $rules['rating'] = 'required|integer|between:1,5';
        }

        if ($this->allowsPhotos()) {
            $rules['photos'] = 'array|max:5';
            $rules['photos.*'] = 'image|max:5120'; // 5MB
        }

        return $rules;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
     */
    public function getPlaceholder(): string
    {
        return match($this) {
            self::SERVICE => '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ —É—Å–ª—É–≥–∏, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ, –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è—Ö...',
            self::MASTER => '–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º –º–∞—Å—Ç–µ—Ä–∞, –æ–±—â–µ–Ω–∏–µ, –ø—É–Ω–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å...',
            self::GENERAL => '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –æ–±—â–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏...',
            self::COMPLAINT => '–û–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è...',
        };
    }
}