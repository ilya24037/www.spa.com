<?php

namespace App\Enums;

/**
 * –°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ
 */
enum UserStatus: string
{
    case ACTIVE = 'active';
    case INACTIVE = 'inactive';
    case PENDING = 'pending';
    case SUSPENDED = 'suspended';
    case BANNED = 'banned';
    case DELETED = 'deleted';

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
     */
    public function getLabel(): string
    {
        return match($this) {
            self::ACTIVE => '–ê–∫—Ç–∏–≤–Ω—ã–π',
            self::INACTIVE => '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π',
            self::PENDING => '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
            self::SUSPENDED => '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
            self::BANNED => '–ó–∞–±–∞–Ω–µ–Ω',
            self::DELETED => '–£–¥–∞–ª–µ–Ω',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
     */
    public function getDescription(): string
    {
        return match($this) {
            self::ACTIVE => '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω –∏ –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏',
            self::INACTIVE => '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª email',
            self::PENDING => '–ê–∫–∫–∞—É–Ω—Ç –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
            self::SUSPENDED => '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
            self::BANNED => '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞',
            self::DELETED => '–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è UI
     */
    public function getColor(): string
    {
        return match($this) {
            self::ACTIVE => '#10B981',      // green
            self::INACTIVE => '#6B7280',    // gray
            self::PENDING => '#F59E0B',     // amber
            self::SUSPENDED => '#EF4444',   // red
            self::BANNED => '#DC2626',      // red-600
            self::DELETED => '#4B5563',     // gray-600
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞
     */
    public function getIcon(): string
    {
        return match($this) {
            self::ACTIVE => '‚úÖ',
            self::INACTIVE => '‚è∏Ô∏è',
            self::PENDING => '‚è≥',
            self::SUSPENDED => 'üö´',
            self::BANNED => '‚ùå',
            self::DELETED => 'üóëÔ∏è',
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ö–æ–¥–∏—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É
     */
    public function canLogin(): bool
    {
        return match($this) {
            self::ACTIVE => true,
            default => false,
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
     */
    public function canCreateContent(): bool
    {
        return match($this) {
            self::ACTIVE => true,
            default => false,
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    public function canReceiveNotifications(): bool
    {
        return match($this) {
            self::ACTIVE, self::INACTIVE => true,
            default => false,
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
     */
    public function isBlocked(): bool
    {
        return match($this) {
            self::SUSPENDED, self::BANNED => true,
            default => false,
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–Ω—ã–º
     */
    public function isDeleted(): bool
    {
        return $this === self::DELETED;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–∞ –ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
     */
    public function needsActivation(): bool
    {
        return match($this) {
            self::PENDING, self::INACTIVE => true,
            default => false,
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã
     */
    public function getNextPossibleStatuses(): array
    {
        return match($this) {
            self::PENDING => [self::ACTIVE, self::SUSPENDED, self::BANNED],
            self::INACTIVE => [self::ACTIVE, self::SUSPENDED, self::BANNED],
            self::ACTIVE => [self::INACTIVE, self::SUSPENDED, self::BANNED, self::DELETED],
            self::SUSPENDED => [self::ACTIVE, self::BANNED, self::DELETED],
            self::BANNED => [self::ACTIVE, self::DELETED],
            self::DELETED => [], // –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∫–∏
     */
    public static function options(): array
    {
        $statuses = [];
        foreach (self::cases() as $status) {
            $statuses[$status->value] = $status->getLabel();
        }
        return $statuses;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    public static function default(): self
    {
        return self::PENDING; // –¢—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
     */
    public static function activeStatuses(): array
    {
        return [self::ACTIVE, self::INACTIVE];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
     */
    public static function blockedStatuses(): array
    {
        return [self::SUSPENDED, self::BANNED];
    }
}