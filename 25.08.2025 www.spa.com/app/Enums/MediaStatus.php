<?php

namespace App\Enums;

/**
 * –°—Ç–∞—Ç—É—Å—ã –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
 */
enum MediaStatus: string
{
    case PENDING = 'pending';
    case PROCESSING = 'processing';
    case PROCESSED = 'processed';
    case FAILED = 'failed';
    case ARCHIVED = 'archived';
    case DELETED = 'deleted';

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
     */
    public function getLabel(): string
    {
        return match($this) {
            self::PENDING => '–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
            self::PROCESSING => '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
            self::PROCESSED => '–û–±—Ä–∞–±–æ—Ç–∞–Ω',
            self::FAILED => '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
            self::ARCHIVED => '–í –∞—Ä—Ö–∏–≤–µ',
            self::DELETED => '–£–¥–∞–ª–µ–Ω',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
     */
    public function getDescription(): string
    {
        return match($this) {
            self::PENDING => '–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
            self::PROCESSING => '–§–∞–π–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —Ç.–¥.)',
            self::PROCESSED => '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é',
            self::FAILED => '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞',
            self::ARCHIVED => '–§–∞–π–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –∞—Ä—Ö–∏–≤',
            self::DELETED => '–§–∞–π–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π',
        ];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è UI
     */
    public function getColor(): string
    {
        return match($this) {
            self::PENDING => '#F59E0B',      // amber
            self::PROCESSING => '#3B82F6',   // blue
            self::PROCESSED => '#10B981',    // green
            self::FAILED => '#EF4444',       // red
            self::ARCHIVED => '#6B7280',     // gray
            self::DELETED => '#4B5563',      // gray-600
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞
     */
    public function getIcon(): string
    {
        return match($this) {
            self::PENDING => '‚è≥',
            self::PROCESSING => '‚öôÔ∏è',
            self::PROCESSED => '‚úÖ',
            self::FAILED => '‚ùå',
            self::ARCHIVED => 'üì¶',
            self::DELETED => 'üóëÔ∏è',
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Ñ–∞–π–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
     */
    public function isAvailable(): bool
    {
        return match($this) {
            self::PROCESSED => true,
            default => false,
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–∞ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
     */
    public function needsProcessing(): bool
    {
        return match($this) {
            self::PENDING => true,
            default => false,
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
     */
    public function isProcessing(): bool
    {
        return $this === self::PROCESSING;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞
     */
    public function isFailed(): bool
    {
        return $this === self::FAILED;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–¥–∞–ª–µ–Ω –ª–∏ —Ñ–∞–π–ª
     */
    public function isDeleted(): bool
    {
        return $this === self::DELETED;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
     */
    public function canBeDeleted(): bool
    {
        return match($this) {
            self::PROCESSED, self::FAILED, self::ARCHIVED => true,
            default => false,
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª
     */
    public function canBeRestored(): bool
    {
        return match($this) {
            self::ARCHIVED, self::DELETED => true,
            default => false,
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã
     */
    public function getNextPossibleStatuses(): array
    {
        return match($this) {
            self::PENDING => [self::PROCESSING, self::FAILED, self::DELETED],
            self::PROCESSING => [self::PROCESSED, self::FAILED, self::DELETED],
            self::PROCESSED => [self::ARCHIVED, self::DELETED],
            self::FAILED => [self::PENDING, self::DELETED],
            self::ARCHIVED => [self::PROCESSED, self::DELETED],
            self::DELETED => [], // –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     */
    public static function getActiveStatuses(): array
    {
        return [self::PENDING, self::PROCESSING, self::PROCESSED];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã —Å –æ—à–∏–±–∫–∞–º–∏
     */
    public static function getErrorStatuses(): array
    {
        return [self::FAILED];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
     */
    public static function getInactiveStatuses(): array
    {
        return [self::ARCHIVED, self::DELETED];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∫–∏
     */
    public static function options(): array
    {
        $statuses = [];
        foreach (self::cases() as $status) {
            $statuses[$status->value] = $status->getLabel();
        }
        return $statuses;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
     */
    public static function default(): self
    {
        return self::PENDING;
    }
}