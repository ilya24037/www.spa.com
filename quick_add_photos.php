<?php

// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –º–∞—Å—Ç–µ—Ä–∞
// –ù–µ —Ç—Ä–µ–±—É–µ—Ç composer –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
$host = '127.0.0.1';
$dbname = 'laravel_auth';
$username = 'root';
$password = 'Animatori2025!';

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8mb4", $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    echo "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ\n";
} catch (PDOException $e) {
    die("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " . $e->getMessage() . "\n");
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function createThumbnail($sourcePath, $targetPath, $width = 300, $height = 300) {
    $imageInfo = getimagesize($sourcePath);
    if (!$imageInfo) {
        return false;
    }
    
    $sourceWidth = $imageInfo[0];
    $sourceHeight = $imageInfo[1];
    $mimeType = $imageInfo['mime'];
    
    // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    switch ($mimeType) {
        case 'image/jpeg':
            $sourceImage = imagecreatefromjpeg($sourcePath);
            break;
        case 'image/png':
            $sourceImage = imagecreatefrompng($sourcePath);
            break;
        case 'image/gif':
            $sourceImage = imagecreatefromgif($sourcePath);
            break;
        default:
            return false;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    $targetImage = imagecreatetruecolor($width, $height);
    
    // –î–ª—è PNG —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
    if ($mimeType === 'image/png') {
        imagealphablending($targetImage, false);
        imagesavealpha($targetImage, true);
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ (crop)
    $sourceRatio = $sourceWidth / $sourceHeight;
    $targetRatio = $width / $height;
    
    if ($sourceRatio > $targetRatio) {
        // –ò—Å—Ç–æ—á–Ω–∏–∫ —à–∏—Ä–µ
        $newWidth = $sourceHeight * $targetRatio;
        $newHeight = $sourceHeight;
        $srcX = ($sourceWidth - $newWidth) / 2;
        $srcY = 0;
    } else {
        // –ò—Å—Ç–æ—á–Ω–∏–∫ –≤—ã—à–µ
        $newWidth = $sourceWidth;
        $newHeight = $sourceWidth / $targetRatio;
        $srcX = 0;
        $srcY = ($sourceHeight - $newHeight) / 2;
    }
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∏ –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
    imagecopyresampled(
        $targetImage, $sourceImage,
        0, 0, $srcX, $srcY,
        $width, $height, $newWidth, $newHeight
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    $result = false;
    switch ($mimeType) {
        case 'image/jpeg':
            $result = imagejpeg($targetImage, $targetPath, 85);
            break;
        case 'image/png':
            $result = imagepng($targetImage, $targetPath, 6);
            break;
        case 'image/gif':
            $result = imagegif($targetImage, $targetPath);
            break;
    }
    
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
    imagedestroy($sourceImage);
    imagedestroy($targetImage);
    
    return $result;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function resizeImage($sourcePath, $targetPath, $maxWidth = 800, $maxHeight = 800) {
    $imageInfo = getimagesize($sourcePath);
    if (!$imageInfo) {
        return false;
    }
    
    $sourceWidth = $imageInfo[0];
    $sourceHeight = $imageInfo[1];
    $mimeType = $imageInfo['mime'];
    
    // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º
    if ($sourceWidth <= $maxWidth && $sourceHeight <= $maxHeight) {
        return copy($sourcePath, $targetPath);
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    $ratio = min($maxWidth / $sourceWidth, $maxHeight / $sourceHeight);
    $newWidth = round($sourceWidth * $ratio);
    $newHeight = round($sourceHeight * $ratio);
    
    // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    switch ($mimeType) {
        case 'image/jpeg':
            $sourceImage = imagecreatefromjpeg($sourcePath);
            break;
        case 'image/png':
            $sourceImage = imagecreatefrompng($sourcePath);
            break;
        case 'image/gif':
            $sourceImage = imagecreatefromgif($sourcePath);
            break;
        default:
            return false;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    $targetImage = imagecreatetruecolor($newWidth, $newHeight);
    
    // –î–ª—è PNG —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
    if ($mimeType === 'image/png') {
        imagealphablending($targetImage, false);
        imagesavealpha($targetImage, true);
    }
    
    // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
    imagecopyresampled(
        $targetImage, $sourceImage,
        0, 0, 0, 0,
        $newWidth, $newHeight, $sourceWidth, $sourceHeight
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    $result = false;
    switch ($mimeType) {
        case 'image/jpeg':
            $result = imagejpeg($targetImage, $targetPath, 85);
            break;
        case 'image/png':
            $result = imagepng($targetImage, $targetPath, 6);
            break;
        case 'image/gif':
            $result = imagegif($targetImage, $targetPath);
            break;
    }
    
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
    imagedestroy($sourceImage);
    imagedestroy($targetImage);
    
    return $result;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –º–∞—Å—Ç–µ—Ä–∞
 */
function addMasterPhotos($masterId, $photosPaths, $isMain = false) {
    global $pdo;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ
    $stmt = $pdo->prepare("SELECT * FROM master_profiles WHERE id = ?");
    $stmt->execute([$masterId]);
    $master = $stmt->fetch(PDO::FETCH_ASSOC);
    
    if (!$master) {
        echo "‚ùå –ú–∞—Å—Ç–µ—Ä —Å ID {$masterId} –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
        return false;
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –º–∞—Å—Ç–µ—Ä–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    $folderName = getFolderName($master['first_name'], $master['last_name'], $master['id']);
    $masterDir = "storage/app/private/masters/{$folderName}";
    $photosDir = "{$masterDir}/photos";
    
    if (!is_dir($photosDir)) {
        mkdir($photosDir, 0755, true);
        echo "üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {$photosDir}\n";
    }
    
    $uploadedCount = 0;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
    $stmt = $pdo->prepare("SELECT MAX(sort_order) FROM master_photos WHERE master_profile_id = ?");
    $stmt->execute([$masterId]);
    $currentOrder = $stmt->fetchColumn() ?? 0;
    
    foreach ($photosPaths as $photoPath) {
        if (!file_exists($photoPath)) {
            echo "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {$photoPath}\n";
            continue;
        }
        
        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            $extension = pathinfo($photoPath, PATHINFO_EXTENSION);
            $filename = 'photo_' . (time() + $uploadedCount) . '.' . $extension;
            $targetPath = "{$photosDir}/{$filename}";
            
            // –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            if (!copy($photoPath, $targetPath)) {
                echo "‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {$photoPath}\n";
                continue;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            $imageInfo = getimagesize($photoPath);
            $width = $imageInfo[0];
            $height = $imageInfo[1];
            $mimeType = $imageInfo['mime'];
            $fileSize = filesize($photoPath);
            
            // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É (300x300)
            $thumbFilename = 'thumb_' . $filename;
            $thumbPath = "{$photosDir}/{$thumbFilename}";
            
            if (createThumbnail($photoPath, $thumbPath, 300, 300)) {
                echo "‚úÖ –°–æ–∑–¥–∞–Ω–∞ –º–∏–Ω–∏–∞—Ç—é—Ä–∞: {$thumbFilename}\n";
            } else {
                echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä—É –¥–ª—è: {$filename}\n";
            }
            
            // –°–æ–∑–¥–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä (800px)
            $mediumFilename = 'medium_' . $filename;
            $mediumPath = "{$photosDir}/{$mediumFilename}";
            
            if (resizeImage($photoPath, $mediumPath, 800, 800)) {
                echo "‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {$mediumFilename}\n";
            } else {
                echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è: {$filename}\n";
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            $currentOrder++;
            $stmt = $pdo->prepare("
                INSERT INTO master_photos 
                (master_profile_id, filename, mime_type, file_size, width, height, is_main, sort_order, is_approved, created_at, updated_at) 
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, 1, NOW(), NOW())
            ");
            
            $stmt->execute([
                $masterId,
                $filename,
                $mimeType,
                $fileSize,
                $width,
                $height,
                $isMain && $uploadedCount === 0,
                $currentOrder
            ]);
            
            echo "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {$filename} (—Ä–∞–∑–º–µ—Ä: {$width}x{$height}, {$fileSize} –±–∞–π—Ç)\n";
            $uploadedCount++;
            
        } catch (Exception $e) {
            echo "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {$photoPath}: " . $e->getMessage() . "\n";
        }
    }
    
    echo "üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {$uploadedCount} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {$master['first_name']} {$master['last_name']}\n";
    return $uploadedCount > 0;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏ –º–∞—Å—Ç–µ—Ä–∞
 */
function getFolderName($firstName, $lastName, $id) {
    $name = $firstName . ($lastName ? ' ' . $lastName : '');
    
    $translitMap = [
        '–∞' => 'a', '–±' => 'b', '–≤' => 'v', '–≥' => 'g', '–¥' => 'd',
        '–µ' => 'e', '—ë' => 'yo', '–∂' => 'zh', '–∑' => 'z', '–∏' => 'i',
        '–π' => 'y', '–∫' => 'k', '–ª' => 'l', '–º' => 'm', '–Ω' => 'n',
        '–æ' => 'o', '–ø' => 'p', '—Ä' => 'r', '—Å' => 's', '—Ç' => 't',
        '—É' => 'u', '—Ñ' => 'f', '—Ö' => 'h', '—Ü' => 'c', '—á' => 'ch',
        '—à' => 'sh', '—â' => 'sch', '—ä' => '', '—ã' => 'y', '—å' => '',
        '—ç' => 'e', '—é' => 'yu', '—è' => 'ya'
    ];
    
    $transliterated = strtr(mb_strtolower($name), $translitMap);
    $slug = preg_replace('/[^a-z0-9\-]/', '', str_replace(' ', '-', $transliterated));
    
    return $slug . '-' . $id;
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
echo "üöÄ –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –º–∞—Å—Ç–µ—Ä–∞\n";
echo "==========================================\n\n";

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ ID 3 (–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞)
echo "üì∏ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ï–ª–µ–Ω—ã –°–∏–¥–æ—Ä–æ–≤–æ–π (ID: 3):\n";
$elenaPhotos = [
    'public/images/masters/elena1.jpg',
    'public/images/masters/elena2.jpg',
    'public/images/masters/elena3.jpg',
    'public/images/masters/elena4.jpg',
    'public/images/masters/elena5.jpg',
    'public/images/masters/elena6.jpg'
];

$result = addMasterPhotos(3, $elenaPhotos, true);

if ($result) {
    echo "\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–∞—Å—Ç–µ—Ä–∞:\n";
    echo "üåê http://127.0.0.1:8000/masters/elena-sidorova-3\n";
} else {
    echo "\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n";
}

echo "\nüí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª\n";
echo "   –∏ –∏–∑–º–µ–Ω–∏—Ç–µ ID –º–∞—Å—Ç–µ—Ä–∞ –∏ –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º.\n"; 