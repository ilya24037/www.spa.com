#!/usr/bin/env node

/**
 * Chrome DevTools MCP Helper Script
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Chrome DevTools MCP
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Chrome DevTools MCP
const commands = {
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  performance: () => {
    console.log('üìä –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Claude:');
    console.log('');
    console.log('–ö–æ–º–∞–Ω–¥–∞: "Check the performance of http://localhost:8000"');
    console.log('');
    console.log('Claude –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:');
    console.log('- –û—Ç–∫—Ä–æ–µ—Ç Chrome –±—Ä–∞—É–∑–µ—Ä');
    console.log('- –ó–∞–ø–∏—à–µ—Ç performance trace');
    console.log('- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Core Web Vitals (LCP, CLS, INP)');
    console.log('- –ü—Ä–µ–¥–ª–æ–∂–∏—Ç —É–ª—É—á—à–µ–Ω–∏—è');
  },

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  test: () => {
    console.log('üß™ –ü—Ä–∏–º–µ—Ä—ã —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:');
    console.log('');
    console.log('1. Booking Calendar:');
    console.log('   "Test booking calendar at http://localhost:8000/masters/1"');
    console.log('');
    console.log('2. Search:');
    console.log('   "Test search functionality at http://localhost:8000"');
    console.log('');
    console.log('3. Mobile View:');
    console.log('   "Test mobile responsiveness at http://localhost:8000"');
  },

  // Headless —Ä–µ–∂–∏–º
  headless: () => {
    console.log('ü§ñ –ó–∞–ø—É—Å–∫ –≤ headless —Ä–µ–∂–∏–º–µ:');
    console.log('');
    try {
      execSync('npx chrome-devtools-mcp@latest --headless', { stdio: 'inherit' });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error.message);
    }
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
  status: () => {
    console.log('‚úÖ Chrome DevTools MCP Status:');
    console.log('');

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Node.js –≤–µ—Ä—Å–∏—é
    const nodeVersion = process.version;
    console.log(`Node.js: ${nodeVersion} (—Ç—Ä–µ–±—É–µ—Ç—Å—è 22+)`);

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É MCP
    const claudeConfigPath = path.join(process.env.USERPROFILE || process.env.HOME, '.claude.json');
    if (fs.existsSync(claudeConfigPath)) {
      const config = JSON.parse(fs.readFileSync(claudeConfigPath, 'utf8'));
      if (config.mcpServers && config.mcpServers['chrome-devtools']) {
        console.log('MCP Server: ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        console.log('Command:', config.mcpServers['chrome-devtools'].command,
                    config.mcpServers['chrome-devtools'].args.join(' '));
      } else {
        console.log('MCP Server: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω');
        console.log('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π: claude mcp add chrome-devtools npx chrome-devtools-mcp@latest');
      }
    } else {
      console.log('Claude Config: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Chrome
    try {
      execSync('where chrome', { stdio: 'pipe' });
      console.log('Chrome: ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch {
      console.log('Chrome: ‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É Chrome –±—Ä–∞—É–∑–µ—Ä–∞');
    }
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
  help: () => {
    console.log('üöÄ Chrome DevTools MCP Helper');
    console.log('');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run browser:[command]');
    console.log('');
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
    console.log('  performance - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
    console.log('  test        - –ü—Ä–∏–º–µ—Ä—ã —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤');
    console.log('  headless    - –ó–∞–ø—É—Å–∫ –≤ headless —Ä–µ–∂–∏–º–µ');
    console.log('  status      - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏');
    console.log('  help        - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É');
    console.log('');
    console.log('–ü—Ä–∏–º–µ—Ä—ã:');
    console.log('  npm run browser:performance');
    console.log('  npm run browser:test');
    console.log('  npm run browser:status');
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
const command = process.argv[2] || 'help';

// –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
if (commands[command]) {
  commands[command]();
} else {
  console.log(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
  console.log('');
  commands.help();
}