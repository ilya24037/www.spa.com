const { execSync } = require('child_process');

console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å–∞–º—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ TypeScript –æ—à–∏–±–∫–∞–º...\n');

try {
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏
  const output = execSync('npm run build', { 
    encoding: 'utf8', 
    stdio: 'pipe',
    timeout: 60000 
  });
  console.log('‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
} catch (error) {
  const stderr = error.stderr || error.stdout || '';
  const lines = stderr.split('\n');
  const errorLines = lines.filter(line => line.includes(': error TS'));
  
  console.log(`üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: ${errorLines.length}\n`);
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Ñ–∞–π–ª–∞–º
  const fileErrors = {};
  
  errorLines.forEach(line => {
    const match = line.match(/^(.+?)\(\d+,\d+\):\s*error\s*(TS\d+):\s*(.+)$/);
    if (match) {
      const [, filePath, errorCode, errorMessage] = match;
      const fileName = filePath.replace(/^.*[\\\/]/, ''); // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
      
      if (!fileErrors[filePath]) {
        fileErrors[filePath] = {
          fileName,
          fullPath: filePath,
          errors: [],
          count: 0
        };
      }
      
      fileErrors[filePath].errors.push({
        code: errorCode,
        message: errorMessage.substring(0, 80) + '...'
      });
      fileErrors[filePath].count++;
    }
  });
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—à–∏–±–æ–∫
  const sortedFiles = Object.values(fileErrors)
    .sort((a, b) => b.count - a.count)
    .slice(0, 15); // –¢–æ–ø-15 —Ñ–∞–π–ª–æ–≤
  
  console.log('üî• –¢–û–ü-15 —Å–∞–º—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:\n');
  
  sortedFiles.forEach((file, index) => {
    console.log(`${index + 1}. üìÅ ${file.fileName}`);
    console.log(`   üìç ${file.fullPath}`);
    console.log(`   ‚ùå ${file.count} –æ—à–∏–±–æ–∫`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 —Ç–∏–ø–∞ –æ—à–∏–±–æ–∫ –≤ —Ñ–∞–π–ª–µ
    const errorCounts = {};
    file.errors.forEach(err => {
      errorCounts[err.code] = (errorCounts[err.code] || 0) + 1;
    });
    
    const topErrors = Object.entries(errorCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 3);
    
    console.log(`   üî∏ –û—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏: ${topErrors.map(([code, count]) => `${code}(${count})`).join(', ')}`);
    console.log('');
  });
  
  // –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
  console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫:');
  const errorTypeStats = {};
  errorLines.forEach(line => {
    const match = line.match(/error (TS\d+):/);
    if (match) {
      const code = match[1];
      errorTypeStats[code] = (errorTypeStats[code] || 0) + 1;
    }
  });
  
  const sortedErrorTypes = Object.entries(errorTypeStats)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 10);
  
  sortedErrorTypes.forEach(([code, count]) => {
    const percentage = ((count / errorLines.length) * 100).toFixed(1);
    console.log(`   ${code}: ${count} –æ—à–∏–±–æ–∫ (${percentage}%)`);
  });
  
  console.log(`\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –Ω–∞—á–∞—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Å —Ñ–∞–π–ª–∞ "${sortedFiles[0].fileName}"`);
  console.log(`   –ò—Å–ø—Ä–∞–≤–∏–≤ –µ–≥–æ, —É–±–µ—Ä–µ–º ${sortedFiles[0].count} –æ—à–∏–±–æ–∫ (${((sortedFiles[0].count / errorLines.length) * 100).toFixed(1)}% –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞)`);
}