# AI Team Chat Server - UTF-8 Fixed Version
param([int]$Port = 8080)

# –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ UTF-8
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
$OutputEncoding = [System.Text.Encoding]::UTF8
[Console]::InputEncoding = [System.Text.Encoding]::UTF8
chcp 65001 | Out-Null

$chatPath = "C:\www.spa.com\.ai-team\chat.md"
$htmlPath = "C:\www.spa.com\ai-team-chat.html"

Write-Host ""
Write-Host "üöÄ AI Team Chat Server (UTF-8 Fixed)" -ForegroundColor Cyan
Write-Host "=====================================" -ForegroundColor Cyan
Write-Host ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
if (!(Test-Path $chatPath)) {
    Write-Host "‚ùå –§–∞–π–ª chat.md –Ω–µ –Ω–∞–π–¥–µ–Ω!" -ForegroundColor Red
    exit
}

$listener = New-Object System.Net.HttpListener
$listener.Prefixes.Add("http://localhost:$Port/")
$listener.Start()

Write-Host "‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!" -ForegroundColor Green
Write-Host "üì° http://localhost:$Port/" -ForegroundColor Cyan
Write-Host "üî§ UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞" -ForegroundColor Yellow
Write-Host ""
Write-Host "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏" -ForegroundColor Yellow
Write-Host ""

while ($listener.IsListening) {
    $context = $listener.GetContext()
    $request = $context.Request
    $response = $context.Response
    
    # CORS headers
    $response.Headers.Add("Access-Control-Allow-Origin", "*")
    $response.Headers.Add("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
    $response.Headers.Add("Access-Control-Allow-Headers", "Content-Type")
    $response.Headers.Add("Cache-Control", "no-cache")
    
    $url = $request.Url.LocalPath
    $method = $request.HttpMethod
    
    Write-Host "[$(Get-Date -Format 'HH:mm:ss')] $method $url" -ForegroundColor DarkGray
    
    if ($url -eq "/.ai-team/chat.md") {
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        $content = [System.IO.File]::ReadAllText($chatPath, [System.Text.Encoding]::UTF8)
        $buffer = [System.Text.Encoding]::UTF8.GetBytes($content)
        
        $response.ContentType = "text/plain; charset=utf-8"
        $response.ContentLength64 = $buffer.Length
        $response.OutputStream.Write($buffer, 0, $buffer.Length)
        Write-Host "  ‚úì –û—Ç–ø—Ä–∞–≤–ª–µ–Ω chat.md" -ForegroundColor Green
    }
    elseif ($url -eq "/send-message" -and $method -eq "POST") {
        # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Å UTF-8
        $reader = New-Object System.IO.StreamReader($request.InputStream, [System.Text.Encoding]::UTF8)
        $body = $reader.ReadToEnd()
        $reader.Close()
        
        try {
            # –ü–∞—Ä—Å–∏–º JSON
            $data = $body | ConvertFrom-Json
            $message = $data.message
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
            [System.IO.File]::AppendAllText($chatPath, "$message`n", [System.Text.Encoding]::UTF8)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            $response.StatusCode = 200
            $responseJson = '{"status":"ok","message":"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ"}'
            $buffer = [System.Text.Encoding]::UTF8.GetBytes($responseJson)
            $response.ContentType = "application/json; charset=utf-8"
            $response.ContentLength64 = $buffer.Length
            $response.OutputStream.Write($buffer, 0, $buffer.Length)
            
            Write-Host "  ‚úì –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ" -ForegroundColor Green
        }
        catch {
            Write-Host "  ‚úó –û—à–∏–±–∫–∞: $_" -ForegroundColor Red
            $response.StatusCode = 400
            $errorJson = '{"status":"error","message":"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"}'
            $buffer = [System.Text.Encoding]::UTF8.GetBytes($errorJson)
            $response.ContentType = "application/json; charset=utf-8"
            $response.OutputStream.Write($buffer, 0, $buffer.Length)
        }
    }
    elseif ($url -eq "/api/status") {
        $statusJson = @{
            backend = "online"
            frontend = "online"
            devops = "online"
            server = "running"
            encoding = "UTF-8"
            time = Get-Date -Format "HH:mm:ss"
        } | ConvertTo-Json
        
        $buffer = [System.Text.Encoding]::UTF8.GetBytes($statusJson)
        $response.ContentType = "application/json; charset=utf-8"
        $response.ContentLength64 = $buffer.Length
        $response.OutputStream.Write($buffer, 0, $buffer.Length)
        Write-Host "  ‚úì –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" -ForegroundColor Green
    }
    elseif ($url -eq "/api/command" -and $method -eq "POST") {
        $reader = New-Object System.IO.StreamReader($request.InputStream, [System.Text.Encoding]::UTF8)
        $body = $reader.ReadToEnd()
        $reader.Close()
        
        $time = Get-Date -Format 'HH:mm'
        $data = $body | ConvertFrom-Json
        $command = $data.command
        
        $message = switch ($command) {
            "/sync" { "[$time] [PM]: @all –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø - –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã" }
            "/status" { "[$time] [PM]: @all –°–¢–ê–¢–£–° - –°–æ–æ–±—â–∏—Ç–µ –æ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á–∞—Ö" }
            "/clear" { 
                $header = [System.IO.File]::ReadAllLines($chatPath, [System.Text.Encoding]::UTF8) | Select-Object -First 30
                [System.IO.File]::WriteAllLines($chatPath, $header, [System.Text.Encoding]::UTF8)
                "[$time] [SYSTEM]: –ß–∞—Ç –æ—á–∏—â–µ–Ω"
            }
            default { "[$time] [PM]: $command" }
        }
        
        [System.IO.File]::AppendAllText($chatPath, "$message`n", [System.Text.Encoding]::UTF8)
        
        $response.StatusCode = 200
        $responseJson = '{"status":"ok"}'
        $buffer = [System.Text.Encoding]::UTF8.GetBytes($responseJson)
        $response.ContentType = "application/json; charset=utf-8"
        $response.OutputStream.Write($buffer, 0, $buffer.Length)
        Write-Host "  ‚úì –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: $command" -ForegroundColor Green
    }
    elseif ($url -eq "/" -or $url -eq "/index.html") {
        if (Test-Path $htmlPath) {
            $content = [System.IO.File]::ReadAllText($htmlPath, [System.Text.Encoding]::UTF8)
            $buffer = [System.Text.Encoding]::UTF8.GetBytes($content)
            $response.ContentType = "text/html; charset=utf-8"
            $response.ContentLength64 = $buffer.Length
            $response.OutputStream.Write($buffer, 0, $buffer.Length)
            Write-Host "  ‚úì –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" -ForegroundColor Green
        }
        else {
            $response.StatusCode = 404
        }
    }
    elseif ($url -eq "/favicon.ico") {
        $response.StatusCode = 404
    }
    else {
        $response.StatusCode = 404
    }
    
    $response.Close()
}

$listener.Stop()
Write-Host "–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Yellow