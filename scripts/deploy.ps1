# SPA Platform Deployment Script
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PowerShell

param(
    [Parameter(Mandatory=$false)]
    [ValidateSet("development", "staging", "production")]
    [string]$Environment = "development",
    
    [Parameter(Mandatory=$false)]
    [ValidateSet("winget", "msi", "zip")]
    [string]$PowerShellMethod = "winget",
    
    [Parameter(Mandatory=$false)]
    [switch]$SkipTests,
    
    [Parameter(Mandatory=$false)]
    [switch]$Force
)

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
$Colors = @{
    Success = "Green"
    Warning = "Yellow"
    Error = "Red"
    Info = "Cyan"
}

function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Colors[$Color]
}

function Test-PowerShellInstallation {
    param([string]$Method)
    
    Write-ColorOutput "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PowerShell..." "Info"
    
    switch ($Method) {
        "winget" {
            try {
                $version = pwsh --version 2>$null
                if ($version) {
                    Write-ColorOutput "‚úÖ PowerShell —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ WinGet: $version" "Success"
                    return $true
                }
            } catch {
                Write-ColorOutput "‚ùå PowerShell –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑: winget install Microsoft.PowerShell" "Error"
                return $false
            }
        }
        "msi" {
            $psPath = "${env:ProgramFiles}\PowerShell\7\pwsh.exe"
            if (Test-Path $psPath) {
                $version = & $psPath --version
                Write-ColorOutput "‚úÖ PowerShell —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ MSI: $version" "Success"
                return $true
            } else {
                Write-ColorOutput "‚ùå PowerShell MSI –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∫–∞—á–∞–π—Ç–µ —Å Microsoft" "Error"
                return $false
            }
        }
        "zip" {
            $psPath = "C:\PowerShell\7.5\pwsh.exe"
            if (Test-Path $psPath) {
                $version = & $psPath --version
                Write-ColorOutput "‚úÖ PowerShell —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ ZIP: $version" "Success"
                return $true
            } else {
                Write-ColorOutput "‚ùå PowerShell ZIP –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ C:\PowerShell\7.5\" "Error"
                return $false
            }
        }
    }
    return $false
}

function Install-PowerShell {
    param([string]$Method)
    
    Write-ColorOutput "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PowerShell –º–µ—Ç–æ–¥–æ–º: $Method" "Info"
    
    switch ($Method) {
        "winget" {
            Write-ColorOutput "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ WinGet..." "Info"
            winget install --id Microsoft.PowerShell --source winget
        }
        "msi" {
            Write-ColorOutput "–°–∫–∞—á–∞–π—Ç–µ MSI —Å https://github.com/PowerShell/PowerShell/releases" "Warning"
            Write-ColorOutput "–ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ: msiexec /i PowerShell-7.5.2-win-x64.msi /quiet" "Info"
        }
        "zip" {
            Write-ColorOutput "–°–∫–∞—á–∞–π—Ç–µ ZIP —Å https://github.com/PowerShell/PowerShell/releases" "Warning"
            Write-ColorOutput "–†–∞—Å–ø–∞–∫—É–π—Ç–µ –≤ C:\PowerShell\7.5\" "Info"
        }
    }
}

function Test-ProjectRequirements {
    Write-ColorOutput "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞..." "Info"
    
    $requirements = @{
        "PHP" = "php --version"
        "Composer" = "composer --version"
        "Node.js" = "node --version"
        "npm" = "npm --version"
    }
    
    $missing = @()
    
    foreach ($req in $requirements.GetEnumerator()) {
        try {
            $result = Invoke-Expression $req.Value 2>$null
            if ($result) {
                Write-ColorOutput "‚úÖ $($req.Key): $($result.Split("`n")[0])" "Success"
            } else {
                $missing += $req.Key
            }
        } catch {
            $missing += $req.Key
        }
    }
    
    if ($missing.Count -gt 0) {
        Write-ColorOutput "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: $($missing -join ', ')" "Error"
        return $false
    }
    
    return $true
}

function Backup-Database {
    Write-ColorOutput "üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ë–î..." "Info"
    
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $backupPath = "storage/backups/db_backup_$timestamp.sql"
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    New-Item -ItemType Directory -Force -Path "storage/backups" | Out-Null
    
    # –≠–∫—Å–ø–æ—Ä—Ç SQLite –ë–î (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    if (Test-Path "database/database.sqlite") {
        Copy-Item "database/database.sqlite" "storage/backups/database_$timestamp.sqlite"
        Write-ColorOutput "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: storage/backups/database_$timestamp.sqlite" "Success"
    }
}

function Update-Dependencies {
    Write-ColorOutput "üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..." "Info"
    
    # Composer –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    Write-ColorOutput "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PHP –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..." "Info"
    composer install --no-dev --optimize-autoloader
    
    # NPM –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    Write-ColorOutput "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..." "Info"
    npm install
    
    # –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    Write-ColorOutput "–°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..." "Info"
    npm run build
}

function Run-Migrations {
    Write-ColorOutput "üóÑÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..." "Info"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π
    $pendingMigrations = php artisan migrate:status | Select-String "No"
    
    if ($pendingMigrations) {
        Write-ColorOutput "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..." "Info"
        php artisan migrate --force
    } else {
        Write-ColorOutput "‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã" "Success"
    }
}

function Clear-Cache {
    Write-ColorOutput "üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞..." "Info"
    
    php artisan config:clear
    php artisan route:clear
    php artisan view:clear
    php artisan cache:clear
    
    # –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ Vite
    if (Test-Path "node_modules/.vite") {
        Remove-Item "node_modules/.vite" -Recurse -Force
    }
}

function Optimize-Application {
    Write-ColorOutput "‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..." "Info"
    
    php artisan config:cache
    php artisan route:cache
    php artisan view:cache
    
    Write-ColorOutput "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ" "Success"
}

function Test-Application {
    if ($SkipTests) {
        Write-ColorOutput "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤" "Warning"
        return
    }
    
    Write-ColorOutput "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..." "Info"
    
    # PHP —Ç–µ—Å—Ç—ã
    php artisan test
    
    # Frontend —Ç–µ—Å—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (Test-Path "package.json") {
        $scripts = Get-Content "package.json" | ConvertFrom-Json
        if ($scripts.scripts.test) {
            npm test
        }
    }
}

function Start-Services {
    Write-ColorOutput "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..." "Info"
    
    # –ó–∞–ø—É—Å–∫ Laravel —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω)
    $laravelProcess = Get-Process -Name "php" -ErrorAction SilentlyContinue | Where-Object { $_.CommandLine -like "*artisan serve*" }
    
    if (-not $laravelProcess) {
        Write-ColorOutput "–ó–∞–ø—É—Å–∫ Laravel —Å–µ—Ä–≤–µ—Ä–∞..." "Info"
        Start-Process -FilePath "php" -ArgumentList "artisan", "serve" -WindowStyle Minimized
    }
    
    # –ó–∞–ø—É—Å–∫ Vite (–µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω)
    $viteProcess = Get-Process -Name "node" -ErrorAction SilentlyContinue | Where-Object { $_.CommandLine -like "*vite*" }
    
    if (-not $viteProcess) {
        Write-ColorOutput "–ó–∞–ø—É—Å–∫ Vite dev —Å–µ—Ä–≤–µ—Ä–∞..." "Info"
        Start-Process -FilePath "npm" -ArgumentList "run", "dev" -WindowStyle Minimized
    }
}

function Show-DeploymentSummary {
    Write-ColorOutput "`nüéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!" "Success"
    Write-ColorOutput "`nüìä –°–≤–æ–¥–∫–∞:" "Info"
    Write-ColorOutput "   ‚Ä¢ –û–∫—Ä—É–∂–µ–Ω–∏–µ: $Environment" "Info"
    Write-ColorOutput "   ‚Ä¢ PowerShell –º–µ—Ç–æ–¥: $PowerShellMethod" "Info"
    Write-ColorOutput "   ‚Ä¢ –¢–µ—Å—Ç—ã: $(if($SkipTests){'–ü—Ä–æ–ø—É—â–µ–Ω—ã'}else{'–í—ã–ø–æ–ª–Ω–µ–Ω—ã'})" "Info"
    
    Write-ColorOutput "`nüåê –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:" "Info"
    Write-ColorOutput "   ‚Ä¢ Laravel: http://127.0.0.1:8000" "Info"
    Write-ColorOutput "   ‚Ä¢ Vite: http://127.0.0.1:5173" "Info"
    
    Write-ColorOutput "`nüìù –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:" "Info"
    Write-ColorOutput "   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: php artisan log:tail" "Info"
    Write-ColorOutput "   ‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞: php artisan cache:clear" "Info"
    Write-ColorOutput "   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: .\scripts\restart.ps1" "Info"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–µ–ø–ª–æ—è
Write-ColorOutput "üöÄ –ù–∞—á–∞–ª–æ –¥–µ–ø–ª–æ—è SPA Platform" "Info"
Write-ColorOutput "–û–∫—Ä—É–∂–µ–Ω–∏–µ: $Environment" "Info"
Write-ColorOutput "PowerShell –º–µ—Ç–æ–¥: $PowerShellMethod" "Info"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ PowerShell
if (-not (Test-PowerShellInstallation -Method $PowerShellMethod)) {
    if ($Force) {
        Install-PowerShell -Method $PowerShellMethod
    } else {
        Write-ColorOutput "‚ùå PowerShell –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -Force –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏" "Error"
        exit 1
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
if (-not (Test-ProjectRequirements)) {
    Write-ColorOutput "‚ùå –ù–µ –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã" "Error"
    exit 1
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–ª–æ—è
try {
    Backup-Database
    Update-Dependencies
    Run-Migrations
    Clear-Cache
    Optimize-Application
    Test-Application
    Start-Services
    Show-DeploymentSummary
} catch {
    Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è: $($_.Exception.Message)" "Error"
    exit 1
} 