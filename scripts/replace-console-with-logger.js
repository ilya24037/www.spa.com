#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–º–µ–Ω—ã console.error/warn –Ω–∞ logger
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç AST –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∑–∞–º–µ–Ω—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */

import { readFileSync, writeFileSync, readdirSync, statSync } from 'fs';
import { join, extname } from 'path';
import { execSync } from 'child_process';

const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m'
};

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–º–µ–Ω—ã
const replacePatterns = [
  {
    // console.error —Å –ø—Ä–æ—Å—Ç—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    pattern: /console\.error\s*\(\s*['"`]([^'"`]+)['"`]\s*\)/g,
    replacement: (match, message) => `logger.error('${message}')`
  },
  {
    // console.error —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏
    pattern: /console\.error\s*\(\s*['"`]([^'"`]+)['"`]\s*,\s*(\w+)\s*\)/g,
    replacement: (match, message, errorVar) => `logger.error('${message}', ${errorVar})`
  },
  {
    // console.error —Å –æ–±—ä–µ–∫—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    pattern: /console\.error\s*\(\s*['"`]([^'"`]+)['"`]\s*,\s*(\{[^}]+\})\s*\)/g,
    replacement: (match, message, context) => `logger.error('${message}', undefined, { metadata: ${context} })`
  },
  {
    // console.warn —Å –ø—Ä–æ—Å—Ç—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    pattern: /console\.warn\s*\(\s*['"`]([^'"`]+)['"`]\s*\)/g,
    replacement: (match, message) => `logger.warn('${message}')`
  },
  {
    // console.warn —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    pattern: /console\.warn\s*\(\s*['"`]([^'"`]+)['"`]\s*,\s*(\w+)\s*\)/g,
    replacement: (match, message, variable) => `logger.warn('${message}', { metadata: { data: ${variable} } })`
  }
];

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
function getFiles(dir, fileList = []) {
  const files = readdirSync(dir);
  
  files.forEach(file => {
    const filePath = join(dir, file);
    const stat = statSync(filePath);
    
    if (stat.isDirectory()) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules –∏ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–ø–∫–∏
      if (!file.startsWith('.') && file !== 'node_modules' && file !== 'vendor') {
        getFiles(filePath, fileList);
      }
    } else {
      const ext = extname(file);
      if (['.js', '.ts', '.vue'].includes(ext)) {
        fileList.push(filePath);
      }
    }
  });
  
  return fileList;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç logger
function needsLoggerImport(content) {
  return !content.includes('import { logger }') && 
         !content.includes('import { useLogger }') &&
         !content.includes('from \'@/shared/lib/logger\'') &&
         !content.includes('from \'@/src/shared/lib/logger\'');
}

// –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç logger –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
function addLoggerImport(content, filePath) {
  const isVueFile = filePath.endsWith('.vue');
  const isComposable = filePath.includes('/composables/');
  
  let importStatement;
  if (isComposable || content.includes('getCurrentInstance')) {
    importStatement = "import { useLogger } from '@/src/shared/composables/useLogger'";
  } else {
    importStatement = "import { logger } from '@/src/shared/lib/logger'";
  }
  
  if (isVueFile) {
    // –î–ª—è Vue —Ñ–∞–π–ª–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ <script setup>
    const scriptMatch = content.match(/<script\s+setup[^>]*>/);
    if (scriptMatch) {
      const position = scriptMatch.index + scriptMatch[0].length;
      return content.slice(0, position) + '\n' + importStatement + content.slice(position);
    }
  } else {
    // –î–ª—è JS/TS —Ñ–∞–π–ª–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    const lastImportMatch = content.match(/import[^;]+;(?![\s\S]*import[^;]+;)/);
    if (lastImportMatch) {
      const position = lastImportMatch.index + lastImportMatch[0].length;
      return content.slice(0, position) + '\n' + importStatement + content.slice(position);
    } else {
      // –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
      return importStatement + '\n\n' + content;
    }
  }
  
  return content;
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
function processFile(filePath) {
  try {
    let content = readFileSync(filePath, 'utf8');
    let modified = false;
    let replacements = 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ console.error –∏–ª–∏ console.warn
    if (!content.includes('console.error') && !content.includes('console.warn')) {
      return { modified: false, replacements: 0 };
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const originalContent = content;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–º–µ–Ω—ã
    replacePatterns.forEach(({ pattern, replacement }) => {
      const matches = content.match(pattern);
      if (matches) {
        content = content.replace(pattern, replacement);
        replacements += matches.length;
        modified = true;
      }
    });
    
    // –ï—Å–ª–∏ –±—ã–ª–∏ –∑–∞–º–µ–Ω—ã –∏ –Ω—É–∂–µ–Ω –∏–º–ø–æ—Ä—Ç logger
    if (modified && needsLoggerImport(content)) {
      content = addLoggerImport(content, filePath);
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Vue composables
    if (filePath.includes('/composables/') && modified) {
      // –ó–∞–º–µ–Ω—è–µ–º logger –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
      content = content.replace(/logger\.(error|warn)/g, (match, method) => {
        return `log.${method}`;
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ logger –≤ –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
      const functionMatch = content.match(/export\s+function\s+\w+[^{]*\{/);
      if (functionMatch) {
        const position = functionMatch.index + functionMatch[0].length;
        const hasLogger = content.includes('const log = useLogger(');
        if (!hasLogger) {
          const funcName = functionMatch[0].match(/function\s+(\w+)/)?.[1] || 'Composable';
          content = content.slice(0, position) + 
            `\n  const log = useLogger('${funcName}');\n` + 
            content.slice(position);
        }
      }
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (modified) {
      writeFileSync(filePath, content, 'utf8');
    }
    
    return { modified, replacements };
  } catch (error) {
    console.error(`${colors.red}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}:${colors.reset}`, error.message);
    return { modified: false, replacements: 0, error: error.message };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log(`${colors.cyan}üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–º–µ–Ω—É console.error/warn –Ω–∞ logger...${colors.reset}\n`);
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
  const resourcesPath = join(process.cwd(), 'resources', 'js');
  const files = getFiles(resourcesPath);
  
  console.log(`${colors.yellow}üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${files.length}${colors.reset}\n`);
  
  let totalFiles = 0;
  let totalReplacements = 0;
  const modifiedFiles = [];
  const errors = [];
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
  files.forEach(file => {
    const { modified, replacements, error } = processFile(file);
    
    if (error) {
      errors.push({ file, error });
    } else if (modified) {
      totalFiles++;
      totalReplacements += replacements;
      modifiedFiles.push({ file, replacements });
      
      const relativePath = file.replace(process.cwd() + '\\', '');
      console.log(`${colors.green}‚úì${colors.reset} ${relativePath} - ${replacements} –∑–∞–º–µ–Ω`);
    }
  });
  
  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
  console.log(`\n${colors.cyan}üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:${colors.reset}`);
  console.log(`${colors.green}‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}${colors.reset}`);
  console.log(`${colors.green}‚úÖ –í—Å–µ–≥–æ –∑–∞–º–µ–Ω: ${totalReplacements}${colors.reset}`);
  
  if (errors.length > 0) {
    console.log(`\n${colors.red}‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:${colors.reset}`);
    errors.forEach(({ file, error }) => {
      console.log(`${colors.red}  ${file}: ${error}${colors.reset}`);
    });
  }
  
  if (totalFiles > 0) {
    console.log(`\n${colors.yellow}‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º!${colors.reset}`);
    console.log(`${colors.yellow}   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: git diff${colors.reset}`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
main();