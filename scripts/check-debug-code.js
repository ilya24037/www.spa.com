#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è debug –∫–æ–¥–∞ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º
 * –ë–ª–æ–∫–∏—Ä—É–µ—Ç –∫–æ–º–º–∏—Ç –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
 */

import { execSync } from 'child_process';
import { readFileSync } from 'fs';
import { resolve } from 'path';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  reset: '\x1b[0m'
};

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ debug –∫–æ–¥–∞
const debugPatterns = {
  php: [
    { pattern: /\bdd\s*\(/g, name: 'dd()' },
    { pattern: /\bdump\s*\(/g, name: 'dump()' },
    { pattern: /\bvar_dump\s*\(/g, name: 'var_dump()' },
    { pattern: /\bprint_r\s*\(/g, name: 'print_r()' },
    { pattern: /\bvar_export\s*\(/g, name: 'var_export()' },
    { pattern: /\bdie\s*\(/g, name: 'die()' },
    { pattern: /\bexit\s*\(/g, name: 'exit()' }
  ],
  js: [
    { pattern: /console\s*\.\s*log\s*\(/g, name: 'console.log()' },
    { pattern: /debugger[\s;]/g, name: 'debugger' }
  ],
  cjs: [
    { pattern: /console\s*\.\s*log\s*\(/g, name: 'console.log()' },
    { pattern: /debugger[\s;]/g, name: 'debugger' }
  ],
  mjs: [
    { pattern: /console\s*\.\s*log\s*\(/g, name: 'console.log()' },
    { pattern: /debugger[\s;]/g, name: 'debugger' }
  ],
  vue: [
    { pattern: /console\s*\.\s*log\s*\(/g, name: 'console.log()' },
    { pattern: /debugger[\s;]/g, name: 'debugger' }
  ],
  ts: [
    { pattern: /console\s*\.\s*log\s*\(/g, name: 'console.log()' },
    { pattern: /debugger[\s;]/g, name: 'debugger' }
  ],
  tsx: [
    { pattern: /console\s*\.\s*log\s*\(/g, name: 'console.log()' },
    { pattern: /debugger[\s;]/g, name: 'debugger' }
  ]
};

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function getStagedFiles() {
  try {
    const files = execSync('git diff --cached --name-only --diff-filter=ACM')
      .toString()
      .trim()
      .split('\n')
      .filter(file => file.length > 0);
    return files;
  } catch (error) {
    console.error(`${colors.red}–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:${colors.reset}`, error.message);
    process.exit(1);
  }
}

// –ò—Å–∫–ª—é—á–µ–Ω–∏—è - —Ñ–∞–π–ª—ã –≥–¥–µ debug –∫–æ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω
const allowedDebugFiles = [
  'scripts/replace-console-with-logger.js',
  'scripts/update-ddd-violations.cjs',
  'scripts/check-debug-code.js',
  'scripts/install-git-hooks.js'
];

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ debug –∫–æ–¥–∞
function checkFile(filePath) {
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
  if (allowedDebugFiles.includes(filePath)) {
    return [];
  }
  
  const extension = filePath.split('.').pop().toLowerCase();
  const patterns = debugPatterns[extension];
  
  if (!patterns) {
    return { hasDebug: false, matches: [] };
  }

  try {
    const content = readFileSync(filePath, 'utf8');
    const lines = content.split('\n');
    const matches = [];

    patterns.forEach(({ pattern, name }) => {
      lines.forEach((line, index) => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        const trimmedLine = line.trim();
        if (trimmedLine.startsWith('//') || 
            trimmedLine.startsWith('*') || 
            trimmedLine.startsWith('/*') ||
            trimmedLine.startsWith('#')) {
          return;
        }

        const lineMatches = line.match(pattern);
        if (lineMatches) {
          matches.push({
            file: filePath,
            line: index + 1,
            code: line.trim(),
            debugType: name
          });
        }
      });
    });

    return { hasDebug: matches.length > 0, matches };
  } catch (error) {
    console.error(`${colors.red}–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}:${colors.reset}`, error.message);
    return { hasDebug: false, matches: [] };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log(`${colors.yellow}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è debug –∫–æ–¥–∞...${colors.reset}\n`);

  const stagedFiles = getStagedFiles();
  
  if (stagedFiles.length === 0) {
    console.log(`${colors.green}‚úÖ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏${colors.reset}`);
    process.exit(0);
  }

  let totalMatches = [];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
  stagedFiles.forEach(file => {
    const { hasDebug, matches } = checkFile(file);
    if (hasDebug) {
      totalMatches = totalMatches.concat(matches);
    }
  });

  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  if (totalMatches.length > 0) {
    console.log(`${colors.red}‚ùå –ù–∞–π–¥–µ–Ω debug –∫–æ–¥ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–∞–π–ª–∞—Ö:${colors.reset}\n`);
    
    totalMatches.forEach(match => {
      console.log(`${colors.red}${match.file}:${match.line}${colors.reset}`);
      console.log(`   ${match.debugType}: ${match.code}`);
      console.log('');
    });

    console.log(`${colors.red}–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: ${totalMatches.length} —Å–ª—É—á–∞–µ–≤${colors.reset}`);
    console.log(`${colors.yellow}–£–¥–∞–ª–∏—Ç–µ debug –∫–æ–¥ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º!${colors.reset}`);
    
    // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log(`\n${colors.yellow}–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'git commit --no-verify' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É${colors.reset}`);
    
    process.exit(1);
  }

  console.log(`${colors.green}‚úÖ Debug –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ö–æ–º–º–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω!${colors.reset}`);
  process.exit(0);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
main();