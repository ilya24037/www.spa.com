/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å optional chaining assignment
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å currentImage?.value = newValue
 */

const fs = require('fs');
const path = require('path');

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
function findFiles(dir, extensions, result = []) {
  const files = fs.readdirSync(dir);
  
  for (const file of files) {
    const fullPath = path.join(dir, file);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory()) {
      findFiles(fullPath, extensions, result);
    } else if (extensions.some(ext => file.endsWith(ext))) {
      result.push(fullPath);
    }
  }
  
  return result;
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è optional chaining assignment
const fixes = [
  // currentImage?.value = newIndex
  {
    from: /(\w+)\?\.(value)\s*=\s*([^;\n]+)/g,
    to: (match, varName, prop, value) => {
      return `if (${varName}.${prop} !== undefined) {\n      ${varName}.${prop} = ${value}\n    }`
    },
    description: 'Fixing optional chaining assignment'
  },
  
  // window?.something = value
  {
    from: /window\?\.\(/g,
    to: 'if (typeof window !== \'undefined\') {\n        window(',
    description: 'Fixing window optional chaining'
  },
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏ —Å –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏
  {
    from: /from\s+['"]\.\/([^'"]*)\?\.(types|vue|js|ts)['"]/g,
    to: (match, filename, extension) => {
      return `from './${filename}.${extension}'`
    },
    description: 'Fixing paths with question marks'
  },
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏
  {
    from: /<!--\s*([^>]*)\?\.(vue|ts|js)\s*-->/g,
    to: (match, filename, extension) => {
      return `<!-- ${filename}.${extension} -->`
    },
    description: 'Fixing comments with question marks'
  },
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –≤ —Å—Ç—Ä–æ–∫–∞—Ö
  {
    from: /–†—ô–†—ï–†–Ö–°‚Äö–†¬∞–†—î–°‚Äö–°‚Äπ –†¬±–°—ì–†“ë–°—ì–°‚Äö –†“ë–†—ï–°–É–°‚Äö–°—ì–†—ó–†–Ö–°‚Äπ –†—ó–†—ï–°–É–†¬ª–†¬µ –†¬∑–†¬∞–†—ó–†—ë–°–É–†—ë/g,
    to: '–ö–æ–Ω—Ç–∞–∫—Ç—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏',
    description: 'Fixing encoding in contact message'
  },
  
  // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
  {
    from: /import\s+\w+\s+from\s+['"]@\/test-[^'"]+['"]/g,
    to: '// Removed problematic test import',
    description: 'Removing problematic test imports'
  },
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º CSS theme —Ñ—É–Ω–∫—Ü–∏–∏ —Å optional chaining
  {
    from: /theme\(['"]colors\?\./g,
    to: "theme('colors.",
    description: 'Fixing CSS theme functions with optional chaining'
  },
  
  // –î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã optional chaining assignment
  {
    from: /(\w+\.\w+)\?\.(value|length|type)\s*=\s*([^;\n]+)/g,
    to: (match, varName, prop, value) => {
      return `if (${varName}.${prop} !== undefined) {\n      ${varName}.${prop} = ${value}\n    }`
    },
    description: 'Fixing nested optional chaining assignment'
  }
];

async function processFiles() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ optional chaining assignment...');
  
  // –ò—â–µ–º —Ñ–∞–π–ª—ã –≤ resources/js
  const resourcesPath = path.join(process.cwd(), 'resources', 'js');
  const files = findFiles(resourcesPath, ['.vue', '.ts', '.js']);
  
  let fixedFiles = 0;
  let totalFixesApplied = 0;
  
  for (const file of files) {
    try {
      let content = fs.readFileSync(file, 'utf8');
      let modified = false;
      let fixesInFile = 0;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      for (const fix of fixes) {
        const originalContent = content;
        
        if (typeof fix.to === 'function') {
          content = content.replace(fix.from, fix.to);
        } else {
          content = content.replace(fix.from, fix.to);
        }
        
        if (content !== originalContent) {
          modified = true;
          fixesInFile++;
          totalFixesApplied++;
        }
      }
      
      if (modified) {
        fs.writeFileSync(file, content, 'utf8');
        fixedFiles++;
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${path.relative(process.cwd(), file)} (${fixesInFile} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π)`);
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${file}:`, error.message);
    }
  }
  
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
  console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
  console.log(`   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedFiles}`);
  console.log(`   –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${totalFixesApplied}`);
  
  if (fixedFiles === 0) {
    console.log('‚ú® –ù–∏–∫–∞–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å!');
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  processFiles().catch(console.error);
}

module.exports = { processFiles };