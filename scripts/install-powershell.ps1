# PowerShell Installation Script
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PowerShell —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è SPA Platform

param(
    [Parameter(Mandatory=$true)]
    [ValidateSet("winget", "msi", "zip")]
    [string]$Method,
    
    [Parameter(Mandatory=$false)]
    [string]$Version = "7.5.2",
    
    [Parameter(Mandatory=$false)]
    [switch]$Force
)

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
$Colors = @{
    Success = "Green"
    Warning = "Yellow"
    Error = "Red"
    Info = "Cyan"
}

function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Colors[$Color]
}

function Test-Administrator {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

function Install-PowerShellWinGet {
    Write-ColorOutput "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PowerShell —á–µ—Ä–µ–∑ WinGet..." "Info"
    
    try {
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ WinGet
        $wingetVersion = winget --version 2>$null
        if (-not $wingetVersion) {
            Write-ColorOutput "‚ùå WinGet –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Microsoft Store –∏–ª–∏ App Installer" "Error"
            return $false
        }
        
        Write-ColorOutput "–ù–∞–π–¥–µ–Ω WinGet: $wingetVersion" "Success"
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PowerShell
        Write-ColorOutput "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PowerShell..." "Info"
        winget install --id Microsoft.PowerShell --source winget --accept-package-agreements --accept-source-agreements
        
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úÖ PowerShell —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ WinGet" "Success"
            return $true
        } else {
            Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ WinGet" "Error"
            return $false
        }
    } catch {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞: $($_.Exception.Message)" "Error"
        return $false
    }
}

function Install-PowerShellMSI {
    Write-ColorOutput "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PowerShell —á–µ—Ä–µ–∑ MSI..." "Info"
    
    try {
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if (-not (Test-Administrator)) {
            Write-ColorOutput "‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ MSI" "Error"
            return $false
        }
        
        # URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        $downloadUrl = "https://github.com/PowerShell/PowerShell/releases/download/v$Version/PowerShell-$Version-win-x64.msi"
        $downloadPath = "$env:TEMP\PowerShell-$Version-win-x64.msi"
        
        Write-ColorOutput "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ MSI —Ñ–∞–π–ª–∞..." "Info"
        Invoke-WebRequest -Uri $downloadUrl -OutFile $downloadPath
        
        if (Test-Path $downloadPath) {
            Write-ColorOutput "MSI —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω: $downloadPath" "Success"
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞
            Write-ColorOutput "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PowerShell..." "Info"
            $installArgs = @(
                "/i", $downloadPath,
                "/quiet",
                "/norestart",
                "ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL=1",
                "ADD_FILE_CONTEXT_MENU_RUNPOWERSHELL=1",
                "ENABLE_PSREMOTING=1",
                "REGISTER_MANIFEST=1"
            )
            
            Start-Process -FilePath "msiexec.exe" -ArgumentList $installArgs -Wait
            
            # –û—á–∏—Å—Ç–∫–∞
            Remove-Item $downloadPath -Force
            
            Write-ColorOutput "‚úÖ PowerShell —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ MSI" "Success"
            return $true
        } else {
            Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è MSI —Ñ–∞–π–ª–∞" "Error"
            return $false
        }
    } catch {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞: $($_.Exception.Message)" "Error"
        return $false
    }
}

function Install-PowerShellZIP {
    Write-ColorOutput "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PowerShell —á–µ—Ä–µ–∑ ZIP..." "Info"
    
    try {
        # URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        $downloadUrl = "https://github.com/PowerShell/PowerShell/releases/download/v$Version/PowerShell-$Version-win-x64.zip"
        $downloadPath = "$env:TEMP\PowerShell-$Version-win-x64.zip"
        $extractPath = "C:\PowerShell\$Version"
        
        Write-ColorOutput "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ ZIP —Ñ–∞–π–ª–∞..." "Info"
        Invoke-WebRequest -Uri $downloadUrl -OutFile $downloadPath
        
        if (Test-Path $downloadPath) {
            Write-ColorOutput "ZIP —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω: $downloadPath" "Success"
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
            New-Item -ItemType Directory -Force -Path $extractPath | Out-Null
            
            # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞
            Write-ColorOutput "–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –≤ $extractPath..." "Info"
            Expand-Archive -Path $downloadPath -DestinationPath $extractPath -Force
            
            # –û—á–∏—Å—Ç–∫–∞
            Remove-Item $downloadPath -Force
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ PATH (–≤—Ä–µ–º–µ–Ω–Ω–æ)
            $env:PATH += ";$extractPath"
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —è—Ä–ª—ã–∫–∞ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ
            $desktopPath = [Environment]::GetFolderPath("Desktop")
            $shortcutPath = "$desktopPath\PowerShell $Version.lnk"
            
            $WshShell = New-Object -comObject WScript.Shell
            $Shortcut = $WshShell.CreateShortcut($shortcutPath)
            $Shortcut.TargetPath = "$extractPath\pwsh.exe"
            $Shortcut.WorkingDirectory = $extractPath
            $Shortcut.Description = "PowerShell $Version"
            $Shortcut.Save()
            
            Write-ColorOutput "‚úÖ PowerShell —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ ZIP" "Success"
            Write-ColorOutput "üìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: $extractPath" "Info"
            Write-ColorOutput "üîó –Ø—Ä–ª—ã–∫ —Å–æ–∑–¥–∞–Ω –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ" "Info"
            Write-ColorOutput "‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ $extractPath –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PATH –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞" "Warning"
            
            return $true
        } else {
            Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ZIP —Ñ–∞–π–ª–∞" "Error"
            return $false
        }
    } catch {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞: $($_.Exception.Message)" "Error"
        return $false
    }
}

function Test-PowerShellInstallation {
    Write-ColorOutput "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PowerShell..." "Info"
    
    try {
        $version = pwsh --version 2>$null
        if ($version) {
            Write-ColorOutput "‚úÖ PowerShell —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $version" "Success"
            return $true
        }
    } catch {
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        $possiblePaths = @(
            "${env:ProgramFiles}\PowerShell\7\pwsh.exe",
            "C:\PowerShell\$Version\pwsh.exe",
            "${env:ProgramFiles}\PowerShell\7.5\pwsh.exe"
        )
        
        foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
                $version = & $path --version
                Write-ColorOutput "‚úÖ PowerShell –Ω–∞–π–¥–µ–Ω: $version" "Success"
                Write-ColorOutput "üìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: $path" "Info"
                return $true
            }
        }
    }
    
    Write-ColorOutput "‚ùå PowerShell –Ω–µ –Ω–∞–π–¥–µ–Ω" "Error"
    return $false
}

function Show-InstallationSummary {
    Write-ColorOutput "`nüìä –°–≤–æ–¥–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:" "Info"
    Write-ColorOutput "   ‚Ä¢ –ú–µ—Ç–æ–¥: $Method" "Info"
    Write-ColorOutput "   ‚Ä¢ –í–µ—Ä—Å–∏—è: $Version" "Info"
    Write-ColorOutput "   ‚Ä¢ –°—Ç–∞—Ç—É—Å: $(if(Test-PowerShellInstallation){'–£—Å–ø–µ—à–Ω–æ'}else{'–û—à–∏–±–∫–∞'})" "Info"
    
    Write-ColorOutput "`nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" "Info"
    Write-ColorOutput "   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª" "Info"
    Write-ColorOutput "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: pwsh --version" "Info"
    Write-ColorOutput "   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π: .\scripts\deploy.ps1" "Info"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
Write-ColorOutput "üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PowerShell –¥–ª—è SPA Platform" "Info"
Write-ColorOutput "–ú–µ—Ç–æ–¥: $Method" "Info"
Write-ColorOutput "–í–µ—Ä—Å–∏—è: $Version" "Info"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É
if (Test-PowerShellInstallation) {
    if ($Force) {
        Write-ColorOutput "‚ö†Ô∏è PowerShell —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞..." "Warning"
    } else {
        Write-ColorOutput "‚úÖ PowerShell —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" "Success"
        Show-InstallationSummary
        exit 0
    }
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞
$success = $false

switch ($Method) {
    "winget" {
        $success = Install-PowerShellWinGet
    }
    "msi" {
        $success = Install-PowerShellMSI
    }
    "zip" {
        $success = Install-PowerShellZIP
    }
}

if ($success) {
    Write-ColorOutput "`nüéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!" "Success"
    Show-InstallationSummary
} else {
    Write-ColorOutput "`n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏" "Error"
    exit 1
} 