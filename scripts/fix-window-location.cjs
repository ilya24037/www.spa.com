const fs = require('fs');
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ —Å window.location...\n');

const filesToFix = [
  'resources/js/Pages/Auth/Login.vue',
  'resources/js/Pages/Auth/Register.vue', 
  'resources/js/Pages/Bookings/Index.vue',
  'resources/js/Pages/Draft/Show.vue'
];

const fixes = [
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–æ–π–Ω–æ–µ –∫–∞—Å—Ç—ã window
  { 
    pattern: /\(window as any\)\.\(window as any\)\.location/g, 
    replacement: '(window as any).location',
    description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–æ–π–Ω–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —Ç–∏–ø–∞ window'
  }
];

let totalFixed = 0;

filesToFix.forEach(filePath => {
  const fullPath = path.join(process.cwd(), filePath);
  
  if (!fs.existsSync(fullPath)) {
    console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    return;
  }
  
  let content = fs.readFileSync(fullPath, 'utf8');
  let fileFixed = 0;
  
  fixes.forEach(fix => {
    const matches = content.match(fix.pattern);
    if (matches) {
      content = content.replace(fix.pattern, fix.replacement);
      fileFixed += matches.length;
      console.log(`‚úÖ ${filePath}: ${fix.description} (${matches.length} —Ä–∞–∑)`);
    }
  });
  
  if (fileFixed > 0) {
    fs.writeFileSync(fullPath, content, 'utf8');
    totalFixed += fileFixed;
  }
});

console.log(`\n‚ú® –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${totalFixed}`);