/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ CSS –∫–ª–∞—Å—Å–æ–≤ –Ω–∞ –ë–≠–ú –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ–≤–æ–π CSS –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
 */

import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// –ö–∞—Ä—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–æ–≤
const migrationMap = new Map([
  // –ö–Ω–æ–ø–∫–∏
  ['btn', 'button'],
  ['btn-primary', 'button button--primary'],
  ['btn-secondary', 'button button--secondary'],
  ['btn-success', 'button button--success'],
  ['btn-warning', 'button button--warning'],
  ['btn-danger', 'button button--error'],
  ['btn-sm', 'button button--small'],
  ['btn-lg', 'button button--large'],
  ['btn-block', 'button button--block'],
  
  // –ö–∞—Ä—Ç–æ—á–∫–∏
  ['card', 'card'],
  ['card-header', 'card__header'],
  ['card-body', 'card__body'],
  ['card-footer', 'card__footer'],
  ['card-title', 'card__title'],
  ['card-text', 'card__description'],
  ['card-img', 'card__image'],
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  ['active', 'is-active'],
  ['disabled', 'is-disabled'],
  ['hidden', 'is-hidden'],
  ['loading', 'is-loading'],
  ['selected', 'is-selected'],
  ['visible', 'is-visible'],
  
  // –§–æ—Ä–º—ã
  ['form-control', 'form-input'],
  ['form-group', 'form-field'],
  ['form-label', 'form-field__label'],
  ['form-error', 'form-field__error has-error'],
  ['form-success', 'form-field__success has-success'],
  
  // –£—Ç–∏–ª–∏—Ç—ã
  ['text-center', 'u-text-center'],
  ['text-left', 'u-text-left'],
  ['text-right', 'u-text-right'],
  ['d-flex', 'u-flex'],
  ['d-block', 'u-block'],
  ['d-none', 'u-hidden'],
  
  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è SPA Platform
  ['master-card', 'master-card'],
  ['service-card', 'service-card'],
  ['booking-form', 'booking-form'],
  ['profile-header', 'profile__header'],
  ['profile-avatar', 'profile__avatar'],
  ['profile-info', 'profile__info'],
])

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  sourceDir: path.join(__dirname, '../resources'),
  backupDir: path.join(__dirname, '../storage/css-migration-backup'),
  extensions: ['.vue', '.html', '.php', '.css'],
  excludeDirs: ['node_modules', '.git', 'vendor', 'storage'],
  dryRun: false, // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ true –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
 */
function createBackup() {
  if (!fs.existsSync(config.backupDir)) {
    fs.mkdirSync(config.backupDir, { recursive: true })
  }
  
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
  const backupPath = path.join(config.backupDir, `backup-${timestamp}`)
  
  console.log(`üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤: ${backupPath}`)
  
  // –ö–æ–ø–∏—Ä—É–µ–º –≤–µ—Å—å resources –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
  copyDirectory(config.sourceDir, backupPath)
  
  return backupPath
}

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 */
function copyDirectory(src, dest) {
  if (!fs.existsSync(dest)) {
    fs.mkdirSync(dest, { recursive: true })
  }
  
  const entries = fs.readdirSync(src, { withFileTypes: true })
  
  for (const entry of entries) {
    const srcPath = path.join(src, entry.name)
    const destPath = path.join(dest, entry.name)
    
    if (entry.isDirectory()) {
      if (!config.excludeDirs.includes(entry.name)) {
        copyDirectory(srcPath, destPath)
      }
    } else {
      fs.copyFileSync(srcPath, destPath)
    }
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
function getAllFiles(dir, files = []) {
  const entries = fs.readdirSync(dir, { withFileTypes: true })
  
  for (const entry of entries) {
    const fullPath = path.join(dir, entry.name)
    
    if (entry.isDirectory()) {
      if (!config.excludeDirs.includes(entry.name)) {
        getAllFiles(fullPath, files)
      }
    } else {
      const ext = path.extname(entry.name)
      if (config.extensions.includes(ext)) {
        files.push(fullPath)
      }
    }
  }
  
  return files
}

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è CSS –∫–ª–∞—Å—Å–æ–≤ –≤ —Ñ–∞–π–ª–µ
 */
function migrateFile(filePath) {
  const content = fs.readFileSync(filePath, 'utf8')
  let updatedContent = content
  let changesMade = 0
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–º–µ–Ω—ã –∏–∑ –∫–∞—Ä—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏
  for (const [oldClass, newClass] of migrationMap) {
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª–∞—Å—Å–æ–≤
    const patterns = [
      // class="old-class"
      new RegExp(`class="([^"]*\\s)?${escapeRegex(oldClass)}(\\s[^"]*)?"`,'g'),
      // class='old-class'
      new RegExp(`class='([^']*\\s)?${escapeRegex(oldClass)}(\\s[^']*)?'`,'g'),
      // :class="'old-class'"
      new RegExp(`:class="'([^']*\\s)?${escapeRegex(oldClass)}(\\s[^']*)?'"`,'g'),
      // CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã .old-class
      new RegExp(`\\.${escapeRegex(oldClass)}(?![\\w-])`, 'g'),
    ]
    
    patterns.forEach(pattern => {
      const matches = updatedContent.match(pattern)
      if (matches) {
        updatedContent = updatedContent.replace(pattern, (match) => {
          changesMade++
          if (match.includes('class=')) {
            return match.replace(new RegExp(`\\b${escapeRegex(oldClass)}\\b`, 'g'), newClass)
          } else {
            // CSS —Å–µ–ª–µ–∫—Ç–æ—Ä
            return match.replace(new RegExp(`\\.${escapeRegex(oldClass)}`, 'g'), `.${newClass.split(' ')[0]}`)
          }
        })
      }
    })
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  if (changesMade > 0 && !config.dryRun) {
    fs.writeFileSync(filePath, updatedContent, 'utf8')
  }
  
  return { changesMade, filePath }
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è RegExp
 */
function escapeRegex(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –º–∏–≥—Ä–∞—Ü–∏–∏
 */
function generateReport(results, backupPath) {
  const reportPath = path.join(config.backupDir, 'migration-report.md')
  
  let report = `# CSS –ë–≠–ú –ú–∏–≥—Ä–∞—Ü–∏—è - –û—Ç—á–µ—Ç\n\n`
  report += `**–î–∞—Ç–∞:** ${new Date().toLocaleString('ru-RU')}\n`
  report += `**–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è:** ${backupPath}\n`
  report += `**–†–µ–∂–∏–º:** ${config.dryRun ? '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫' : '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π'}\n\n`
  
  const totalFiles = results.length
  const changedFiles = results.filter(r => r.changesMade > 0).length
  const totalChanges = results.reduce((sum, r) => sum + r.changesMade, 0)
  
  report += `## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n`
  report += `- **–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤:** ${totalFiles}\n`
  report += `- **–ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:** ${changedFiles}\n`
  report += `- **–í—Å–µ–≥–æ –∑–∞–º–µ–Ω:** ${totalChanges}\n\n`
  
  if (changedFiles > 0) {
    report += `## –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã\n\n`
    results
      .filter(r => r.changesMade > 0)
      .sort((a, b) => b.changesMade - a.changesMade)
      .forEach(result => {
        const relativePath = path.relative(config.sourceDir, result.filePath)
        report += `- **${relativePath}** - ${result.changesMade} –∑–∞–º–µ–Ω\n`
      })
  }
  
  report += `\n## –ö–∞—Ä—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏\n\n`
  report += `| –°—Ç–∞—Ä—ã–π –∫–ª–∞—Å—Å | –ù–æ–≤—ã–π –∫–ª–∞—Å—Å (–ë–≠–ú) |\n`
  report += `|--------------|-------------------|\n`
  
  for (const [oldClass, newClass] of migrationMap) {
    report += `| \`.${oldClass}\` | \`.${newClass}\` |\n`
  }
  
  report += `\n## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏\n\n`
  report += `1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã\n`
  report += `2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n`
  report += `3. –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ CSS –∫–ª–∞—Å—Å—ã\n`
  report += `4. –û–±–Ω–æ–≤–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é\n`
  
  fs.writeFileSync(reportPath, report, 'utf8')
  
  return reportPath
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
 */
async function runMigration() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ CSS –ë–≠–ú –º–∏–≥—Ä–∞—Ü–∏–∏...\n')
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º
  if (config.dryRun) {
    console.log('‚ö†Ô∏è  –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã\n')
  }
  
  // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
  const backupPath = createBackup()
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
  console.log('üìÅ –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...')
  const files = getAllFiles(config.sourceDir)
  console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}\n`)
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
  console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤...')
  const results = []
  
  for (const filePath of files) {
    const result = migrateFile(filePath)
    results.push(result)
    
    if (result.changesMade > 0) {
      const relativePath = path.relative(config.sourceDir, result.filePath)
      console.log(`   ‚úÖ ${relativePath} - ${result.changesMade} –∑–∞–º–µ–Ω`)
    }
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
  console.log('\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...')
  const reportPath = generateReport(results, backupPath)
  
  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const totalChanges = results.reduce((sum, r) => sum + r.changesMade, 0)
  const changedFiles = results.filter(r => r.changesMade > 0).length
  
  console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
  console.log(`   –ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${changedFiles}`)
  console.log(`   –í—Å–µ–≥–æ –∑–∞–º–µ–Ω: ${totalChanges}`)
  console.log(`   –û—Ç—á–µ—Ç: ${reportPath}`)
  console.log(`   –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${backupPath}`)
  
  if (config.dryRun) {
    console.log('\n‚ö†Ô∏è  –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å dryRun: false')
  } else {
    console.log('\nüéâ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.')
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
if (import.meta.url === `file://${process.argv[1]}`) {
  runMigration().catch(console.error)
}

export { runMigration, migrationMap, config }