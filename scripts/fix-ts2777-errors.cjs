#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TS2777 errors (increment/decrement operations)...\n');

let fixedCount = 0;

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è TS2777 errors
const incrementFixes = [
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º ++variable?.property –Ω–∞ ++variable.property
  {
    pattern: /\+\+(\w+)\?\./g,
    replacement: '++$1.',
    description: '–£–±–∏—Ä–∞–µ–º ? –∏–∑ ++variable?.property'
  },
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º --variable?.property –Ω–∞ --variable.property  
  {
    pattern: /--(\w+)\?\./g,
    replacement: '--$1.',
    description: '–£–±–∏—Ä–∞–µ–º ? –∏–∑ --variable?.property'
  },
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º variable?.property++ –Ω–∞ variable.property++
  {
    pattern: /(\w+)\?\.(\w+)\+\+/g,
    replacement: '$1.$2++',
    description: '–£–±–∏—Ä–∞–µ–º ? –∏–∑ variable?.property++'
  },
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º variable?.property-- –Ω–∞ variable.property--
  {
    pattern: /(\w+)\?\.(\w+)--/g,
    replacement: '$1.$2--',
    description: '–£–±–∏—Ä–∞–µ–º ? –∏–∑ variable?.property--'
  },
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏ —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
  {
    pattern: /(\w+)\?\.(\w+)\?\.(\w+)\+\+/g,
    replacement: '$1.$2.$3++',
    description: '–£–±–∏—Ä–∞–µ–º ? –∏–∑ variable?.prop?.prop++'
  },
  
  {
    pattern: /(\w+)\?\.(\w+)\?\.(\w+)--/g,
    replacement: '$1.$2.$3--',
    description: '–£–±–∏—Ä–∞–µ–º ? –∏–∑ variable?.prop?.prop--'
  }
];

function fixIncrementsInFile(filePath) {
  try {
    if (!fs.existsSync(filePath)) return false;

    let content = fs.readFileSync(filePath, 'utf8');
    const originalContent = content;
    let fixes = [];

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    incrementFixes.forEach(fix => {
      const matches = content.match(fix.pattern);
      if (matches && matches.length > 0) {
        content = content.replace(fix.pattern, fix.replacement);
        fixes.push(`${fix.description} (${matches.length})`);
      }
    });

    if (content !== originalContent) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`   ‚úÖ ${path.basename(filePath)}: ${fixes.length} —Ç–∏–ø–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π`);
      fixes.forEach(fix => console.log(`      ‚Ä¢ ${fix}`));
      fixedCount++;
      return true;
    }

    return false;
  } catch (error) {
    console.log(`   ‚ùå ${path.basename(filePath)}: ${error.message}`);
    return false;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å TS2777 –æ—à–∏–±–∫–∞–º–∏
function getFilesWithTS2777Errors() {
  const files = [];
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –Ω–∞—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  const knownProblemFiles = [
    'resources/js/src/entities/ad/model/adStore.ts',
    'resources/js/src/entities/booking/model/bookingStore.ts', 
    'resources/js/src/entities/master/model/masterStore.ts'
  ];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
  knownProblemFiles.forEach(filePath => {
    if (fs.existsSync(filePath)) {
      files.push(filePath);
    }
  });
  
  return files;
}

// –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const filesToFix = getFilesWithTS2777Errors();

console.log(`üéØ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TS2777 errors –≤ ${filesToFix.length} —Ñ–∞–π–ª–∞—Ö...\n`);

filesToFix.forEach(filePath => {
  console.log(`üîß ${filePath}`);
  fixIncrementsInFile(filePath);
});

console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
console.log(`   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedCount}`);

if (fixedCount > 0) {
  console.log(`\n‚úÖ TS2777 errors –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!`);
  console.log('üß™ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: node scripts/check-errors.cjs');
} else {
  console.log(`\n‚ûñ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–∏—Å—å`);
}