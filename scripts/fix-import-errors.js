/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏
 * –ü–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

import fs from 'fs';
import path from 'path';
import { glob } from 'glob';

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
const patterns = [
  'resources/js/**/*.vue',
  'resources/js/**/*.ts',
  'resources/js/**/*.js'
];

// –ó–∞–º–µ–Ω—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤
const fixes = [
  // –£–±–∏—Ä–∞–µ–º `as any` –∏–∑ Vue —à–∞–±–ª–æ–Ω–æ–≤
  {
    from: /separator=">" as any/g,
    to: 'separator=">"'
  },
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
  {
    from: /–†¬ß–†¬µ–°–Ç–†–Ö–†—ï–†–Ü–†—ë–†—î/g,
    to: '–ß–µ—Ä–Ω–æ–≤–∏–∫'
  },
  {
    from: /–†—ô–†—ï–†–Ö–°‚Äö–†¬µ–†‚Ññ–†–Ö–†¬µ–°–Ç –†—î–†¬∞–†—î –†–Ö–†¬∞ –†—ñ–†¬ª–†¬∞–†–Ü–†–Ö–†—ï–†‚Ññ/g,
    to: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π'
  },
  {
    from: /–†“ê–†¬ª–†¬µ–†¬±–†–Ö–°‚Äπ–†¬µ –†—î–°–Ç–†—ï–°‚Ç¨–†—î–†—ë/g,
    to: '–•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏'
  },
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
  {
    from: /import.*from.*['"]\.\/utils\/lazyLoading['"];?/g,
    to: '// import from utils/lazyLoading (commented out until implemented)'
  },
  {
    from: /import.*from.*['"]\.\/utils\/imageOptimization['"];?/g,
    to: '// import from utils/imageOptimization (commented out until implemented)'
  }
];

async function processFiles() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–æ–≤...');
  
  let totalFiles = 0;
  let fixedFiles = 0;
  
  for (const pattern of patterns) {
    const files = await glob(pattern);
    
    for (const file of files) {
      try {
        let content = fs.readFileSync(file, 'utf8');
        let modified = false;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        for (const fix of fixes) {
          if (fix.from.test(content)) {
            content = content.replace(fix.from, fix.to);
            modified = true;
          }
        }
        
        if (modified) {
          fs.writeFileSync(file, content, 'utf8');
          fixedFiles++;
          console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${file}`);
        }
        
        totalFiles++;
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${file}:`, error.message);
      }
    }
  }
  
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
  console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}`);
  console.log(`   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedFiles}`);
  console.log(`   –§–∞–π–ª–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${totalFiles - fixedFiles}`);
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  processFiles().catch(console.error);
}

export { processFiles };