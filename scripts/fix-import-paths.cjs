#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏...\n');

let fixedCount = 0;

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤ 
const importFixes = [
  // –£–±–∏—Ä–∞–µ–º ? –∏–∑ –ø—É—Ç–µ–π –∏–º–ø–æ—Ä—Ç–æ–≤ .vue —Ñ–∞–π–ª–æ–≤
  {
    pattern: /from ['"]([^'"]+)\?\.vue['"]/g,
    replacement: "from '$1.vue'",
    description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∏–º–ø–æ—Ä—Ç–æ–≤ .vue'
  },
  
  // –£–±–∏—Ä–∞–µ–º ? –∏–∑ –ø—É—Ç–µ–π –∏–º–ø–æ—Ä—Ç–æ–≤ .ts —Ñ–∞–π–ª–æ–≤  
  {
    pattern: /from ['"]([^'"]+)\?\.ts['"]/g,
    replacement: "from '$1.ts'",
    description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∏–º–ø–æ—Ä—Ç–æ–≤ .ts'
  },
  
  // –£–±–∏—Ä–∞–µ–º ? –∏–∑ –ø—É—Ç–µ–π –∏–º–ø–æ—Ä—Ç–æ–≤ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  {
    pattern: /from ['"]([^'"]+)\?['"]/g,
    replacement: "from '$1'",
    description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∏–º–ø–æ—Ä—Ç–æ–≤ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è'
  }
];

function fixImportsInFile(filePath) {
  try {
    if (!fs.existsSync(filePath)) return false;

    let content = fs.readFileSync(filePath, 'utf8');
    const originalContent = content;
    let fixes = [];

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    importFixes.forEach(fix => {
      if (fix.pattern.test(content)) {
        content = content.replace(fix.pattern, fix.replacement);
        fixes.push(fix.description);
      }
    });

    if (content !== originalContent) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`   ‚úÖ ${path.basename(filePath)}: ${fixes.length} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π`);
      fixedCount++;
      return true;
    }

    return false;
  } catch (error) {
    console.log(`   ‚ùå ${path.basename(filePath)}: ${error.message}`);
    return false;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö .vue –∏ .ts —Ñ–∞–π–ª–æ–≤
function getAllFiles(dir, exts = ['.vue', '.ts']) {
  const files = [];
  
  function walk(currentDir) {
    const items = fs.readdirSync(currentDir);
    
    for (const item of items) {
      const fullPath = path.join(currentDir, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
        walk(fullPath);
      } else if (stat.isFile() && exts.some(ext => item.endsWith(ext))) {
        files.push(fullPath);
      }
    }
  }
  
  walk(dir);
  return files;
}

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const filesToFix = getAllFiles('resources/js');

console.log(`üéØ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ ${filesToFix.length} —Ñ–∞–π–ª–∞—Ö...\n`);

filesToFix.forEach(filePath => {
  fixImportsInFile(filePath);
});

console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
console.log(`   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedCount}`);

if (fixedCount > 0) {
  console.log(`\n‚úÖ –ò–º–ø–æ—Ä—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!`);
  console.log('üß™ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: node scripts/check-errors.cjs');
} else {
  console.log(`\n‚ûñ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–∏—Å—å`);
}