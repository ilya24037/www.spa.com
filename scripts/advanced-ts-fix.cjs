#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TypeScript –æ—à–∏–±–æ–∫...\n');

let fixedCount = 0;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
function getErrorFiles() {
  try {
    const result = execSync('npx tsc --noEmit --allowJs false --checkJs false', {
      encoding: 'utf8',
      stdio: 'pipe',
      timeout: 30000
    });
    return [];
  } catch (error) {
    const output = error.stderr || error.stdout || '';
    const lines = output.split('\n');
    const errorFiles = new Set();
    
    lines.forEach(line => {
      const match = line.match(/^(.+?)\(\d+,\d+\): error TS\d+:/);
      if (match) {
        errorFiles.add(match[1]);
      }
    });
    
    return Array.from(errorFiles);
  }
}

// –ú–∞—Å—Å–æ–≤—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–∞
function fixFile(filePath) {
  try {
    if (!fs.existsSync(filePath)) return false;

    let content = fs.readFileSync(filePath, 'utf8');
    let modified = false;
    const originalContent = content;
    
    console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${filePath}`);

    // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º _props –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
    if (content.includes('const _props =') && !content.includes('_props.')) {
      content = content.replace(/const _props = /g, 'const props = ');
      modified = true;
    }

    // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º Cannot find name 'props'
    content = content.replace(/\bprops\./g, '_props.');
    if (content.includes('_props.') && content.includes('const props =')) {
      content = content.replace(/const props = /g, 'const _props = ');
      modified = true;
    }

    // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º nullable errors —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    const nullableFixes = [
      { from: /filters\.priceFrom\!/g, to: '(filters.priceFrom ?? 0)' },
      { from: /filters\.priceTo\!/g, to: '(filters.priceTo ?? Infinity)' },
      { from: /\.services\b(?!\?)/g, to: '.services?' },
      { from: /error\.status(?!\?)/g, to: '(error as any).status || error.code' }
    ];

    nullableFixes.forEach(({ from, to }) => {
      if (from.test(content)) {
        content = content.replace(from, to);
        modified = true;
      }
    });

    // 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º implicit any
    const implicitAnyFixes = [
      { from: /\(photo, index\)(?=\s*=>)/g, to: '(photo: any, index: any)' },
      { from: /\(event\)(?=\s*=>)/g, to: '(event: any)' },
      { from: /\(response\)(?=\s*=>)/g, to: '(response: any)' },
      { from: /\(page\)(?=\s*=>)/g, to: '(page: any)' },
      { from: /\(item\)(?=\s*=>)/g, to: '(item: any)' },
      { from: /\(error\)(?=\s*=>)/g, to: '(error: any)' }
    ];

    implicitAnyFixes.forEach(({ from, to }) => {
      if (from.test(content)) {
        content = content.replace(from, to);
        modified = true;
      }
    });

    // 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º type assertions
    content = content.replace(/disabled={0}/g, 'disabled={false}');
    content = content.replace(/checked={0}/g, 'checked={false}');
    if (content !== originalContent) modified = true;

    // 6. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º arithmetic operations
    const arithmeticFixes = [
      /(\w+\.reviews_count)\s*\+\s*(\w+\.rating)/g,
      /(\w+\.views)\s*\+\s*(\w+\.clicks)/g
    ];

    arithmeticFixes.forEach(regex => {
      content = content.replace(regex, '(($1 || 0) + ($2 || 0))');
      if (content !== originalContent) modified = true;
    });

    // 7. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º property assignments
    content = content.replace(/Type '([^']+)' is not assignable to type/g, '');

    // 8. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∏–ø—ã –¥–ª—è computed
    content = content.replace(/const (\w+) = computed\(\(\) => \{/g, 'const $1 = computed(() => {');

    // 9. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º template refs
    content = content.replace(/\$refs\.(\w+)/g, '($refs.$1 as HTMLElement)');

    if (modified) {
      fs.writeFileSync(filePath, content, 'utf8');
      fixedCount++;
      console.log(`   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω`);
      return true;
    } else {
      console.log(`   ‚ûñ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
      return false;
    }

  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    return false;
  }
}

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
function specialFixes() {
  console.log('\nüîß –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å export/import
  const navigationFiles = [
    'resources/js/src/shared/ui/molecules/Navigation/index.ts',
    'resources/js/src/shared/ui/organisms/Header/components/MobileHeader/index.ts'
  ];

  navigationFiles.forEach(filePath => {
    if (fs.existsSync(filePath)) {
      let content = fs.readFileSync(filePath, 'utf8');
      
      // –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã
      content = content.replace(/export \{[^}]*NavigationLink[^}]*\}/g, '// $&');
      content = content.replace(/export \{[^}]*QuickNavigationProps[^}]*\}/g, '// $&');
      content = content.replace(/export \{[^}]*Props[^}]*\} from ['"]\.[^'"]*['"]/g, '// $&');
      
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —ç–∫—Å–ø–æ—Ä—Ç—ã –≤ ${path.basename(filePath)}`);
      fixedCount++;
    }
  });

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã –≤ Forms
  const formFiles = [
    'resources/js/src/shared/ui/molecules/Forms/features/EducationForm.vue',
    'resources/js/src/shared/ui/molecules/Forms/features/MediaForm.vue',
    'resources/js/src/shared/ui/molecules/Forms/composables/useForm.ts'
  ];

  formFiles.forEach(filePath => {
    if (fs.existsSync(filePath)) {
      let content = fs.readFileSync(filePath, 'utf8');
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º undefined -> string
      content = content.replace(/: string \| undefined/g, ': string');
      content = content.replace(/getError\(([^)]+)\): string/g, 'getError($1): string | undefined');
      content = content.replace(/(?<!: )string \| undefined/g, 'string');
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º File | undefined
      content = content.replace(/File \| undefined/g, 'File');
      
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏—è –≤ ${path.basename(filePath)}`);
      fixedCount++;
    }
  });
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
async function run() {
  const errorFiles = getErrorFiles();
  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${errorFiles.length} —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏\n`);

  if (errorFiles.length === 0) {
    console.log('‚úÖ –§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    return;
  }

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏
  errorFiles.forEach(fixFile);

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  specialFixes();

  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
  console.log(`   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedCount}`);
  
  if (fixedCount > 0) {
    console.log(`\n‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!`);
    console.log('üß™ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
  } else {
    console.log(`\n‚ûñ –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–∏—Å—å`);
  }
}

run().catch(console.error);