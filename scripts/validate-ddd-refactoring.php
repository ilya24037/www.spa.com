<?php

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ DDD —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–æ–≤—ã—Ö Integration Services –∏ —Ç—Ä–µ–π—Ç–æ–≤
 */

require_once __DIR__ . '/../vendor/autoload.php';

use Illuminate\Foundation\Application;
use Illuminate\Foundation\Configuration\Exceptions;
use Illuminate\Foundation\Configuration\Middleware;

// –°–æ–∑–¥–∞–µ–º Laravel –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
$app = Application::configure(basePath: dirname(__DIR__))
    ->withRouting(
        web: __DIR__ . '/../routes/web.php',
        api: __DIR__ . '/../routes/api.php',
        commands: __DIR__ . '/../routes/console.php',
        health: '/up',
    )
    ->withMiddleware(function (Middleware $middleware) {
        //
    })
    ->withExceptions(function (Exceptions $exceptions) {
        //
    })->create();

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
$results = [
    'total_tests' => 0,
    'passed_tests' => 0,
    'failed_tests' => 0,
    'errors' => [],
    'warnings' => [],
];

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
 */
function runTest(string $testName, callable $testFunction, array &$results): void
{
    $results['total_tests']++;
    
    try {
        echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: $testName... ";
        
        $result = $testFunction();
        
        if ($result === true) {
            echo "‚úÖ –ü–†–û–®–ï–õ\n";
            $results['passed_tests']++;
        } else {
            echo "‚ùå –ù–ï –ü–†–û–®–ï–õ: $result\n";
            $results['failed_tests']++;
            $results['errors'][] = "$testName: $result";
        }
        
    } catch (Exception $e) {
        echo "üö® –û–®–ò–ë–ö–ê: " . $e->getMessage() . "\n";
        $results['failed_tests']++;
        $results['errors'][] = "$testName: " . $e->getMessage();
    }
}

echo "üöÄ –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ DDD —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞...\n\n";

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–π—Ç–æ–≤
runTest('–ó–∞–≥—Ä—É–∑–∫–∞ HasBookingIntegration —Ç—Ä–µ–π—Ç–∞', function() {
    return trait_exists('App\Domain\User\Traits\HasBookingIntegration') ? true : '–¢—Ä–µ–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω';
}, $results);

runTest('–ó–∞–≥—Ä—É–∑–∫–∞ HasMasterIntegration —Ç—Ä–µ–π—Ç–∞', function() {
    return trait_exists('App\Domain\User\Traits\HasMasterIntegration') ? true : '–¢—Ä–µ–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω';
}, $results);

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Integration Services
runTest('–ó–∞–≥—Ä—É–∑–∫–∞ UserBookingIntegrationService', function() {
    return class_exists('App\Application\Services\Integration\UserBookingIntegrationService') ? true : '–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω';
}, $results);

runTest('–ó–∞–≥—Ä—É–∑–∫–∞ UserMasterIntegrationService', function() {
    return class_exists('App\Application\Services\Integration\UserMasterIntegrationService') ? true : '–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω';
}, $results);

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Events
runTest('–ó–∞–≥—Ä—É–∑–∫–∞ BookingRequested —Å–æ–±—ã—Ç–∏—è', function() {
    return class_exists('App\Domain\Booking\Events\BookingRequested') ? true : '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ';
}, $results);

runTest('–ó–∞–≥—Ä—É–∑–∫–∞ MasterProfileCreated —Å–æ–±—ã—Ç–∏—è', function() {
    return class_exists('App\Domain\Master\Events\MasterProfileCreated') ? true : '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ';
}, $results);

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ DTOs
runTest('–ó–∞–≥—Ä—É–∑–∫–∞ UserBookingDTO', function() {
    return class_exists('App\Application\Services\Integration\DTOs\UserBookingDTO') ? true : 'DTO –Ω–µ –Ω–∞–π–¥–µ–Ω';
}, $results);

runTest('–ó–∞–≥—Ä—É–∑–∫–∞ UserMasterDTO', function() {
    return class_exists('App\Application\Services\Integration\DTOs\UserMasterDTO') ? true : 'DTO –Ω–µ –Ω–∞–π–¥–µ–Ω';
}, $results);

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Interfaces
runTest('–ó–∞–≥—Ä—É–∑–∫–∞ BookingRepositoryInterface', function() {
    return interface_exists('App\Domain\Booking\Contracts\BookingRepositoryInterface') ? true : '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω';
}, $results);

runTest('–ó–∞–≥—Ä—É–∑–∫–∞ MasterRepositoryInterface', function() {
    return interface_exists('App\Domain\Master\Contracts\MasterRepositoryInterface') ? true : '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω';
}, $results);

// –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ User –º–æ–¥–µ–ª–∏
runTest('–ó–∞–≥—Ä—É–∑–∫–∞ User –º–æ–¥–µ–ª–∏', function() {
    if (!class_exists('App\Domain\User\Models\User')) {
        return 'User –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–π—Ç–æ–≤
    $reflection = new ReflectionClass('App\Domain\User\Models\User');
    $traits = $reflection->getTraitNames();
    
    if (!in_array('App\Domain\User\Traits\HasBookingIntegration', $traits)) {
        return 'HasBookingIntegration —Ç—Ä–µ–π—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ User –º–æ–¥–µ–ª–∏';
    }
    
    if (!in_array('App\Domain\User\Traits\HasMasterIntegration', $traits)) {
        return 'HasMasterIntegration —Ç—Ä–µ–π—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ User –º–æ–¥–µ–ª–∏';
    }
    
    return true;
}, $results);

// –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –≤ —Ç—Ä–µ–π—Ç–∞—Ö
runTest('–ú–µ—Ç–æ–¥—ã HasBookingIntegration —Ç—Ä–µ–π—Ç–∞', function() {
    $reflection = new ReflectionClass('App\Domain\User\Traits\HasBookingIntegration');
    $methods = $reflection->getMethods();
    $methodNames = array_map(fn($m) => $m->getName(), $methods);
    
    $requiredMethods = ['getBookings', 'getActiveBookings', 'hasActiveBookings', 'requestBooking'];
    
    foreach ($requiredMethods as $method) {
        if (!in_array($method, $methodNames)) {
            return "–ú–µ—Ç–æ–¥ $method –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç—Ä–µ–π—Ç–µ";
        }
    }
    
    return true;
}, $results);

runTest('–ú–µ—Ç–æ–¥—ã HasMasterIntegration —Ç—Ä–µ–π—Ç–∞', function() {
    $reflection = new ReflectionClass('App\Domain\User\Traits\HasMasterIntegration');
    $methods = $reflection->getMethods();
    $methodNames = array_map(fn($m) => $m->getName(), $methods);
    
    $requiredMethods = ['getMasterProfile', 'getMasterProfiles', 'hasActiveMasterProfile', 'createMasterProfile'];
    
    foreach ($requiredMethods as $method) {
        if (!in_array($method, $methodNames)) {
            return "–ú–µ—Ç–æ–¥ $method –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç—Ä–µ–π—Ç–µ";
        }
    }
    
    return true;
}, $results);

// –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ DTO –≤–∞–ª–∏–¥–∞—Ü–∏–∏
runTest('–í–∞–ª–∏–¥–∞—Ü–∏—è UserBookingDTO', function() {
    $dtoClass = 'App\Application\Services\Integration\DTOs\UserBookingDTO';
    
    // –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π DTO
    $validData = [
        'user_id' => 1,
        'master_id' => 2,
        'service_type' => 'massage',
        'scheduled_at' => '2024-12-01 10:00:00',
        'price' => 5000.0,
    ];
    
    $dto = $dtoClass::fromArray($validData);
    
    if (!$dto->isValid()) {
        return 'DTO —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é';
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π DTO
    $invalidData = [
        'user_id' => -1, // –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π ID
        'master_id' => 2,
        'service_type' => '', // –ø—É—Å—Ç–æ–π —Ç–∏–ø
        'scheduled_at' => '2024-12-01 10:00:00',
    ];
    
    $invalidDto = $dtoClass::fromArray($invalidData);
    
    if ($invalidDto->isValid()) {
        return 'DTO —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é';
    }
    
    return true;
}, $results);

// –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ Event —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
runTest('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ BookingRequested —Å–æ–±—ã—Ç–∏—è', function() {
    $eventClass = 'App\Domain\Booking\Events\BookingRequested';
    $reflection = new ReflectionClass($eventClass);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    $constructor = $reflection->getConstructor();
    if (!$constructor) {
        return '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    }
    
    $parameters = $constructor->getParameters();
    $paramNames = array_map(fn($p) => $p->getName(), $parameters);
    
    $requiredParams = ['clientId', 'masterId', 'bookingData'];
    
    foreach ($requiredParams as $param) {
        if (!in_array($param, $paramNames)) {
            return "–ü–∞—Ä–∞–º–µ—Ç—Ä $param –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ";
        }
    }
    
    return true;
}, $results);

// –¢–µ—Å—Ç 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–µ–π—Ç–æ–≤ –≤ —Ñ–∞–π–ª–∞—Ö
runTest('–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä—è–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ HasBookings', function() {
    $userModelFile = file_get_contents(__DIR__ . '/../app/Domain/User/Models/User.php');
    
    if (strpos($userModelFile, 'use App\Domain\User\Traits\HasBookings;') !== false) {
        return '–ù–∞–π–¥–µ–Ω –∏–º–ø–æ—Ä—Ç —Å—Ç–∞—Ä–æ–≥–æ HasBookings —Ç—Ä–µ–π—Ç–∞';
    }
    
    if (strpos($userModelFile, 'HasBookings,') !== false && strpos($userModelFile, 'HasBookingIntegration') === false) {
        return '–ù–∞–π–¥–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ HasBookings —Ç—Ä–µ–π—Ç–∞';
    }
    
    return true;
}, $results);

echo "\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò:\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
echo "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {$results['total_tests']}\n";
echo "‚úÖ –ü—Ä–æ—à–ª–∏: {$results['passed_tests']}\n";
echo "‚ùå –ù–µ –ø—Ä–æ—à–ª–∏: {$results['failed_tests']}\n";

if ($results['failed_tests'] > 0) {
    echo "\nüö® –û–®–ò–ë–ö–ò:\n";
    foreach ($results['errors'] as $error) {
        echo "  - $error\n";
    }
}

if (count($results['warnings']) > 0) {
    echo "\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:\n";
    foreach ($results['warnings'] as $warning) {
        echo "  - $warning\n";
    }
}

$successRate = $results['total_tests'] > 0 ? round(($results['passed_tests'] / $results['total_tests']) * 100, 1) : 0;

echo "\nüéØ –ü–†–û–¶–ï–ù–¢ –£–°–ü–ï–®–ù–û–°–¢–ò: {$successRate}%\n";

if ($successRate >= 90) {
    echo "üéâ –û–¢–õ–ò–ß–ù–û! DDD —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n";
    // exit(0);
} elseif ($successRate >= 70) {
    echo "‚ö†Ô∏è –•–û–†–û–®–û, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.\n";
    // exit(1);
} else {
    echo "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´! –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏.\n";
    // exit(2);
}