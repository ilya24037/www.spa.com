#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫...\n');

let fixedCount = 0;

// –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–∏–ª –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–∫—Ä–∏–ø—Ç
const syntaxFixes = [
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º new Intl?. -> new Intl.
  {
    pattern: /new Intl\?\./g,
    replacement: 'new Intl.',
    description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ new Intl?. -> new Intl.'
  },
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º Math?. -> Math.
  {
    pattern: /Math\?\./g,
    replacement: 'Math.',
    description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Math?. -> Math.'
  },
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º Array?. -> Array.
  {
    pattern: /Array\?\./g,
    replacement: 'Array.',
    description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Array?. -> Array.'
  },
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL?. -> URL.
  {
    pattern: /URL\?\./g,
    replacement: 'URL.',
    description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ URL?. -> URL.'
  },
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º console?. -> console.
  {
    pattern: /console\?\./g,
    replacement: 'console.',
    description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ console?. -> console.'
  },
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º parseFloat -> parseFloat
  {
    pattern: /parseFloat\(/g,
    replacement: 'parseFloat(',
    description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ parseFloat'
  },
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–æ–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏ –≤ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è—Ö
  {
    pattern: /(\d+)\?\?(\d+)/g,
    replacement: '$1.$2',
    description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∏—Å–µ–ª —Å ?'
  }
];

function fixSyntaxInFile(filePath) {
  try {
    if (!fs.existsSync(filePath)) return false;

    let content = fs.readFileSync(filePath, 'utf8');
    const originalContent = content;
    let fixes = [];

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    syntaxFixes.forEach(fix => {
      if (fix.pattern.test(content)) {
        content = content.replace(fix.pattern, fix.replacement);
        fixes.push(fix.description);
      }
    });

    if (content !== originalContent) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`   ‚úÖ ${path.basename(filePath)}: ${fixes.length} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π`);
      fixedCount++;
      return true;
    }

    return false;
  } catch (error) {
    console.log(`   ‚ùå ${path.basename(filePath)}: ${error.message}`);
    return false;
  }
}

// –§–∞–π–ª—ã —Å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏
const problemFiles = [
  'resources/js/src/entities/ad/ui/AdCard/AdCard.vue',
  'resources/js/src/entities/ad/ui/AdCard/AdCardListItem.vue', 
  'resources/js/src/entities/booking/model/bookingStore.ts',
  'resources/js/src/shared/ui/molecules/Forms/features/MediaForm.vue'
];

console.log('üéØ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ —Ñ–∞–π–ª–∞—Ö...\n');

problemFiles.forEach(filePath => {
  if (fs.existsSync(filePath)) {
    console.log(`üîß ${filePath}`);
    fixSyntaxInFile(filePath);
  } else {
    console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
  }
});

console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
console.log(`   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedCount}`);

if (fixedCount > 0) {
  console.log(`\n‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!`);
  console.log('üß™ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: node scripts/check-errors.cjs');
} else {
  console.log(`\n‚ûñ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–∏—Å—å`);
}