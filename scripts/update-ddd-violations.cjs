const fs = require('fs');
const path = require('path');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å DDD –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏
 * –ó–∞–º–µ–Ω—è–µ—Ç –ø—Ä—è–º—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Å–≤—è–∑—è–º –Ω–∞ Integration Services
 */

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–º–µ–Ω –¥–ª—è DDD —Å–æ–±–ª—é–¥–µ–Ω–∏—è
const replacements = [
  // Booking-related replacements
  {
    pattern: /\$user->bookings\(\)/g,
    replacement: '$user->getBookings()',
    description: 'Replace direct bookings() relation with getBookings() method'
  },
  {
    pattern: /\$user->activeBookings\(\)/g,
    replacement: '$user->getActiveBookings()',
    description: 'Replace direct activeBookings() relation with getActiveBookings() method'
  },
  {
    pattern: /\$user->completedBookings\(\)/g,
    replacement: '$user->getCompletedBookings()',
    description: 'Replace direct completedBookings() relation with getCompletedBookings() method'
  },
  {
    pattern: /\$user->lastBooking\(\)/g,
    replacement: '$user->getLastBooking()',
    description: 'Replace direct lastBooking() relation with getLastBooking() method'
  },
  {
    pattern: /\$user->hasActiveBookings\(\)/g,
    replacement: '$user->hasActiveBookings()',
    description: 'hasActiveBookings() method remains the same'
  },
  {
    pattern: /\$user->bookings\(\)->count\(\)/g,
    replacement: '$user->getBookingsCount()',
    description: 'Replace bookings count with optimized method'
  },
  {
    pattern: /\$user->bookings\(\)->create\(/g,
    replacement: '$user->requestBooking(',
    description: 'Replace direct booking creation with event-driven approach'
  },
  {
    pattern: /\$user->bookings\(\)->delete\(\)/g,
    replacement: '$user->cancelAllBookings()',
    description: 'Replace direct booking deletion with service method'
  },

  // Master profile-related replacements
  {
    pattern: /\$user->masterProfile\b/g,
    replacement: '$user->getMasterProfile()',
    description: 'Replace direct masterProfile property with getMasterProfile() method'
  },
  {
    pattern: /\$user->masterProfiles\(\)/g,
    replacement: '$user->getMasterProfiles()',
    description: 'Replace direct masterProfiles() relation with getMasterProfiles() method'
  },
  {
    pattern: /\$user->masterProfile\(\)/g,
    replacement: '$user->getMasterProfile()',
    description: 'Replace direct masterProfile() relation with getMasterProfile() method'
  },
  {
    pattern: /\$user->hasActiveMasterProfile\(\)/g,
    replacement: '$user->hasActiveMasterProfile()',
    description: 'hasActiveMasterProfile() method remains the same'
  },
  {
    pattern: /\$user->masterProfile\(\)->create\(/g,
    replacement: '$user->createMasterProfile(',
    description: 'Replace direct master profile creation with event-driven approach'
  },
  {
    pattern: /\$user->getMainMasterProfile\(\)/g,
    replacement: '$user->getMainMasterProfile()',
    description: 'getMainMasterProfile() method remains the same'
  },

  // Profile-related replacements (safer getters)
  {
    pattern: /\$user->profile\b/g,
    replacement: '$user->getProfile()',
    description: 'Replace direct profile property with safe getProfile() method'
  },
  {
    pattern: /\$user->settings\b/g,
    replacement: '$user->getSettings()',
    description: 'Replace direct settings property with safe getSettings() method'
  },

  // Load relationships - remove problematic eager loading
  {
    pattern: /->load\(\['profile', 'masterProfile'\]\)/g,
    replacement: '',
    description: 'Remove problematic eager loading - use methods instead'
  },
  {
    pattern: /->load\('masterProfile'\)/g,
    replacement: '',
    description: 'Remove problematic masterProfile eager loading'
  },
  {
    pattern: /->with\(\['masterProfile'\]\)/g,
    replacement: '',
    description: 'Remove problematic masterProfile with() eager loading'
  },
];

// –§–∞–π–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å—Ä–µ–¥–Ω–∏–π –∏ –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
const filesToUpdate = [
  'app/Application/Http/Controllers/Profile/ProfileItemsController.php',
  'app/Application/Http/Controllers/FavoriteController.php',
  'app/Application/Http/Controllers/CompareController.php',
  'app/Domain/Master/Repositories/MasterRepository.php',
  'app/Domain/Master/Services/MasterService.php',
  'app/Application/Http/Controllers/Media/MediaUploadController.php',
  'app/Application/Http\Controllers/Profile/ProfileSettingsController.php',
  'app/Infrastructure/Adapters/BookingServiceAdapter.php',
  'app/Domain/Booking/Actions/RescheduleBookingAction.php',
  'app/Domain/Booking/Services/BookingSlotService.php',
  'app/Domain/Booking/Services/BookingService.php',
  'app/Domain/Booking/Actions/CompleteBookingAction.php',
  'app/Infrastructure/Notification/LegacyNotificationService.php',
  'app/Domain\Booking/Actions/ConfirmBookingAction.php',
];

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª —Å–æ–≥–ª–∞—Å–Ω–æ DDD –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
 */
function updateFile(filePath) {
  const fullPath = path.join(process.cwd(), filePath);
  
  if (!fs.existsSync(fullPath)) {
    console.log(`‚ö†Ô∏è File not found: ${filePath}`);
    return false;
  }

  try {
    let content = fs.readFileSync(fullPath, 'utf8');
    let updated = false;
    let appliedReplacements = [];

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–º–µ–Ω—ã
    replacements.forEach(({ pattern, replacement, description }) => {
      if (pattern.test(content)) {
        const matches = content.match(pattern);
        content = content.replace(pattern, replacement);
        updated = true;
        appliedReplacements.push({
          description,
          count: matches ? matches.length : 0
        });
      }
    });

    if (updated) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ
      const refactoringComment = `
/**
 * ‚úÖ DDD –†–ï–§–ê–ö–¢–û–†–ò–ù–ì –ü–†–ò–ú–ï–ù–ï–ù:
 * - –ó–∞–º–µ–Ω–µ–Ω—ã –ø—Ä—è–º—ã–µ —Å–≤—è–∑–∏ –Ω–∞ Integration Services
 * - –£–¥–∞–ª–µ–Ω—ã —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –¥–æ–º–µ–Ω–∞–º–∏
 * - –ü—Ä–∏–º–µ–Ω–µ–Ω—ã Events –¥–ª—è –º–µ–∂–¥–æ–º–µ–Ω–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
 * 
 * –û–±–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: ${new Date().toISOString()}
 */
`;
      
      // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å–ª–µ namespace
      content = content.replace(
        /(namespace [^;]+;)/,
        `$1\n${refactoringComment}`
      );

      fs.writeFileSync(fullPath, content, 'utf8');
      
      console.log(`‚úÖ Updated: ${filePath}`);
      appliedReplacements.forEach(({ description, count }) => {
        console.log(`   - ${description} (${count} replacements)`);
      });
      
      return true;
    } else {
      console.log(`üìù No changes needed: ${filePath}`);
      return false;
    }

  } catch (error) {
    console.error(`‚ùå Error updating ${filePath}:`, error.message);
    return false;
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main() {
  console.log('üöÄ Starting DDD Violations Update Script...\n');

  let totalFiles = 0;
  let updatedFiles = 0;

  filesToUpdate.forEach(file => {
    totalFiles++;
    if (updateFile(file)) {
      updatedFiles++;
    }
  });

  // üìä SUMMARY:
  // Total files processed: ${totalFiles}
  // Files updated: ${updatedFiles}
  // Files skipped: ${totalFiles - updatedFiles}
  
  if (updatedFiles > 0) {
    // ‚úÖ DDD —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ —Ñ–∞–π–ª–∞–º
    // –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
  } else {
    // üìù –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç DDD –ø—Ä–∏–Ω—Ü–∏–ø–∞–º –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main();