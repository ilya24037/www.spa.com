# Smart Context Watcher —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏
# –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Å—Ç–∞—Ç—å–µ Habr –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏ LLM

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ (–ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É –∏–µ—Ä–∞—Ä—Ö–∏–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏)
$PRIORITY_CRITICAL = @('CLAUDE.md', 'AI_CONTEXT.md', '.env', 'composer.json', 'package.json')
$PRIORITY_HIGH = @('*.ts', '*.vue', '*.php')
$PRIORITY_MEDIUM = @('*.js', '*.css')
$PRIORITY_LOW = @('*.md', '*.txt')

# –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
$repoRoot = (Resolve-Path -LiteralPath "C:\www.spa.com").ProviderPath
Set-Location $repoRoot

Write-Host "[Smart Watcher] üöÄ –ó–∞–ø—É—â–µ–Ω —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞" -ForegroundColor Cyan
Write-Host "[Smart Watcher] üìÅ –û—Ç—Å–ª–µ–∂–∏–≤–∞—é: $repoRoot" -ForegroundColor Gray

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
$changes = [hashtable]::Synchronized(@{
    critical = @()
    high = @()
    medium = @()
    low = @()
    lastUpdate = $null
})

# –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ñ–∞–π–ª–∞
function Get-FilePriority([string]$path) {
    $fileName = Split-Path $path -Leaf
    
    if ($PRIORITY_CRITICAL -contains $fileName) { return 'critical' }
    foreach ($pattern in $PRIORITY_HIGH) {
        if ($fileName -like $pattern) { return 'high' }
    }
    foreach ($pattern in $PRIORITY_MEDIUM) {
        if ($fileName -like $pattern) { return 'medium' }
    }
    return 'low'
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
function Create-OptimizedContext {
    $contextFile = Join-Path $repoRoot "storage\ai-sessions\smart\context_$(Get-Date -Format 'yyyy-MM-dd_HH-mm-ss').md"
    $dir = Split-Path $contextFile -Parent
    if (-not (Test-Path $dir)) {
        New-Item -ItemType Directory -Path $dir -Force | Out-Null
    }

    $content = @"
# üß† Smart Context (Optimized for LLM)
Generated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')

## üìã CONTEXT INJECTION (Remember this):
- Project: SPA Platform
- Stack: Laravel 12 + Vue 3 + TypeScript
- Architecture: Backend DDD, Frontend FSD
- Working directory: $repoRoot

"@

    # 1. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    if ($changes.critical.Count -gt 0) {
        $content += @"

## üî¥ CRITICAL CHANGES (Highest Priority):
These files affect the entire project structure:

"@
        foreach ($file in $changes.critical | Select-Object -Unique -Last 5) {
            $content += "- ``$file`` - ARCHITECTURE/CONFIG CHANGE`n"
        }
    }

    # 2. –í–ê–ñ–ù–´–ï –∏–∑–º–µ–Ω–µ–Ω–∏—è (–±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞)
    if ($changes.high.Count -gt 0) {
        $content += @"

## üü° IMPORTANT CHANGES (Business Logic):
"@
        foreach ($file in $changes.high | Select-Object -Unique -Last 10) {
            $content += "- ``$file```n"
        }
    }

    # 3. Git —Å—Ç–∞—Ç—É—Å (—Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
    $gitStatus = git status --short 2>$null
    if ($gitStatus) {
        $content += @"

## üìù Current Git Status:
``````bash
$gitStatus
``````

"@
    }

    # 4. –°–¢–†–£–ö–¢–£–†–ù–´–ô –Ø–ö–û–†–¨ –¥–ª—è –∑–∞–¥–∞—á
    $content += @"

## ‚öì TASK TEMPLATE (Structural Anchor):
When implementing changes:
1. Check TypeScript types first
2. Verify FSD/DDD architecture compliance  
3. Ensure backward compatibility
4. Add error handling
5. Update tests if needed

"@

    # 5. –ü–û–°–õ–ï–î–ù–ï–ï –°–õ–û–í–û (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –≤ –∫–æ–Ω—Ü–µ!)
    $content += @"

## ‚ö†Ô∏è CRITICAL REMINDERS (LAST WORD - READ THIS!):
1. **NEVER** put business logic in controllers
2. **ALWAYS** use TypeScript with proper types
3. **FOLLOW** FSD structure for frontend (src/entities, features, widgets)
4. **FOLLOW** DDD structure for backend (Domain/Application/Infrastructure)
5. **PRESERVE** backward compatibility
6. **CHECK** your work: "Critically evaluate what you did"
"@

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∫–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä
    $content | Out-File -FilePath $contextFile -Encoding UTF8
    $content | Set-Clipboard
    
    Write-Host "[Smart Watcher] ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä" -ForegroundColor Green
    Write-Host "[Smart Watcher] üìÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω: $contextFile" -ForegroundColor Gray
    
    # –û—á–∏—â–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    $changes.critical = @()
    $changes.high = @()
    $changes.medium = @()
    $changes.low = @()
    $changes.lastUpdate = Get-Date
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ FileSystemWatcher
$watcher = New-Object System.IO.FileSystemWatcher
$watcher.Path = $repoRoot
$watcher.Filter = '*.*'
$watcher.IncludeSubdirectories = $true
$watcher.EnableRaisingEvents = $true

# –ò—Å–∫–ª—é—á–µ–Ω–∏—è
$excludePaths = @('node_modules', 'vendor', 'storage\logs', 'storage\framework', '.git', 'public\build')

function Should-Exclude([string]$path) {
    foreach ($exclude in $excludePaths) {
        if ($path -like "*\$exclude\*" -or $path -like "*/$exclude/*") {
            return $true
        }
    }
    return $false
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
$action = {
    param($sender, $e)
    
    $path = $e.FullPath
    if (Should-Exclude $path) { return }
    
    $relativePath = $path.Replace($repoRoot, '').TrimStart('\').TrimStart('/')
    $priority = Get-FilePriority $path
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if (-not $changes[$priority].Contains($relativePath)) {
        $changes[$priority] += $relativePath
        
        $icon = switch($priority) {
            'critical' { 'üî¥' }
            'high' { 'üü°' }
            'medium' { 'üîµ' }
            'low' { '‚ö™' }
        }
        
        Write-Host "[Smart Watcher] $icon Change detected: $relativePath" -ForegroundColor Cyan
    }
}

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
Register-ObjectEvent -InputObject $watcher -EventName "Changed" -Action $action | Out-Null
Register-ObjectEvent -InputObject $watcher -EventName "Created" -Action $action | Out-Null
Register-ObjectEvent -InputObject $watcher -EventName "Deleted" -Action $action | Out-Null
Register-ObjectEvent -InputObject $watcher -EventName "Renamed" -Action $action | Out-Null

# –¢–∞–π–º–µ—Ä –¥–ª—è —É–º–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
$timer = New-Object System.Timers.Timer
$timer.Interval = 30000
$timer.AutoReset = $true

Register-ObjectEvent -InputObject $timer -EventName Elapsed -Action {
    $hasChanges = ($changes.critical.Count + $changes.high.Count + $changes.medium.Count + $changes.low.Count) -gt 0
    
    if ($hasChanges) {
        Write-Host "[Smart Watcher] üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–æ–∑–¥–∞—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç..." -ForegroundColor Yellow
        Create-OptimizedContext
    }
} | Out-Null

$timer.Start()

# –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
Write-Host "[Smart Watcher] üìã –°–æ–∑–¥–∞—é –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–Ω—è..." -ForegroundColor Yellow
Create-OptimizedContext

Write-Host "[Smart Watcher] ‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏." -ForegroundColor Green
Write-Host "[Smart Watcher] üí° –°–æ–≤–µ—Ç: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ–≥–¥–∞ –≤ –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞ - –ø—Ä–æ—Å—Ç–æ Ctrl+V –≤ Claude!" -ForegroundColor Cyan

# –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
while ($true) {
    Start-Sleep -Seconds 1
}