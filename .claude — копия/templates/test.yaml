name: test-driven-development
description: Создание тестов для кода Laravel/Vue с покрытием 80%+
prompt: |
  Создай comprehensive тесты следуя TDD подходу:

  1. АНАЛИЗ КОДА:
     - Определи критические пути выполнения
     - Найди граничные случаи (edge cases)
     - Определи зависимости для мокирования

  2. СТРУКТУРА ТЕСТОВ:

     Backend (PHPUnit):
     ✅ Unit тесты для сервисов и actions
     ✅ Feature тесты для контроллеров
     ✅ Integration тесты для API endpoints
     ✅ Database тесты с фабриками

     Frontend (Vitest/Jest):
     ✅ Component тесты с @testing-library/vue
     ✅ Composables unit тесты
     ✅ Store тесты (Pinia)
     ✅ E2E тесты критических путей

  3. ПАТТЕРНЫ ТЕСТИРОВАНИЯ:
     - Arrange-Act-Assert (AAA)
     - Given-When-Then для BDD
     - Мокирование внешних сервисов
     - Фикстуры для тестовых данных

  4. ПОКРЫТИЕ:
     - Минимум 80% для бизнес-логики
     - 100% для критических путей
     - Проверка всех exception случаев
     - Валидация всех входных данных

  5. BEST PRACTICES:
     - Изолированные тесты (не зависят друг от друга)
     - Быстрые тесты (< 100ms на unit тест)
     - Читаемые имена тестов
     - Один assert на тест (где возможно)

  КРИТИЧЕСКИ ВАЖНО:
  - Тесты должны падать при поломке функционала
  - Использовать фабрики, а не хардкод данных
  - Тестировать поведение, а не реализацию

  Специфика проекта SPA Platform:
  - Laravel: фабрики, DatabaseTransactions trait
  - Vue: @vue/test-utils, happy-dom
  - Обязательно тестировать валидацию форм