/**
 * GeolocationControl - –ö–æ–Ω—Ç—Ä–æ–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç
 * 
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏
 * —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –º–µ—Ç–∫–∏.
 * 
 * @version 1.0.0
 * @author YMaps Components
 * @created 2025-09-04
 */

import ControlBase from '../ControlBase.js';
import { DOM, Position, Events } from '../../utils/controlHelpers.js';

/**
 * –ö–ª–∞—Å—Å –∫–æ–Ω—Ç—Ä–æ–ª–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
 * @extends ControlBase
 */
export default class GeolocationControl extends ControlBase {
  /**
   * @param {Object} options - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∞
   * @param {string} [options.position='topLeft'] - –ü–æ–∑–∏—Ü–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ
   * @param {boolean} [options.adjustMapMargin=false] - –£—á–∏—Ç—ã–≤–∞—Ç—å –æ—Ç—Å—Ç—É–ø—ã –∫–∞—Ä—Ç—ã
   * @param {number} [options.zIndex=1000] - Z-index —ç–ª–µ–º–µ–Ω—Ç–∞
   * @param {Object} [options.size={width: 36, height: 36}] - –†–∞–∑–º–µ—Ä—ã –∫–Ω–æ–ø–∫–∏
   * @param {string} [options.title=''] - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è accessibility
   * @param {boolean} [options.noPlacemark=false] - –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–µ—Ç–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ
   * @param {boolean} [options.useMapMargin=true] - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç—Å—Ç—É–ø—ã –∫–∞—Ä—Ç—ã –ø—Ä–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
   * @param {boolean} [options.mapStateAutoApply=true] - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã
   * @param {Object} [options.geolocationOptions] - –û–ø—Ü–∏–∏ HTML5 Geolocation API
   */
  constructor(options = {}) {
    const defaultOptions = {
      position: 'topLeft',
      adjustMapMargin: false,
      zIndex: 1000,
      size: { width: 36, height: 36 },
      title: '',
      noPlacemark: false,
      useMapMargin: true,
      mapStateAutoApply: true,
      geolocationOptions: {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 300000 // 5 –º–∏–Ω—É—Ç
      }
    };

    super({ ...defaultOptions, ...options });
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–∞
    this._state = 'ready'; // ready, pending, error
    this._currentRequest = null;
    this._geoObjects = null;
    this._watchId = null;
    this._lastKnownPosition = null;
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    this._button = null;
    this._icon = null;
    this._spinner = null;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Geolocation API
    this._isSupported = this._checkGeolocationSupport();
    
    if (!this._isSupported) {
      console.warn('GeolocationControl: Geolocation API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–∞ –Ω–∞ –∫–∞—Ä—Ç—É
   * @param {YMaps} map - –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä—Ç—ã
   * @returns {Promise<void>}
   */
  async addToMap(map) {
    try {
      await super.addToMap(map);
      
      if (!this._isSupported) {
        return;
      }

      await this._createButton();
      await this._bindEvents();
      
      // –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–∞
      this._fireEvent('create');
      
    } catch (error) {
      console.error('GeolocationControl: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞ –∫–∞—Ä—Ç—É:', error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–∞ —Å –∫–∞—Ä—Ç—ã
   * @returns {Promise<void>}
   */
  async removeFromMap() {
    try {
      // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
      if (this._watchId !== null) {
        navigator.geolocation.clearWatch(this._watchId);
        this._watchId = null;
      }
      
      // –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      if (this._currentRequest) {
        this._currentRequest.cancel = true;
        this._currentRequest = null;
      }
      
      // –£–¥–∞–ª–µ–Ω–∏–µ –≥–µ–æ–æ–±—ä–µ–∫—Ç–æ–≤ —Å –∫–∞—Ä—Ç—ã
      if (this._geoObjects && this._map) {
        try {
          this._map.geoObjects.remove(this._geoObjects);
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        }
        this._geoObjects = null;
      }
      
      this._unbindEvents();
      
      if (this._button && this._button.parentNode) {
        this._button.parentNode.removeChild(this._button);
      }
      
      await super.removeFromMap();
      
    } catch (error) {
      console.error('GeolocationControl: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å –∫–∞—Ä—Ç—ã:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
   * @returns {Promise<Object>} - –û–±—ä–µ–∫—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   */
  async getCurrentPosition() {
    if (!this._isSupported) {
      throw new Error('Geolocation API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
    }

    return new Promise((resolve, reject) => {
      const request = {
        cancel: false,
        timestamp: Date.now()
      };
      
      this._currentRequest = request;
      
      const onSuccess = (position) => {
        if (request.cancel) return;
        
        const result = this._processGeolocationResult(position);
        this._lastKnownPosition = result;
        this._currentRequest = null;
        
        resolve(result);
      };
      
      const onError = (error) => {
        if (request.cancel) return;
        
        this._currentRequest = null;
        const processedError = this._processGeolocationError(error);
        reject(processedError);
      };
      
      navigator.geolocation.getCurrentPosition(
        onSuccess,
        onError,
        this._options.geolocationOptions
      );
    });
  }

  /**
   * –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Function} callback - Callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–∏
   * @returns {number} - ID –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
   */
  watchPosition(callback) {
    if (!this._isSupported || this._watchId !== null) {
      return null;
    }

    const onSuccess = (position) => {
      const result = this._processGeolocationResult(position);
      this._lastKnownPosition = result;
      callback(result);
    };
    
    const onError = (error) => {
      const processedError = this._processGeolocationError(error);
      callback(null, processedError);
    };

    this._watchId = navigator.geolocation.watchPosition(
      onSuccess,
      onError,
      this._options.geolocationOptions
    );
    
    return this._watchId;
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
   */
  clearWatch() {
    if (this._watchId !== null) {
      navigator.geolocation.clearWatch(this._watchId);
      this._watchId = null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–∞ –∫–∞—Ä—Ç—É
   * @returns {Promise<Object>}
   */
  async locate() {
    if (this._state !== 'ready') {
      return null;
    }

    try {
      this._setState('pending');
      
      const position = await this.getCurrentPosition();
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–æ–æ–±—ä–µ–∫—Ç–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (!this._options.noPlacemark) {
        await this._createGeoObjects(position);
      }
      
      // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç—ã
      if (this._options.mapStateAutoApply) {
        await this._applyMapState(position);
      }
      
      this._setState('ready');
      this._fireEvent('locationchange', { position, geoObjects: this._geoObjects });
      
      return {
        position,
        geoObjects: this._geoObjects
      };
      
    } catch (error) {
      this._setState('error');
      this._fireEvent('locationerror', { error });
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
   * @returns {Object|null}
   */
  getLastKnownPosition() {
    return this._lastKnownPosition;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–∞
   * @returns {string} - ready, pending, error
   */
  getControlState() {
    return this._state;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Geolocation API
   * @returns {boolean}
   * @private
   */
  _checkGeolocationSupport() {
    return 'geolocation' in navigator && 
           typeof navigator.geolocation.getCurrentPosition === 'function';
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∞
   * @returns {Promise<void>}
   * @private
   */
  async _createButton() {
    if (!this._isSupported) {
      return;
    }

    this._button = DOM.createButton({
      className: 'ymaps-geolocation-control',
      title: this._options.title || '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
      size: this._options.size,
      ariaLabel: '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∏ —Å–ø–∏–Ω–Ω–µ—Ä–∞
    this._icon = document.createElement('span');
    this._icon.className = 'ymaps-geolocation-icon';
    this._icon.innerHTML = 'üéØ'; // GPS –∏–∫–æ–Ω–∫–∞
    
    this._spinner = document.createElement('span');
    this._spinner.className = 'ymaps-geolocation-spinner';
    this._spinner.innerHTML = '‚Üª';
    this._spinner.style.display = 'none';
    
    this._button.appendChild(this._icon);
    this._button.appendChild(this._spinner);
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    Position.setControlPosition(this._button, this._options.position, this._options.zIndex);
    
    // –°—Ç–∏–ª–∏ –∫–Ω–æ–ø–∫–∏
    this._applyStyles();
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç—É
    this._map.container.getElement().appendChild(this._button);
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∫ –∫–Ω–æ–ø–∫–µ
   * @private
   */
  _applyStyles() {
    if (!this._button) return;

    Object.assign(this._button.style, {
      backgroundColor: '#ffffff',
      border: '1px solid #e5e7eb',
      borderRadius: '6px',
      boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
      cursor: 'pointer',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      fontSize: '16px',
      color: '#374151',
      transition: 'all 0.2s ease',
      userSelect: 'none',
      position: 'relative'
    });

    // –°—Ç–∏–ª–∏ –¥–ª—è –∏–∫–æ–Ω–∫–∏
    Object.assign(this._icon.style, {
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      transition: 'opacity 0.2s ease'
    });

    // –°—Ç–∏–ª–∏ –¥–ª—è —Å–ø–∏–Ω–Ω–µ—Ä–∞
    Object.assign(this._spinner.style, {
      position: 'absolute',
      display: 'none',
      fontSize: '14px',
      animation: 'geolocation-spin 1s linear infinite'
    });

    // CSS –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —Å–ø–∏–Ω–Ω–µ—Ä–∞
    if (!document.getElementById('geolocation-spinner-styles')) {
      const style = document.createElement('style');
      style.id = 'geolocation-spinner-styles';
      style.textContent = `
        @keyframes geolocation-spin {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }
      `;
      document.head.appendChild(style);
    }

    // Hover —ç—Ñ—Ñ–µ–∫—Ç—ã
    this._button.addEventListener('mouseenter', () => {
      if (this._state === 'ready') {
        Object.assign(this._button.style, {
          backgroundColor: '#f9fafb',
          boxShadow: '0 4px 8px rgba(0, 0, 0, 0.15)'
        });
      }
    });

    this._button.addEventListener('mouseleave', () => {
      if (this._state === 'ready') {
        Object.assign(this._button.style, {
          backgroundColor: '#ffffff',
          boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)'
        });
      }
    });

    // Active —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this._button.addEventListener('mousedown', () => {
      if (this._state === 'ready') {
        this._button.style.transform = 'scale(0.95)';
      }
    });

    this._button.addEventListener('mouseup', () => {
      this._button.style.transform = 'scale(1)';
    });
  }

  /**
   * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
   * @returns {Promise<void>}
   * @private
   */
  async _bindEvents() {
    if (!this._isSupported || !this._button) {
      return;
    }

    // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ
    this._button.addEventListener('click', this._onButtonClick.bind(this));
    
    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    this._button.addEventListener('keydown', this._onKeyDown.bind(this));
  }

  /**
   * –û—Ç–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
   * @private
   */
  _unbindEvents() {
    // –°–æ–±—ã—Ç–∏—è –æ—Ç–≤—è–∑—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
   * @param {Event} event
   * @private
   */
  async _onButtonClick(event) {
    event.preventDefault();
    event.stopPropagation();

    if (!this._isSupported || this._state !== 'ready') {
      return;
    }

    try {
      await this.locate();
      this._fireEvent('press');
    } catch (error) {
      console.error('GeolocationControl: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
   * @param {KeyboardEvent} event
   * @private
   */
  _onKeyDown(event) {
    if (event.key === 'Enter' || event.key === ' ') {
      event.preventDefault();
      this._onButtonClick(event);
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–∞
   * @param {string} state - ready, pending, error
   * @private
   */
  _setState(state) {
    if (this._state === state) return;
    
    const previousState = this._state;
    this._state = state;
    
    this._updateButtonState();
    this._fireEvent('statechange', { 
      state, 
      previousState,
      isLocating: state === 'pending'
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
   * @private
   */
  _updateButtonState() {
    if (!this._button || !this._icon || !this._spinner) return;

    switch (this._state) {
      case 'ready':
        this._button.disabled = false;
        this._button.style.cursor = 'pointer';
        this._button.style.backgroundColor = '#ffffff';
        this._button.style.color = '#374151';
        this._icon.style.display = 'flex';
        this._spinner.style.display = 'none';
        this._button.title = '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
        break;
        
      case 'pending':
        this._button.disabled = true;
        this._button.style.cursor = 'not-allowed';
        this._button.style.backgroundColor = '#f3f4f6';
        this._button.style.color = '#6b7280';
        this._icon.style.display = 'none';
        this._spinner.style.display = 'flex';
        this._button.title = '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...';
        break;
        
      case 'error':
        this._button.disabled = false;
        this._button.style.cursor = 'pointer';
        this._button.style.backgroundColor = '#fee2e2';
        this._button.style.color = '#dc2626';
        this._button.style.borderColor = '#fecaca';
        this._icon.style.display = 'flex';
        this._spinner.style.display = 'none';
        this._button.title = '–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å?';
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          if (this._state === 'error') {
            this._setState('ready');
          }
        }, 3000);
        break;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
   * @param {GeolocationPosition} position
   * @returns {Object}
   * @private
   */
  _processGeolocationResult(position) {
    const coords = position.coords;
    
    return {
      coords: [coords.latitude, coords.longitude],
      accuracy: coords.accuracy,
      altitude: coords.altitude,
      altitudeAccuracy: coords.altitudeAccuracy,
      heading: coords.heading,
      speed: coords.speed,
      timestamp: position.timestamp
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
   * @param {GeolocationPositionError} error
   * @returns {Object}
   * @private
   */
  _processGeolocationError(error) {
    let message = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏';
    let code = 'UNKNOWN_ERROR';
    
    switch (error.code) {
      case error.PERMISSION_DENIED:
        message = '–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º';
        code = 'PERMISSION_DENIED';
        break;
      case error.POSITION_UNAVAILABLE:
        message = '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
        code = 'POSITION_UNAVAILABLE';
        break;
      case error.TIMEOUT:
        message = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è';
        code = 'TIMEOUT';
        break;
    }
    
    return {
      message,
      code,
      originalError: error
    };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–æ–æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
   * @param {Object} position
   * @returns {Promise<void>}
   * @private
   */
  async _createGeoObjects(position) {
    if (!this._map || this._options.noPlacemark) {
      return;
    }

    try {
      // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≥–µ–æ–æ–±—ä–µ–∫—Ç–æ–≤
      if (this._geoObjects) {
        this._map.geoObjects.remove(this._geoObjects);
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–µ—Ç–∫–∏
      const placemark = new ymaps.Placemark(position.coords, {
        balloonContentHeader: '–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
        balloonContentBody: this._createBalloonContent(position),
        balloonContentFooter: '–¢–æ—á–Ω–æ—Å—Ç—å: ¬±' + Math.round(position.accuracy) + ' –º',
        hintContent: '–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
      }, {
        preset: 'islands#redDotIcon',
        iconColor: '#1e40af',
        draggable: false
      });

      // –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
      let accuracyCircle = null;
      if (position.accuracy && position.accuracy < 10000) {
        accuracyCircle = new ymaps.Circle([position.coords, position.accuracy], {
          balloonContent: '–ó–æ–Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è'
        }, {
          fillColor: '#1e40af',
          fillOpacity: 0.1,
          strokeColor: '#1e40af',
          strokeOpacity: 0.3,
          strokeWidth: 2
        });
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≥–µ–æ–æ–±—ä–µ–∫—Ç–æ–≤
      this._geoObjects = new ymaps.GeoObjectCollection();
      this._geoObjects.add(placemark);
      
      if (accuracyCircle) {
        this._geoObjects.add(accuracyCircle);
      }

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç—É
      this._map.geoObjects.add(this._geoObjects);

    } catch (error) {
      console.error('GeolocationControl: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–µ–æ–æ–±—ä–µ–∫—Ç–æ–≤:', error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–ª—É–Ω–∞
   * @param {Object} position
   * @returns {string}
   * @private
   */
  _createBalloonContent(position) {
    const time = new Date(position.timestamp).toLocaleTimeString();
    
    let content = `
      <div style="font-size: 12px; line-height: 1.4;">
        <p><strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong><br>
        ${position.coords[0].toFixed(6)}, ${position.coords[1].toFixed(6)}</p>
        <p><strong>–í—Ä–µ–º—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:</strong> ${time}</p>
    `;
    
    if (position.altitude !== null) {
      content += `<p><strong>–í—ã—Å–æ—Ç–∞:</strong> ${Math.round(position.altitude)} –º</p>`;
    }
    
    if (position.speed !== null && position.speed > 0) {
      content += `<p><strong>–°–∫–æ—Ä–æ—Å—Ç—å:</strong> ${Math.round(position.speed * 3.6)} –∫–º/—á</p>`;
    }
    
    content += '</div>';
    return content;
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç—ã
   * @param {Object} position
   * @returns {Promise<void>}
   * @private
   */
  async _applyMapState(position) {
    if (!this._map) return;

    try {
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∑—É–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ—á–Ω–æ—Å—Ç–∏
      let zoom = 16; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
      
      if (position.accuracy) {
        if (position.accuracy < 100) zoom = 17;
        else if (position.accuracy < 500) zoom = 15;
        else if (position.accuracy < 1000) zoom = 14;
        else zoom = 13;
      }

      // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫ –ø–æ–∑–∏—Ü–∏–∏
      await this._map.setCenter(position.coords, zoom, {
        checkZoomRange: true,
        duration: 500
      });

    } catch (error) {
      console.error('GeolocationControl: –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç—ã:', error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–∞
   * @param {string} type - –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   * @private
   */
  _fireEvent(type, data = {}) {
    if (typeof this.events !== 'undefined' && this.events.fire) {
      this.events.fire(type, {
        target: this,
        supported: this._isSupported,
        state: this._state,
        ...data
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–∞
   * @returns {Object}
   */
  getState() {
    return {
      state: this._state,
      isSupported: this._isSupported,
      position: this._options.position,
      visible: this._options.visible,
      lastKnownPosition: this._lastKnownPosition,
      hasGeoObjects: !!this._geoObjects
    };
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–∞
   * @param {Object} state
   * @returns {Promise<void>}
   */
  async setState(state) {
    if (typeof state !== 'object' || state === null) {
      return;
    }

    if (typeof state.visible === 'boolean') {
      this.setVisible(state.visible);
    }

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏
    if (state.lastKnownPosition && !this._options.noPlacemark) {
      try {
        await this._createGeoObjects(state.lastKnownPosition);
        if (this._options.mapStateAutoApply) {
          await this._applyMapState(state.lastKnownPosition);
        }
      } catch (error) {
        console.error('GeolocationControl: –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:', error);
      }
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∞
   * @param {boolean} visible
   */
  setVisible(visible) {
    this._options.visible = visible;
    
    if (this._button) {
      this._button.style.display = visible ? 'flex' : 'none';
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∞
   * @returns {boolean}
   */
  isVisible() {
    return this._options.visible !== false;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª–∞ –¥–ª—è adjustMapMargin
   * @returns {Array<number>} [width, height]
   */
  getSize() {
    if (!this.isVisible() || !this._isSupported) {
      return [0, 0];
    }
    
    return [this._options.size.width, this._options.size.height];
  }

  /**
   * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–∞
   * @returns {Promise<void>}
   */
  async destroy() {
    try {
      this.clearWatch();
      
      if (this._currentRequest) {
        this._currentRequest.cancel = true;
        this._currentRequest = null;
      }
      
      await this.removeFromMap();
      
      // –û—á–∏—Å—Ç–∫–∞ —Å—Å—ã–ª–æ–∫
      this._button = null;
      this._icon = null;
      this._spinner = null;
      this._geoObjects = null;
      this._map = null;
      this._lastKnownPosition = null;
      
    } catch (error) {
      console.error('GeolocationControl: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏:', error);
      throw error;
    }
  }
}

/**
 * –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è GeolocationControl
 * @param {Object} options - –û–ø—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∞
 * @returns {GeolocationControl}
 */
export function createGeolocationControl(options) {
  return new GeolocationControl(options);
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Geolocation API –≤ –±—Ä–∞—É–∑–µ—Ä–µ
 * @returns {boolean}
 */
export function isGeolocationSupported() {
  return 'geolocation' in navigator && 
         typeof navigator.geolocation.getCurrentPosition === 'function';
}