/// <reference types="react" />
import type { YMapEntity } from '@yandex/ymaps3-types';
import './YMapDrawerControl.css';
export type Position = 'left' | 'right' | 'top' | 'bottom';
export type VerticalTriggerPosition = 'top' | 'center' | 'bottom';
export type HorizontalTriggerPosition = 'left' | 'center' | 'right';
export type YMapDrawerTransitionDurationProps = {
    open: number;
    close: number;
};
export type YMapDrawerContentProps = () => HTMLElement | YMapEntity<unknown>;
export interface YMapDrawerControlProps {
    /** Specifies which side of the map the sidebar opens from (default: "left"). */
    position: Position;
    /** Duration of the open/close animation in milliseconds (default: 500). */
    transitionDuration?: number | YMapDrawerTransitionDurationProps;
    /** Flag indicating whether the drawer is open. Also allows programmatic opening/closing of the drawer. Required parameter. */
    open: boolean;
    /** Fixed width of the drawer. If not specified, the drawer adjusts to the content's width. */
    width?: string | number;
    /** Maximum width of the drawer. */
    maxWidth?: string | number;
    /** Minimum width of the drawer. */
    minWidth?: string | number;
    /** Fixed height of the drawer. If not specified, the drawer adjusts to the content's height. */
    height?: string | number;
    /** Maximum height of the drawer. */
    maxHeight?: string | number;
    /** Minimum height of the drawer. */
    minHeight?: string | number;
    /** Drawer button control lick. */
    onOpenChange?: (open: boolean) => void;
    /** Vertical position of the button that opens the drawer. */
    verticalTriggerPosition?: VerticalTriggerPosition;
    /** Horizontal position of the button that opens the drawer. */
    horizontalTriggerPosition?: HorizontalTriggerPosition;
    /** Function that returns the sidebar's content as an HTMLElement or an entity (YMapEntity) with useDomContext inside. */
    content: YMapDrawerContentProps;
}
declare const defaultProps: Readonly<{
    position: "left";
    transitionDuration: 500;
    verticalTriggerPosition: "center";
    horizontalTriggerPosition: "center";
}>;
type DefaultProps = typeof defaultProps;
export declare class YMapDrawerControl extends ymaps3.YMapComplexEntity<YMapDrawerControlProps, DefaultProps> {
    static defaultProps: Readonly<{
        position: "left";
        transitionDuration: 500;
        verticalTriggerPosition: "center";
        horizontalTriggerPosition: "center";
    }>;
    static [ymaps3.overrideKeyReactify]: import("@yandex/ymaps3-types/reactify/reactify").CustomReactify<YMapDrawerControl, import("react").ForwardRefExoticComponent<{
        position: Position;
        transitionDuration?: number | YMapDrawerTransitionDurationProps;
        verticalTriggerPosition?: VerticalTriggerPosition;
        horizontalTriggerPosition?: HorizontalTriggerPosition;
        open: boolean;
        width?: string | number;
        maxWidth?: string | number;
        minWidth?: string | number;
        height?: string | number;
        maxHeight?: string | number;
        minHeight?: string | number;
        onOpenChange?: (open: boolean) => void;
        content: () => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>;
        ref?: import("react").LegacyRef<YMapEntity<YMapDrawerControlProps, {}>>;
        key?: import("react").Key;
    }>>;
    static [ymaps3.overrideKeyVuefy]: import("@yandex/ymaps3-types/modules/vuefy").CustomVuefyFn<YMapDrawerControl>;
    static [ymaps3.optionsKeyVuefy]: import("@yandex/ymaps3-types/modules/vuefy").CustomVuefyOptions<YMapDrawerControl>;
    private _drawerContainer;
    private _contentEntity;
    private _buttonEntity;
    private get _transitionDuration();
    private get _width();
    private get _minWidth();
    private get _maxWidth();
    private get _height();
    private get _minHeight();
    private get _maxHeight();
    constructor(props: YMapDrawerControlProps);
    protected _onAttach(): void;
    protected _onUpdate(propsDiff: Partial<YMapDrawerControlProps>, oldProps: YMapDrawerControlProps): void;
    protected _onDetach(): void;
    private _updateTransitionDuration;
    private _updateSizes;
}
export {};
