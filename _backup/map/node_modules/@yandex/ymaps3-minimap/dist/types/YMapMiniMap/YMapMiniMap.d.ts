import type { DrawingStyle, YMapCameraRequest, YMapLocationRequest } from '@yandex/ymaps3-types';
import { CustomVuefyOptions } from '@yandex/ymaps3-types/modules/vuefy';
import './index.css';
export interface YMapMiniMapProps {
    /** Size of the mini-map. */
    size?: [number, number];
    /** Difference in zoom levels between the overview map and the main map. */
    zoomOffset?: number;
    /** Zoom range of the mini-map. Can be used to fix the zoom level. */
    zoomRange?: {
        min: number;
        max: number;
    };
    /** Display the boundaries of the main map's visible area on the mini-map. */
    showBounds?: boolean;
    /** Ability to control the main map through the mini-map interface. Moving the mini-map will move the main map. */
    controllable?: boolean;
    /** State of the mini-map: collapsed or expanded. */
    collapsed?: boolean;
    /** Show control for collapsing/expanding the mini-map. */
    showCollapsedControl?: boolean;
    /** Style for rendering the polygon of the main map's visible area boundaries on the mini-map. */
    boundsDrawingStyle?: DrawingStyle;
    /** Fixed center and zoom level of the mini-map, if required. */
    location?: YMapLocationRequest;
    /** Collapse button control click. */
    onCollapsedChange?: (collapse: boolean) => void;
    /** Mini-map camera, if required. By default, the mini-map camera matches the main map's camera. */
    camera?: YMapCameraRequest;
}
declare const defaultProps: Readonly<{
    size: number[];
    zoomOffset: 5;
    showBounds: true;
    collapsed: false;
    showCollapsedControl: true;
    controllable: true;
    boundsDrawingStyle: {
        stroke: {
            color: string;
            width: number;
            opacity: number;
        }[];
        fill: string;
        fillOpacity: number;
    };
}>;
type DefaultProps = typeof defaultProps;
export declare class YMapMiniMap extends ymaps3.YMapGroupEntity<YMapMiniMapProps, DefaultProps> {
    static [ymaps3.optionsKeyVuefy]: CustomVuefyOptions<YMapMiniMap>;
    static defaultProps: Readonly<{
        size: number[];
        zoomOffset: 5;
        showBounds: true;
        collapsed: false;
        showCollapsedControl: true;
        controllable: true;
        boundsDrawingStyle: {
            stroke: {
                color: string;
                width: number;
                opacity: number;
            }[];
            fill: string;
            fillOpacity: number;
        };
    }>;
    private _minimap;
    private _boundsFeature;
    private _button;
    private _controls;
    private _container;
    private _minimapListener;
    private _mapListener;
    private _detachDom;
    private _minimapUpdating;
    private _mapUpdating;
    constructor(props: YMapMiniMapProps);
    private _setLocation;
    private _setCamera;
    private _setSize;
    private _onMapUpdate;
    private _createCollapseButton;
    private _updateCollapseButton;
    private _createCollapsedControl;
    private _updateCollapsedControl;
    private _createBoundsFeature;
    private _updateBoundsFeature;
    private _createMinimapListener;
    private _updateMinimapListener;
    protected _onAttach(): void;
    protected _onUpdate(props: Partial<YMapMiniMapProps>, oldProps: YMapMiniMapProps): void;
    protected _onDetach(): void;
}
export {};
