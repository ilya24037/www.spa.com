---
description: Development Workflow for SPA Platform
globs:
alwaysApply: true
---

# Development Process (–ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)

## üìö –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã: @.aidd/workflow.md
## üìã –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏: @.aidd/tasklist.md

## Workflow (—Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å)
1. Analyze task (–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É)
2. Propose solution (–ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—à–µ–Ω–∏–µ) with code snippets
3. Wait confirmation (–∂–¥–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
4. Implement step-by-step (—Ä–µ–∞–ª–∏–∑—É–π –ø–æ—à–∞–≥–æ–≤–æ)
5. Test immediately (—Ç–µ—Å—Ç–∏—Ä—É–π —Å—Ä–∞–∑—É)
6. Update progress (–æ–±–Ω–æ–≤–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å)
7. Commit with message (–∫–æ–º–º–∏—Ç—å —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º)

## Testing (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
- Unit tests required (—é–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã)
- Edge cases coverage (–ø–æ–∫—Ä—ã—Ç–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
- Error scenarios (—Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ—à–∏–±–æ–∫)

## Project Specific Workflow (—Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–µ–∫—Ç–∞)

### Step-by-Step Implementation (–ø–æ—à–∞–≥–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
1. **Create one file at a time** (—Å–æ–∑–¥–∞–≤–∞–π –ø–æ –æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É)
2. **Wait for user confirmation** (–∂–¥–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
3. **Test immediately after creation** (—Ç–µ—Å—Ç–∏—Ä—É–π —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è)
4. **Only proceed to next file after verification** (–ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)

### File Creation Order (–ø–æ—Ä—è–¥–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤)
1. **Backend first** (—Å–Ω–∞—á–∞–ª–∞ backend):
   - Model (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
   - Migration (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
   - Service class
   - Controller
   - API routes

2. **Frontend second** (–ø–æ—Ç–æ–º frontend):
   - TypeScript interfaces
   - Pinia store
   - Vue components
   - API integration

### Testing Requirements (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é)
- **Backend**: Test API endpoints manually
- **Frontend**: Test in browser with real data
- **Integration**: Verify data flow end-to-end
- **Error handling**: Test validation and error scenarios

### User Interaction (–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
- **Always ask before running terminal commands** (–≤—Å–µ–≥–¥–∞ —Å–ø—Ä–∞—à–∏–≤–∞–π –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∫–æ–º–∞–Ω–¥)
- **Wait for user to execute commands** (–∂–¥–∏ –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏—Ç –∫–æ–º–∞–Ω–¥—ã)
- **Verify results together** (–ø—Ä–æ–≤–µ—Ä—è–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–º–µ—Å—Ç–µ)
- **Only proceed after confirmation** (–ø—Ä–æ–¥–æ–ª–∂–∞–π —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)

## Code Quality Checks (–ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞)

### Before Implementation (–ø–µ—Ä–µ–¥ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π)
- [ ] Task is clearly understood (–∑–∞–¥–∞—á–∞ –ø–æ–Ω—è—Ç–Ω–∞)
- [ ] Solution approach is confirmed (–ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω)
- [ ] Required files are identified (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã)
- [ ] Dependencies are checked (–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)

### During Implementation (–≤–æ –≤—Ä–µ–º—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
- [ ] Code follows project conventions (–∫–æ–¥ —Å–ª–µ–¥—É–µ—Ç –∫–æ–Ω–≤–µ–Ω—Ü–∏—è–º –ø—Ä–æ–µ–∫—Ç–∞)
- [ ] Error handling is implemented (—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫)
- [ ] Input validation is added (–¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
- [ ] Comments are in English (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)

### After Implementation (–ø–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
- [ ] Code is tested manually (–∫–æ–¥ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω –≤—Ä—É—á–Ω—É—é)
- [ ] All functionality works (–≤—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç)
- [ ] No console errors (–Ω–µ—Ç –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏)
- [ ] User confirms success (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É—Å–ø–µ—Ö)

## Communication Rules (–ø—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è)
- **Always respond in Russian** (–≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º)
- **Explain each step in detail** (–æ–±—ä—è—Å–Ω—è–π –∫–∞–∂–¥—ã–π —à–∞–≥ –ø–æ–¥—Ä–æ–±–Ω–æ)
- **Warn about potential issues** (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö)
- **Provide step-by-step instructions** (–¥–∞–≤–∞–π –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏)
- **Wait for user confirmation** (–∂–¥–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)

## Error Handling (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫)
- **Identify the issue** (–æ–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–æ–±–ª–µ–º—É)
- **Explain the root cause** (–æ–±—ä—è—Å–Ω–∏ –ø—Ä–∏—á–∏–Ω—É)
- **Provide step-by-step fix** (–ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ—à–∞–≥–æ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
- **Test the solution** (–ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π —Ä–µ—à–µ–Ω–∏–µ)
- **Document the fix** (–∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
