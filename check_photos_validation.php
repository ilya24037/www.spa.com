<?php
require __DIR__.'/vendor/autoload.php';

use Illuminate\Support\Facades\DB;
use App\Domain\Ad\Models\Ad;

// –ó–∞–≥—Ä—É–∑–∫–∞ Laravel –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
try {
    $app = require_once __DIR__.'/bootstrap/app.php';
    $app->make(\Illuminate\Contracts\Console\Kernel::class)->bootstrap();
} catch (\Throwable $e) {
    echo "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Laravel –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: " . $e->getMessage() . "\n";
    exit(1);
}

echo "üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° –§–û–¢–û–ì–†–ê–§–ò–Ø–ú–ò\n";
echo "=====================================\n\n";

// –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
$latestAd = Ad::latest()->first();

if (!$latestAd) {
    echo "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n";
    exit(0);
}

echo "üìã ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {$latestAd->id}\n";
echo "üìã –°—Ç–∞—Ç—É—Å: " . $latestAd->status->value . "\n\n";

echo "üñºÔ∏è –ü–†–û–í–ï–†–ö–ê –ü–û–õ–Ø PHOTOS –í –ë–î:\n";
echo "------------------------------\n";

// –ü–æ–ª—É—á–∞–µ–º RAW –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—è photos
$rawData = DB::table('ads')->where('id', $latestAd->id)->value('photos');
echo "RAW –¥–∞–Ω–Ω—ã–µ photos: " . (is_string($rawData) ? $rawData : json_encode($rawData)) . "\n";

$decodedPhotos = null;
if (is_string($rawData)) {
    $decodedPhotos = json_decode($rawData, true);
} elseif (is_array($rawData)) {
    $decodedPhotos = $rawData;
}

if (json_last_error() === JSON_ERROR_NONE && is_array($decodedPhotos)) {
    echo "JSON –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: –£–°–ü–ï–®–ù–û\n";
    echo "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ: " . count($decodedPhotos) . "\n";
    echo "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–æ—Ç–æ:\n";
    foreach ($decodedPhotos as $index => $photo) {
        echo "  photos[{$index}]: " . json_encode($photo) . "\n";
        echo "  photos[{$index}] type: " . gettype($photo) . "\n";
        echo "  photos[{$index}] is_array: " . (is_array($photo) ? 'true' : 'false') . "\n";
        if (is_array($photo)) {
            echo "  photos[{$index}] is_empty: " . (empty($photo) ? 'true' : 'false') . "\n";
        }
        echo "\n";
    }
} else {
    echo "JSON –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: –û–®–ò–ë–ö–ê –∏–ª–∏ –ù–ï –ú–ê–°–°–ò–í\n";
    echo "  –û—à–∏–±–∫–∞: " . json_last_error_msg() . "\n";
}

echo "üîç –ü–†–û–í–ï–†–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò:\n";
echo "----------------------\n";

// –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
$testData = [
    'photos' => $decodedPhotos ?? []
];

echo "–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\n";
echo "  photos: " . json_encode($testData['photos']) . "\n";
echo "  photos type: " . gettype($testData['photos']) . "\n";
echo "  photos is_array: " . (is_array($testData['photos']) ? 'true' : 'false') . "\n";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ
if (is_array($testData['photos'])) {
    foreach ($testData['photos'] as $index => $photo) {
        echo "  photos[{$index}]: " . json_encode($photo) . "\n";
        echo "  photos[{$index}] type: " . gettype($photo) . "\n";
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        if (is_string($photo)) {
            echo "  photos[{$index}] validation: ‚úÖ –°–¢–†–û–ö–ê (OK)\n";
        } elseif (is_array($photo) && empty($photo)) {
            echo "  photos[{$index}] validation: ‚ùå –ü–£–°–¢–û–ô –ú–ê–°–°–ò–í (ERROR)\n";
        } else {
            echo "  photos[{$index}] validation: ‚ùå –ù–ï –°–¢–†–û–ö–ê (ERROR)\n";
        }
        echo "\n";
    }
}

echo "‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê\n";
