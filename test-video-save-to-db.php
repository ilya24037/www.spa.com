<?php

use App\Domain\Ad\Models\Ad;

require_once __DIR__ . '/vendor/autoload.php';
$app = require_once __DIR__ . '/bootstrap/app.php';
$kernel = $app->make(Illuminate\Contracts\Http\Kernel::class);
$request = Illuminate\Http\Request::capture();
$response = $kernel->handle($request);

echo "üéØ –¢–ï–°–¢ –°–û–•–†–ê–ù–ï–ù–ò–Ø –í–ò–î–ï–û –í –ë–î\n";
echo "==============================\n\n";

// –ü—Ä–æ–≤–µ—Ä–∏–º —á–µ—Ä–Ω–æ–≤–∏–∫ ID 70
$draft = Ad::find(70);

if ($draft) {
    echo "üìã –ß–µ—Ä–Ω–æ–≤–∏–∫ ID {$draft->id} –Ω–∞–π–¥–µ–Ω\n";
    echo "–ó–∞–≥–æ–ª–æ–≤–æ–∫: {$draft->title}\n\n";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º video –ø–æ–ª–µ
    $videoField = $draft->video;
    echo "üìπ –ü–æ–ª–µ video –≤ –ë–î:\n";
    echo "  –¢–∏–ø: " . gettype($videoField) . "\n";
    
    if (is_string($videoField)) {
        echo "  –ó–Ω–∞—á–µ–Ω–∏–µ (—Å—Ç—Ä–æ–∫–∞): {$videoField}\n";
        
        // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        $decoded = json_decode($videoField, true);
        if (json_last_error() === JSON_ERROR_NONE) {
            echo "  ‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –≤ –º–∞—Å—Å–∏–≤\n";
            echo "  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: " . count($decoded) . "\n";
            foreach ($decoded as $index => $video) {
                echo "    –í–∏–¥–µ–æ $index: $video\n";
            }
        } else {
            echo "  ‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: " . json_last_error_msg() . "\n";
        }
    } elseif (is_array($videoField)) {
        echo "  ‚úÖ –£–∂–µ –º–∞—Å—Å–∏–≤ (JsonFieldsTrait —Ä–∞–±–æ—Ç–∞–µ—Ç)\n";
        echo "  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: " . count($videoField) . "\n";
        foreach ($videoField as $index => $video) {
            echo "    –í–∏–¥–µ–æ $index: $video\n";
        }
    } else {
        echo "  ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö\n";
    }
    
    echo "\n‚ùå –ü–†–û–ë–õ–ï–ú–ê:\n";
    echo "–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫–∞, –∞ –Ω–µ –º–∞—Å—Å–∏–≤.\n";
    echo "–≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ JsonFieldsTrait –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\n";
    
    echo "üîß –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:\n";
    echo "1. –ü–æ–ª–µ 'video' –Ω–µ –≤ –º–∞—Å—Å–∏–≤–µ \$jsonFields –º–æ–¥–µ–ª–∏\n";
    echo "2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏\n";
    echo "3. –î–≤–æ–π–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JSON\n";
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –º–æ–¥–µ–ª—å
    echo "\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏:\n";
    $reflection = new ReflectionClass($draft);
    $property = $reflection->getProperty('jsonFields');
    $property->setAccessible(true);
    $jsonFields = $property->getValue($draft);
    
    if (in_array('video', $jsonFields)) {
        echo "  ‚úÖ –ü–æ–ª–µ 'video' –µ—Å—Ç—å –≤ \$jsonFields\n";
    } else {
        echo "  ‚ùå –ü–æ–ª–µ 'video' –ù–ï–¢ –≤ \$jsonFields!\n";
    }
    
} else {
    echo "‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ —Å ID 70 –Ω–µ –Ω–∞–π–¥–µ–Ω!\n";
}