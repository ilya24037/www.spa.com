/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram Bot
 * –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∏–¥–µ–µ –∏–∑ dosugbar_form
 * 
 * –î–ª—è —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ:
 * 1. –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather
 * 2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å webhook –Ω–∞ –≤–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ
 * 3. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
 */

import { ref, reactive } from 'vue'

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
export const TELEGRAM_BOT_CONFIG = {
  username: 'spa_platform_bot', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
  authUrl: 'https://t.me/', // –ë–∞–∑–æ–≤—ã–π URL Telegram
  webhookUrl: '/api/telegram/webhook', // Endpoint –¥–ª—è webhook
  checkInterval: 2000, // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–º—Å)
  maxCheckTime: 300000, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (5 –º–∏–Ω—É—Ç)
}

// –¢–∏–ø—ã
export interface TelegramUser {
  id: number
  first_name: string
  last_name?: string
  username?: string
  photo_url?: string
  auth_date: number
  hash: string
}

export interface AuthSession {
  token: string
  status: 'pending' | 'authenticated' | 'failed' | 'expired'
  telegramUser?: TelegramUser
  createdAt: Date
  expiresAt: Date
}

// Composable –¥–ª—è Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export const useTelegramAuth = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const isAuthenticating = ref(false)
  const authSession = ref<AuthSession | null>(null)
  const error = ref<string | null>(null)
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏
  const generateAuthToken = (): string => {
    const timestamp = Date.now().toString(36)
    const randomStr = Math.random().toString(36).substring(2, 15)
    return `${timestamp}_${randomStr}`
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ deep link –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const createAuthDeepLink = (token: string): string => {
    const botUsername = TELEGRAM_BOT_CONFIG.username
    const startParam = `auth_${token}`
    return `${TELEGRAM_BOT_CONFIG.authUrl}${botUsername}?start=${startParam}`
  }
  
  // –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const startTelegramAuth = async () => {
    isAuthenticating.value = true
    error.value = null
    
    try {
      // 1. –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      const token = generateAuthToken()
      const response = await fetch('/api/auth/telegram/session', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ token })
      })
      
      if (!response.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
      }
      
      const session = await response.json()
      authSession.value = {
        token: session.token,
        status: 'pending',
        createdAt: new Date(),
        expiresAt: new Date(Date.now() + TELEGRAM_BOT_CONFIG.maxCheckTime)
      }
      
      // 2. –û—Ç–∫—Ä—ã–≤–∞–µ–º Telegram —Å deep link
      const authUrl = createAuthDeepLink(token)
      window.open(authUrl, '_blank')
      
      // 3. –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      pollAuthStatus(token)
      
    } catch (err) {
      error.value = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
      isAuthenticating.value = false
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const pollAuthStatus = (token: string) => {
    let checkCount = 0
    const maxChecks = TELEGRAM_BOT_CONFIG.maxCheckTime / TELEGRAM_BOT_CONFIG.checkInterval
    
    const checkInterval = setInterval(async () => {
      checkCount++
      
      try {
        const response = await fetch(`/api/auth/telegram/check/${token}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        })
        
        if (response.ok) {
          const data = await response.json()
          
          if (data.status === 'authenticated') {
            // –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            clearInterval(checkInterval)
            authSession.value = {
              ...authSession.value!,
              status: 'authenticated',
              telegramUser: data.user
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            localStorage.setItem('auth_token', data.authToken)
            localStorage.setItem('telegram_user', JSON.stringify(data.user))
            
            // –í—ã–∑—ã–≤–∞–µ–º callback —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            onAuthSuccess(data)
            
          } else if (data.status === 'failed') {
            // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞
            clearInterval(checkInterval)
            authSession.value!.status = 'failed'
            error.value = '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
        if (checkCount >= maxChecks) {
          clearInterval(checkInterval)
          authSession.value!.status = 'expired'
          error.value = '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ'
          isAuthenticating.value = false
        }
        
      } catch (err) {
        clearInterval(checkInterval)
        error.value = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞'
        isAuthenticating.value = false
      }
    }, TELEGRAM_BOT_CONFIG.checkInterval)
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const onAuthSuccess = (data: any) => {
    isAuthenticating.value = false
    
    // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ dashboard –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    window.location.href = '/dashboard'
  }
  
  // –û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const cancelAuth = () => {
    isAuthenticating.value = false
    authSession.value = null
    error.value = null
  }
  
  // –í—ã—Ö–æ–¥
  const logout = () => {
    localStorage.removeItem('auth_token')
    localStorage.removeItem('telegram_user')
    authSession.value = null
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const checkExistingAuth = (): TelegramUser | null => {
    const userStr = localStorage.getItem('telegram_user')
    if (userStr) {
      try {
        return JSON.parse(userStr)
      } catch {
        return null
      }
    }
    return null
  }
  
  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isAuthenticating,
    authSession,
    error,
    
    // –ú–µ—Ç–æ–¥—ã
    startTelegramAuth,
    cancelAuth,
    logout,
    checkExistingAuth,
    
    // –ö–æ–Ω—Ñ–∏–≥
    config: TELEGRAM_BOT_CONFIG
  }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram (—Å–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å)
 * –í–ê–ñ–ù–û: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!
 */
export const validateTelegramAuth = (authData: TelegramUser, botToken: string): boolean => {
  // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const checkString = Object.keys(authData)
    .filter(key => key !== 'hash')
    .sort()
    .map(key => `${key}=${authData[key as keyof TelegramUser]}`)
    .join('\n')
  
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º bot token
  // –≠—Ç–æ MUST –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–Ω–µ —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è)
  const authTime = authData.auth_date * 1000
  const currentTime = Date.now()
  const dayInMs = 86400000
  
  if (currentTime - authTime > dayInMs) {
    return false
  }
  
  return true
}

/**
 * –ü—Ä–∏–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ webhook –æ—Ç Telegram –±–æ—Ç–∞
 * (Node.js/Express –ø—Ä–∏–º–µ—Ä)
 */
export const telegramWebhookHandler = `
// server.js
app.post('/api/telegram/webhook', async (req, res) => {
  const update = req.body
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º auth_
  if (update.message?.text?.startsWith('/start auth_')) {
    const token = update.message.text.replace('/start auth_', '')
    const userId = update.message.from.id
    const userName = update.message.from.first_name
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å —Ç–æ–∫–µ–Ω–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    await saveAuthSession(token, {
      telegramId: userId,
      firstName: userName,
      lastName: update.message.from.last_name,
      username: update.message.from.username
    })
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.sendMessage(userId, 
      '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\\n' +
      '–í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.', 
      {
        reply_markup: {
          inline_keyboard: [[
            { text: 'üåê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç', url: 'https://your-spa.com/dashboard' }
          ]]
        }
      }
    )
  }
  
  res.sendStatus(200)
})
`

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
export const TelegramLoginButton = `
<template>
  <button 
    @click="loginWithTelegram"
    class="telegram-login-button"
    :disabled="isAuthenticating"
  >
    <svg class="telegram-icon" viewBox="0 0 24 24">
      <path d="M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm5.894 8.221l-1.97 9.28c-.145.658-.537.818-1.084.508l-3-2.21-1.446 1.394c-.14.18-.357.295-.6.295l.213-3.054 5.56-5.022c.24-.213-.054-.334-.373-.121L8.32 13.617l-2.96-.924c-.64-.203-.658-.64.135-.954l11.566-4.458c.538-.196 1.006.128.832.941z"/>
    </svg>
    <span v-if="!isAuthenticating">–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram</span>
    <span v-else>–û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...</span>
  </button>
</template>

<script setup>
import { useTelegramAuth } from './telegramAuthIntegration'

const { startTelegramAuth, isAuthenticating } = useTelegramAuth()

const loginWithTelegram = () => {
  startTelegramAuth()
}
</script>

<style scoped>
.telegram-login-button {
  display: inline-flex;
  align-items: center;
  gap: 8px;
  padding: 12px 24px;
  background: #0088cc;
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s;
}

.telegram-login-button:hover:not(:disabled) {
  background: #0077b5;
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0, 136, 204, 0.3);
}

.telegram-login-button:disabled {
  opacity: 0.7;
  cursor: not-allowed;
}

.telegram-icon {
  width: 24px;
  height: 24px;
  fill: currentColor;
}
</style>
`