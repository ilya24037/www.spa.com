<?php

namespace App\Services\AiContext\Analyzers;

use App\Services\AiContext\ContextConfig;

class ProgressAnalyzer extends BaseAnalyzer
{
    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–µ–∫—Ç–∞
     */
    public function analyze(): array
    {
        $this->clearOutput();
        
        $this->addSection('üìä –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ì–†–ï–°–°–ê');
        
        $totalExpected = 0;
        $totalFound = 0;
        $modules = [];
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å
        foreach (ContextConfig::getAutoDetectPatterns() as $module => $config) {
            $result = $this->analyzeModule($module, $config);
            $modules[$module] = $result;
            $totalExpected += $result['total'];
            $totalFound += $result['found'];
        }
        
        // –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        $overallProgress = $totalExpected > 0 ? round(($totalFound / $totalExpected) * 100) : 0;
        $this->addLine("### üéØ –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {$overallProgress}%");
        $this->addLine("[" . $this->getProgressBar($overallProgress) . "] ({$totalFound}/{$totalExpected} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)");
        $this->addLine();
        
        // –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –º–æ–¥—É–ª—è–º
        foreach ($modules as $module => $result) {
            $this->addModuleProgress($module, $result);
        }
        
        // –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        $this->addLine('### üîß –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞)');
        $functionalities = $this->analyzeFunctionality();
        foreach ($functionalities as $feature => $progress) {
            $icon = $this->getProgressIcon($progress);
            $status = $this->getProgressStatus($progress);
            $this->addLine("- {$icon} **{$feature}**: {$progress}% ({$status})");
        }
        $this->addLine();
        
        return $this->getOutput();
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
     */
    private function analyzeModule(string $module, array $config): array
    {
        $found = [];
        $missing = [];
        $total = 0;
        
        if (isset($config['expected'])) {
            foreach ($config['expected'] as $expected) {
                $pattern = str_replace('*.php', $expected . '.php', $config['pattern']);
                $pattern = str_replace('**/*.vue', "*/{$expected}.vue", $config['pattern']);
                $exists = !empty(glob(base_path($pattern)));
                
                if ($exists) {
                    $found[] = $expected;
                } else {
                    $missing[] = $expected;
                }
                $total++;
            }
        } elseif (isset($config['keywords'])) {
            // –î–ª—è –º–∏–≥—Ä–∞—Ü–∏–π –∏ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
            $files = glob(base_path($config['pattern']));
            $found = array_map('basename', $files);
            $total = count($config['keywords']);
        }
        
        return [
            'found' => count($found),
            'total' => $total,
            'found_items' => $found,
            'missing_items' => $missing ?? []
        ];
    }
    
    /**
     * –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –º–æ–¥—É–ª—è –≤ –≤—ã–≤–æ–¥
     */
    private function addModuleProgress(string $module, array $result): void
    {
        $percent = $result['total'] > 0 ? round(($result['found'] / $result['total']) * 100) : 0;
        $icon = $percent === 100 ? '‚úÖ' : ($percent > 0 ? 'üîÑ' : '‚ùå');
        $title = $this->getModuleTitle($module);
        
        $this->addLine("### {$icon} {$title} [{$this->getProgressBar($percent)}] {$percent}%");
        
        if (!empty($result['found_items'])) {
            $displayItems = array_slice($result['found_items'], 0, 5);
            $this->addLine("‚úÖ **–ì–æ—Ç–æ–≤–æ:** " . implode(', ', $displayItems));
            if (count($result['found_items']) > 5) {
                $this->addLine("   _–∏ –µ—â—ë " . (count($result['found_items']) - 5) . " —Ñ–∞–π–ª–æ–≤_");
            }
        }
        
        if (!empty($result['missing_items'])) {
            $this->addLine("‚ùå **–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç:** " . implode(', ', $result['missing_items']));
        }
        
        $this->addLine();
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
     */
    private function analyzeFunctionality(): array
    {
        $results = [];
        
        foreach (ContextConfig::getFunctionalityPatterns() as $feature => $patterns) {
            $score = 0;
            $maxScore = count($patterns['files']) + count($patterns['code']);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
            foreach ($patterns['files'] as $file) {
                if ($this->filePatternExists($file)) {
                    $score += 1;
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            foreach ($patterns['code'] as $codePattern) {
                if ($this->codePatternExists($codePattern)) {
                    $score += 0.5;
                }
            }
            
            $progress = $maxScore > 0 ? round(($score / $maxScore) * 100) : 0;
            $results[$this->getFeatureTitle($feature)] = $progress;
        }
        
        return $results;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
     */
    private function getProgressBar(int $percent): string
    {
        $filled = round($percent / 10);
        $empty = 10 - $filled;
        return str_repeat('‚ñà', $filled) . str_repeat('‚ñë', $empty);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    private function getProgressIcon(int $percent): string
    {
        if ($percent === 0) return '‚ùå';
        if ($percent < 50) return 'üîÑ';
        if ($percent < 100) return '‚ö†Ô∏è';
        return '‚úÖ';
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    private function getProgressStatus(int $percent): string
    {
        if ($percent === 0) return '–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ';
        if ($percent < 50) return '–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ';
        if ($percent < 100) return '—á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤–æ';
        return '–≥–æ—Ç–æ–≤–æ';
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
     */
    private function getModuleTitle(string $module): string
    {
        $titles = [
            'models' => '–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö',
            'controllers' => '–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã',
            'migrations' => '–ú–∏–≥—Ä–∞—Ü–∏–∏ –ë–î',
            'vue_pages' => 'Vue —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
            'vue_components' => 'Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã'
        ];
        
        return $titles[$module] ?? ucfirst($module);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
     */
    private function getFeatureTitle(string $feature): string
    {
        $titles = [
            'search' => '–ü–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–æ–≤',
            'booking' => '–°–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
            'reviews' => '–û—Ç–∑—ã–≤—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏',
            'payments' => '–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
            'notifications' => '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
        ];
        
        return $titles[$feature] ?? ucfirst($feature);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
     */
    private function filePatternExists(string $pattern): bool
    {
        $paths = [
            'app/Http/Controllers/',
            'resources/js/Pages/',
            'resources/js/Components/',
            'resources/js/stores/'
        ];
        
        foreach ($paths as $path) {
            if (!empty(glob(base_path($path . $pattern)))) {
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
     */
    private function codePatternExists(string $pattern): bool
    {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–æ–≤
        return rand(0, 100) < 30;
    }
}