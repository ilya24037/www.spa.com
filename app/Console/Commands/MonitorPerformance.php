<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Infrastructure\Monitoring\MetricsCollectorService;
use App\Infrastructure\Monitoring\MetricsDisplayService;
use App\Infrastructure\Monitoring\PerformanceReportService;

class MonitorPerformance extends Command
{
    protected $signature = 'app:monitor-performance 
                            {--realtime : Monitor in real-time}
                            {--report : Generate performance report}';

    protected $description = '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è';

    private MetricsCollectorService $metricsCollector;
    private MetricsDisplayService $metricsDisplay;
    private PerformanceReportService $reportService;
    private array $metrics = [];

    public function __construct()
    {
        parent::__construct();
        
        $this->metricsCollector = new MetricsCollectorService();
        $this->metricsDisplay = new MetricsDisplayService($this);
        $this->reportService = new PerformanceReportService($this->metricsCollector, $this);
    }

    public function handle()
    {
        if ($this->option('realtime')) {
            $this->monitorRealtime();
        } elseif ($this->option('report')) {
            $this->reportService->generateReport();
        } else {
            $this->showCurrentMetrics();
        }
    }

    protected function monitorRealtime()
    {
        $this->metricsDisplay->showRealtimeHeader();
        
        while (true) {
            $this->metricsDisplay->clearScreen();
            $metrics = $this->metricsCollector->collectAllMetrics();
            $this->metricsDisplay->displayMetrics($metrics);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            $warnings = $this->reportService->checkThresholds($metrics);
            if (!empty($warnings)) {
                $this->newLine();
                $this->error('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
                foreach ($warnings as $warning) {
                    $this->warn($warning['message']);
                }
            }
            
            sleep(5);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
     */
    protected function showCurrentMetrics()
    {
        $metrics = $this->metricsCollector->collectAllMetrics();
        $this->metricsDisplay->displayMetrics($metrics);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        $warnings = $this->reportService->checkThresholds($metrics);
        if (!empty($warnings)) {
            $this->newLine();
            $this->error('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
            foreach ($warnings as $warning) {
                $this->warn($warning['message']);
            }
        }
    }

    /**
     * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ MetricsCollectorService::collectDatabaseMetrics()
     */
    protected function collectDatabaseMetrics(): array
    {
        return $this->metricsCollector->collectDatabaseMetrics();
    }

    /**
     * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ MetricsCollectorService::collectCacheMetrics()
     */
    protected function collectCacheMetrics(): array
    {
        return $this->metricsCollector->collectCacheMetrics();
    }

    /**
     * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ MetricsCollectorService::collectMemoryMetrics()
     */
    protected function collectMemoryMetrics(): array
    {
        return $this->metricsCollector->collectMemoryMetrics();
    }

    /**
     * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ MetricsCollectorService::collectRequestMetrics()
     */
    protected function collectRequestMetrics(): array
    {
        return $this->metricsCollector->collectRequestMetrics();
    }

    /**
     * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ MetricsCollectorService::collectQueueMetrics()
     */
    protected function collectQueueMetrics(): array
    {
        return $this->metricsCollector->collectQueueMetrics();
    }

    protected function displayMetrics()
    {
        $this->newLine();
        $this->info('=== –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ===');
        $this->info('–í—Ä–µ–º—è: ' . $this->metrics['timestamp']);
        $this->newLine();

        // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        $this->comment('üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:');
        $this->table(
            ['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
            [
                ['–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', $this->metrics['database']['connections']],
                ['–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã', $this->metrics['database']['slow_queries']],
                ['–ó–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫', $this->metrics['database']['queries_per_second']],
                ['–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞', $this->metrics['database']['avg_query_time'] . ' –º—Å'],
            ]
        );

        // –ö–µ—à
        $this->comment('üíæ –ö–µ—à:');
        $this->table(
            ['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
            [
                ['Hit Rate', $this->metrics['cache']['hit_rate'] . '%'],
                ['–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏', $this->metrics['cache']['memory_usage']],
                ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π', $this->metrics['cache']['keys_count']],
                ['–í—ã—Ç–µ—Å–Ω–µ–Ω–æ –∫–ª—é—á–µ–π', $this->metrics['cache']['evictions']],
            ]
        );

        // –ü–∞–º—è—Ç—å
        $this->comment('üß† –ü–∞–º—è—Ç—å:');
        $this->table(
            ['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
            [
                ['–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ', $this->metrics['memory']['current']],
                ['–ü–∏–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ', $this->metrics['memory']['peak']],
                ['–õ–∏–º–∏—Ç', $this->metrics['memory']['limit']],
                ['–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ %', $this->metrics['memory']['usage_percent'] . '%'],
            ]
        );

        // –ó–∞–ø—Ä–æ—Å—ã
        if ($this->metrics['requests']['total_today'] > 0) {
            $this->comment('üåê –ó–∞–ø—Ä–æ—Å—ã:');
            $this->table(
                ['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
                [
                    ['–í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è', $this->metrics['requests']['total_today']],
                    ['–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞', $this->metrics['requests']['avg_response_time'] . ' –º—Å'],
                    ['–ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫', $this->metrics['requests']['error_rate'] . '%'],
                    ['–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', $this->metrics['requests']['active_users']],
                ]
            );
        }

        // –û—á–µ—Ä–µ–¥–∏
        $this->comment('üì¨ –û—á–µ—Ä–µ–¥–∏:');
        $this->table(
            ['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
            [
                ['–í –æ–∂–∏–¥–∞–Ω–∏–∏', $this->metrics['queue']['pending']],
                ['–ü—Ä–æ–≤–∞–ª–µ–Ω–æ', $this->metrics['queue']['failed']],
                ['–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è', $this->metrics['queue']['processed_today']],
                ['–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è', $this->metrics['queue']['avg_wait_time'] . ' —Å–µ–∫'],
            ]
        );

        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        $this->checkThresholds();
    }

    /**
     * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PerformanceReportService::checkThresholds()
     */
    protected function checkThresholds()
    {
        $warnings = $this->reportService->checkThresholds($this->metrics);
        
        if (!empty($warnings)) {
            $this->newLine();
            $this->error('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
            foreach ($warnings as $warning) {
                $this->warn($warning['message']);
            }
        }
    }

    /**
     * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PerformanceReportService::generateReport()
     */
    protected function generateReport()
    {
        return $this->reportService->generateReport();
    }

    /**
     * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ MetricsCollectorService::collectDetailedMetrics()
     */
    protected function collectDetailedMetrics(): array
    {
        return $this->metricsCollector->collectDetailedMetrics();
    }

    /**
     * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PerformanceReportService::getTopSlowQueries()
     */
    protected function getTopSlowQueries(): array
    {
        return $this->reportService->getTopSlowQueries();
    }

    /**
     * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PerformanceReportService::getTopMemoryConsumers()
     */
    protected function getTopMemoryConsumers(): array
    {
        return $this->reportService->getTopMemoryConsumers();
    }

    /**
     * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PerformanceReportService::generateRecommendations()
     */
    protected function generateRecommendations(): array
    {
        return $this->reportService->generateRecommendations();
    }

    /**
     * @deprecated –≠—Ç–∏ –º–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ MetricsCollectorService
     */
}