<?php

namespace App\Console\Commands\Performance;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Http;
use App\Services\Performance\CacheService;

/**
 * –ö–æ–º–∞–Ω–¥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –∫–∞–∫ —É Wildberries
 */
class PerformanceMonitorCommand extends Command
{
    /**
     * The name and signature of the console command.
     */
    protected $signature = 'performance:monitor 
                          {--url=/ : URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏}
                          {--runs=5 : –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–æ–Ω–æ–≤}
                          {--detailed : –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç}';

    /**
     * The console command description.
     */
    protected $description = '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è';

    /**
     * –°–µ—Ä–≤–∏—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private CacheService $cacheService;

    public function __construct(CacheService $cacheService)
    {
        parent::__construct();
        $this->cacheService = $cacheService;
    }

    /**
     * Execute the console command.
     */
    public function handle(): int
    {
        $this->info('üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SPA Platform');
        $this->newLine();

        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        $url = $this->option('url');
        $runs = (int) $this->option('runs');
        $detailed = $this->option('detailed');

        // –ü—Ä–æ–≤–µ—Ä–∫–∏
        $results = [
            'database' => $this->checkDatabasePerformance(),
            'cache' => $this->checkCachePerformance(),
            'http' => $this->checkHttpPerformance($url, $runs),
            'memory' => $this->checkMemoryUsage(),
            'disk' => $this->checkDiskUsage(),
        ];

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        $this->displayResults($results, $detailed);

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        $this->showOptimizationRecommendations($results);

        return Command::SUCCESS;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    private function checkDatabasePerformance(): array
    {
        $this->info('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î...');

        $startTime = microtime(true);
        
        // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        $queries = [
            'users_count' => fn() => DB::table('users')->count(),
            'ads_count' => fn() => DB::table('ads')->count(),
            'masters_active' => fn() => DB::table('master_profiles')
                ->where('status', 'active')
                ->count(),
            'complex_join' => fn() => DB::table('ads')
                ->join('master_profiles', 'ads.user_id', '=', 'master_profiles.user_id')
                ->select('ads.id', 'master_profiles.display_name')
                ->limit(10)
                ->get(),
        ];

        $results = [];
        $totalQueries = 0;

        foreach ($queries as $name => $query) {
            $queryStart = microtime(true);
            
            try {
                $result = $query();
                $duration = (microtime(true) - $queryStart) * 1000;
                
                $results[$name] = [
                    'duration_ms' => round($duration, 2),
                    'status' => 'success',
                    'result_count' => is_countable($result) ? count($result) : (is_numeric($result) ? $result : 1)
                ];
                
                $totalQueries++;
                
            } catch (\Exception $e) {
                $results[$name] = [
                    'duration_ms' => 0,
                    'status' => 'error',
                    'error' => $e->getMessage()
                ];
            }
        }

        $totalTime = (microtime(true) - $startTime) * 1000;

        return [
            'total_time_ms' => round($totalTime, 2),
            'queries_count' => $totalQueries,
            'avg_query_time_ms' => $totalQueries > 0 ? round($totalTime / $totalQueries, 2) : 0,
            'queries' => $results,
            'status' => $totalTime < 100 ? 'excellent' : ($totalTime < 500 ? 'good' : 'needs_optimization')
        ];
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–µ—à–∞
     */
    private function checkCachePerformance(): array
    {
        $this->info('üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–µ—à–∞...');

        $startTime = microtime(true);
        
        // –¢–µ—Å—Ç–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–µ—à–µ–º
        $testKey = 'performance_test_' . time();
        $testData = ['test' => 'data', 'timestamp' => time()];

        $operations = [];

        // –ó–∞–ø–∏—Å—å –≤ –∫–µ—à
        $writeStart = microtime(true);
        Cache::put($testKey, $testData, 300);
        $operations['write'] = (microtime(true) - $writeStart) * 1000;

        // –ß—Ç–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞
        $readStart = microtime(true);
        $cached = Cache::get($testKey);
        $operations['read'] = (microtime(true) - $readStart) * 1000;

        // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞
        $deleteStart = microtime(true);
        Cache::forget($testKey);
        $operations['delete'] = (microtime(true) - $deleteStart) * 1000;

        $totalTime = (microtime(true) - $startTime) * 1000;

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞
        $cacheStats = $this->cacheService->getCacheStats();

        return [
            'total_time_ms' => round($totalTime, 2),
            'operations' => array_map(fn($time) => round($time, 2), $operations),
            'cache_stats' => $cacheStats,
            'status' => $totalTime < 10 ? 'excellent' : ($totalTime < 50 ? 'good' : 'needs_optimization')
        ];
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    private function checkHttpPerformance(string $url, int $runs): array
    {
        $this->info("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ({$runs} –∑–∞–ø—Ä–æ—Å–æ–≤)...");

        $baseUrl = config('app.url');
        $fullUrl = $baseUrl . $url;
        
        $times = [];
        $errors = 0;

        for ($i = 0; $i < $runs; $i++) {
            $startTime = microtime(true);
            
            try {
                $response = Http::timeout(10)->get($fullUrl);
                $duration = (microtime(true) - $startTime) * 1000;
                
                if ($response->successful()) {
                    $times[] = $duration;
                } else {
                    $errors++;
                }
                
            } catch (\Exception $e) {
                $errors++;
            }
        }

        if (empty($times)) {
            return [
                'status' => 'error',
                'error' => '–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –æ—à–∏–±–∫–æ–π',
                'errors_count' => $errors
            ];
        }

        $avgTime = array_sum($times) / count($times);
        $minTime = min($times);
        $maxTime = max($times);

        return [
            'url' => $url,
            'runs' => $runs,
            'avg_time_ms' => round($avgTime, 2),
            'min_time_ms' => round($minTime, 2),
            'max_time_ms' => round($maxTime, 2),
            'errors_count' => $errors,
            'success_rate' => round((count($times) / $runs) * 100, 1),
            'status' => $avgTime < 100 ? 'excellent' : ($avgTime < 500 ? 'good' : 'needs_optimization')
        ];
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
     */
    private function checkMemoryUsage(): array
    {
        $this->info('üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...');

        $memoryUsage = memory_get_usage(true);
        $memoryPeak = memory_get_peak_usage(true);
        $memoryLimit = $this->parseMemoryLimit(ini_get('memory_limit'));

        return [
            'current_mb' => round($memoryUsage / 1024 / 1024, 2),
            'peak_mb' => round($memoryPeak / 1024 / 1024, 2),
            'limit_mb' => round($memoryLimit / 1024 / 1024, 2),
            'usage_percent' => round(($memoryPeak / $memoryLimit) * 100, 1),
            'status' => ($memoryPeak / $memoryLimit) < 0.7 ? 'good' : 'high'
        ];
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞
     */
    private function checkDiskUsage(): array
    {
        $this->info('üíΩ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞...');

        $storagePath = storage_path();
        $totalBytes = disk_total_space($storagePath);
        $freeBytes = disk_free_space($storagePath);
        $usedBytes = $totalBytes - $freeBytes;

        return [
            'total_gb' => round($totalBytes / 1024 / 1024 / 1024, 2),
            'used_gb' => round($usedBytes / 1024 / 1024 / 1024, 2),
            'free_gb' => round($freeBytes / 1024 / 1024 / 1024, 2),
            'usage_percent' => round(($usedBytes / $totalBytes) * 100, 1),
            'status' => ($usedBytes / $totalBytes) < 0.8 ? 'good' : 'warning'
        ];
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    private function displayResults(array $results, bool $detailed): void
    {
        $this->newLine();
        $this->info('üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò');
        $this->line('===============================================');

        // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        $db = $results['database'];
        $this->line("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {$this->getStatusEmoji($db['status'])} {$db['total_time_ms']}–º—Å");
        
        if ($detailed) {
            $this->line("   ‚îî‚îÄ‚îÄ –ó–∞–ø—Ä–æ—Å–æ–≤: {$db['queries_count']}");
            $this->line("   ‚îî‚îÄ‚îÄ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {$db['avg_query_time_ms']}–º—Å");
        }

        // –ö–µ—à
        $cache = $results['cache'];
        $this->line("üíæ –ö–µ—à: {$this->getStatusEmoji($cache['status'])} {$cache['total_time_ms']}–º—Å");
        
        if ($detailed) {
            $this->line("   ‚îî‚îÄ‚îÄ –î—Ä–∞–π–≤–µ—Ä: {$cache['cache_stats']['driver']}");
            if (isset($cache['cache_stats']['memory_used'])) {
                $this->line("   ‚îî‚îÄ‚îÄ –ü–∞–º—è—Ç—å: {$cache['cache_stats']['memory_used']}");
            }
        }

        // HTTP
        $http = $results['http'];
        if ($http['status'] !== 'error') {
            $this->line("üåê HTTP: {$this->getStatusEmoji($http['status'])} {$http['avg_time_ms']}–º—Å");
            
            if ($detailed) {
                $this->line("   ‚îî‚îÄ‚îÄ –ú–∏–Ω/–ú–∞–∫—Å: {$http['min_time_ms']}/{$http['max_time_ms']}–º—Å");
                $this->line("   ‚îî‚îÄ‚îÄ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {$http['success_rate']}%");
            }
        } else {
            $this->line("üåê HTTP: ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
        }

        // –ü–∞–º—è—Ç—å
        $memory = $results['memory'];
        $this->line("üß† –ü–∞–º—è—Ç—å: {$this->getStatusEmoji($memory['status'])} {$memory['current_mb']}–ú–ë ({$memory['usage_percent']}%)");

        // –î–∏—Å–∫
        $disk = $results['disk'];
        $this->line("üíΩ –î–∏—Å–∫: {$this->getStatusEmoji($disk['status'])} {$disk['used_gb']}–ì–ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ({$disk['usage_percent']}%)");

        $this->newLine();
        $this->line('===============================================');
    }

    /**
     * –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
     */
    private function showOptimizationRecommendations(array $results): void
    {
        $this->info('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò');
        $this->line('===============================');

        $recommendations = [];

        // –ë–î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if ($results['database']['status'] === 'needs_optimization') {
            $recommendations[] = 'üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–¥–ª–µ–Ω–Ω–∞—è - –¥–æ–±–∞–≤—å—Ç–µ –∏–Ω–¥–µ–∫—Å—ã, –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã';
        }

        // –ö–µ—à —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if ($results['cache']['status'] === 'needs_optimization') {
            $recommendations[] = 'üíæ –ö–µ—à –º–µ–¥–ª–µ–Ω–Ω—ã–π - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ Redis –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫–µ—à–∞';
        }

        // HTTP —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (isset($results['http']['status']) && $results['http']['status'] === 'needs_optimization') {
            $recommendations[] = 'üåê HTTP –º–µ–¥–ª–µ–Ω–Ω—ã–π - –≤–∫–ª—é—á–∏—Ç–µ —Å–∂–∞—Ç–∏–µ, –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è';
            $recommendations[] = '‚ö° –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CDN –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤';
        }

        // –ü–∞–º—è—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if ($results['memory']['status'] === 'high') {
            $recommendations[] = 'üß† –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–≥–∏–Ω–∞—Ü–∏—é';
        }

        // –î–∏—Å–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if ($results['disk']['status'] === 'warning') {
            $recommendations[] = 'üíΩ –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ - –æ—á–∏—Å—Ç–∏—Ç–µ –ª–æ–≥–∏, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–æ—Ç–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤';
        }

        // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ Wildberries
        $recommendations[] = 'üöÄ –î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è <100–º—Å –∫–∞–∫ —É Wildberries:';
        $recommendations[] = '   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Redis –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è';
        $recommendations[] = '   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ CDN –¥–ª—è —Å—Ç–∞—Ç–∏–∫–∏';
        $recommendations[] = '   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (WebP, –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å)';
        $recommendations[] = '   ‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ HTTP/2 –∏ —Å–∂–∞—Ç–∏–µ';
        $recommendations[] = '   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤';

        foreach ($recommendations as $recommendation) {
            $this->line($recommendation);
        }

        $this->newLine();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
     */
    private function getStatusEmoji(string $status): string
    {
        return match ($status) {
            'excellent' => 'üü¢',
            'good' => 'üü°',
            'needs_optimization', 'high', 'warning' => 'üî¥',
            'error' => '‚ùå',
            default => '‚ö™'
        };
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –ª–∏–º–∏—Ç–∞ –ø–∞–º—è—Ç–∏
     */
    private function parseMemoryLimit(string $limit): int
    {
        $limit = trim($limit);
        $last = strtolower($limit[strlen($limit) - 1]);
        $limit = (int) $limit;

        switch ($last) {
            case 'g':
                $limit *= 1024;
            case 'm':
                $limit *= 1024;
            case 'k':
                $limit *= 1024;
        }

        return $limit;
    }
}