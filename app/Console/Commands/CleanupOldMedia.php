<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Domain\Ad\Models\Ad;
use Illuminate\Support\Facades\Storage;
use Carbon\Carbon;

class CleanupOldMedia extends Command
{
    protected $signature = 'media:cleanup {--days=365 : –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π} {--drafts-only : –£–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤}';
    protected $description = '–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤';

    public function handle()
    {
        $days = $this->option('days');
        $this->info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ä—à–µ {$days} –¥–Ω–µ–π...");
        
        $deletedPhotos = 0;
        $deletedVideos = 0;
        $freedSpace = 0;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —á–∏—Å—Ç–∏—Ç—å
        $query = Ad::where('updated_at', '<', Carbon::now()->subDays($days));
        
        if ($this->option('drafts-only')) {
            $query->where('status', 'draft');
        } else {
            // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            $query->whereIn('status', ['draft', 'expired', 'deleted', 'blocked']);
        }
        
        $oldAds = $query->get();
            
        foreach ($oldAds as $draft) {
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ç–æ
            if ($draft->photos) {
                $photos = json_decode($draft->photos, true);
                foreach ($photos as $photo) {
                    $path = str_replace('/storage/', '', $photo);
                    if (Storage::disk('public')->exists($path)) {
                        $freedSpace += Storage::disk('public')->size($path);
                        Storage::disk('public')->delete($path);
                        $deletedPhotos++;
                    }
                }
                $draft->photos = json_encode([]);
            }
            
            // –û—á–∏—â–∞–µ–º –≤–∏–¥–µ–æ
            if ($draft->video) {
                $videos = json_decode($draft->video, true);
                foreach ($videos as $video) {
                    $path = str_replace('/storage/', '', $video);
                    if (Storage::disk('public')->exists($path)) {
                        $freedSpace += Storage::disk('public')->size($path);
                        Storage::disk('public')->delete($path);
                        $deletedVideos++;
                    }
                }
                $draft->video = json_encode([]);
            }
            
            $draft->save();
        }
        
        // –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∞–π–ª—ã
        $this->cleanupOrphanedFiles($deletedPhotos, $deletedVideos, $freedSpace);
        
        $freedSpaceMB = round($freedSpace / 1024 / 1024, 2);
        
        $this->info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
        $this->info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
        $this->info("  - –£–¥–∞–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {$deletedPhotos}");
        $this->info("  - –£–¥–∞–ª–µ–Ω–æ –≤–∏–¥–µ–æ: {$deletedVideos}");
        $this->info("  - –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {$freedSpaceMB} MB");
    }
    
    private function cleanupOrphanedFiles(&$deletedPhotos, &$deletedVideos, &$freedSpace)
    {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∞–π–ª—ã
        $usedFiles = [];
        
        Ad::whereNotNull('photos')->orWhereNotNull('video')->chunk(100, function($ads) use (&$usedFiles) {
            foreach ($ads as $ad) {
                if ($ad->photos) {
                    $photos = json_decode($ad->photos, true);
                    foreach ($photos as $photo) {
                        $usedFiles[] = basename($photo);
                    }
                }
                if ($ad->video) {
                    $videos = json_decode($ad->video, true);
                    foreach ($videos as $video) {
                        $usedFiles[] = basename($video);
                    }
                }
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É —Å —Ñ–æ—Ç–æ
        $photosPath = 'ads/photos';
        $photoFiles = Storage::disk('public')->files($photosPath);
        
        foreach ($photoFiles as $file) {
            $filename = basename($file);
            if (!in_array($filename, $usedFiles)) {
                $freedSpace += Storage::disk('public')->size($file);
                Storage::disk('public')->delete($file);
                $deletedPhotos++;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É —Å –≤–∏–¥–µ–æ
        $videosPath = 'ads/videos';
        $videoFiles = Storage::disk('public')->files($videosPath);
        
        foreach ($videoFiles as $file) {
            $filename = basename($file);
            if (!in_array($filename, $usedFiles)) {
                $freedSpace += Storage::disk('public')->size($file);
                Storage::disk('public')->delete($file);
                $deletedVideos++;
            }
        }
    }
}