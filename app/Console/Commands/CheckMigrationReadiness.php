<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;

class CheckMigrationReadiness extends Command
{
    protected $signature = 'app:check-readiness';
    protected $description = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É';

    private array $checks = [];
    private int $passed = 0;
    private int $failed = 0;

    public function handle()
    {
        $this->info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏...');
        $this->newLine();

        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        $this->checkEnvironment();
        $this->checkDatabase();
        $this->checkFiles();
        $this->checkDependencies();
        $this->checkTests();
        $this->checkBackups();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        $this->showResults();

        return $this->failed > 0 ? 1 : 0;
    }

    private function checkEnvironment()
    {
        $this->comment('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...');

        // PHP –≤–µ—Ä—Å–∏—è
        $phpVersion = PHP_VERSION;
        $this->check('PHP >= 8.4', version_compare($phpVersion, '8.4.0', '>='));

        // Laravel –≤–µ—Ä—Å–∏—è
        $laravelVersion = app()->version();
        $this->check('Laravel >= 12.0', version_compare($laravelVersion, '12.0.0', '>='));

        // –†–∞—Å—à–∏—Ä–µ–Ω–∏—è
        $this->check('Redis —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ', extension_loaded('redis'));
        $this->check('OPcache –≤–∫–ª—é—á–µ–Ω', extension_loaded('opcache') && ini_get('opcache.enable'));
    }

    private function checkDatabase()
    {
        $this->comment('–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

        try {
            DB::connection()->getPdo();
            $this->check('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î', true);
        } catch (\Exception $e) {
            $this->check('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î', false);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
        $this->check('–¢–∞–±–ª–∏—Ü–∞ feature_flags', Schema::hasTable('feature_flags'));
        $this->check('–¢–∞–±–ª–∏—Ü–∞ migrations', Schema::hasTable('migrations'));

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ë–î
        $dbSize = DB::select("SELECT SUM(data_length + index_length) / 1024 / 1024 AS size 
                              FROM information_schema.TABLES 
                              WHERE table_schema = ?", [env('DB_DATABASE')])[0]->size ?? 0;
        $this->check('–†–∞–∑–º–µ—Ä –ë–î < 10GB', $dbSize < 10240);
    }

    private function checkFiles()
    {
        $this->comment('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...');

        // –ù–æ–≤—ã–µ –º–æ–¥—É–ª–∏
        $modules = [
            'app/Domain/Booking' => '–ú–æ–¥—É–ª—å Booking',
            'app/Domain/User' => '–ú–æ–¥—É–ª—å User',
            'app/Domain/Search' => '–ú–æ–¥—É–ª—å Search',
            'app/Enums' => 'Enums',
            'app/DTOs' => 'DTOs',
            'app/Repositories' => 'Repositories',
            'app/Services/Adapters' => '–ê–¥–∞–ø—Ç–µ—Ä—ã',
        ];

        foreach ($modules as $path => $name) {
            $this->check($name, is_dir(base_path($path)));
        }

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        $this->check('config/features.php', file_exists(config_path('features.php')));
        $this->check('config/performance.php', file_exists(config_path('performance.php')));
    }

    private function checkDependencies()
    {
        $this->comment('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');

        $composer = json_decode(file_get_contents(base_path('composer.json')), true);
        $required = [
            'laravel/framework' => '^12.0',
            'predis/predis' => '*',
            'elasticsearch/elasticsearch' => '*',
        ];

        foreach ($required as $package => $version) {
            $installed = isset($composer['require'][$package]);
            $this->check("–ü–∞–∫–µ—Ç {$package}", $installed);
        }
    }

    private function checkTests()
    {
        $this->comment('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤
        $testFiles = glob(base_path('tests/Unit/**/*Test.php'));
        $this->check('Unit —Ç–µ—Å—Ç—ã (10+)', count($testFiles) >= 10);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—á–µ—Ç)
        $coverageFile = base_path('coverage/clover.xml');
        if (file_exists($coverageFile)) {
            $coverage = simplexml_load_file($coverageFile);
            $percent = (float) $coverage->project->metrics['@attributes']['coveredstatements'] / 
                      (float) $coverage->project->metrics['@attributes']['statements'] * 100;
            $this->check('–ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏ > 70%', $percent > 70);
        }
    }

    private function checkBackups()
    {
        $this->comment('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        $backupDir = storage_path('backups');
        $lastBackup = null;
        
        if (is_dir($backupDir)) {
            $files = glob($backupDir . '/db_*.sql');
            if (!empty($files)) {
                $lastBackup = max(array_map('filemtime', $files));
            }
        }

        $hasRecentBackup = $lastBackup && (time() - $lastBackup) < 86400; // 24 —á–∞—Å–∞
        $this->check('–°–≤–µ–∂–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ë–î', $hasRecentBackup);
    }

    private function check(string $name, bool $passed)
    {
        $this->checks[] = ['name' => $name, 'passed' => $passed];
        
        if ($passed) {
            $this->passed++;
            $this->info("‚úÖ {$name}");
        } else {
            $this->failed++;
            $this->error("‚ùå {$name}");
        }
    }

    private function showResults()
    {
        $this->newLine();
        $total = $this->passed + $this->failed;
        $percentage = $total > 0 ? round(($this->passed / $total) * 100, 1) : 0;

        $this->info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:");
        $this->line("–ü—Ä–æ–π–¥–µ–Ω–æ: {$this->passed}/{$total} ({$percentage}%)");

        if ($this->failed === 0) {
            $this->newLine();
            $this->info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏!");
            $this->line("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: php artisan app:migrate-modular");
        } else {
            $this->newLine();
            $this->warn("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:");
            
            foreach ($this->checks as $check) {
                if (!$check['passed']) {
                    $this->line("   - {$check['name']}");
                }
            }
            
            $this->newLine();
            $this->line("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –º–∏–≥—Ä–∞—Ü–∏–∏.");
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if ($this->failed > 0) {
            $this->newLine();
            $this->comment("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:");
            
            if (!$this->hasCheck('–°–≤–µ–∂–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ë–î')) {
                $this->line("   - –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: make backup");
            }
            
            if (!$this->hasCheck('Unit —Ç–µ—Å—Ç—ã')) {
                $this->line("   - –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞");
            }
            
            if (!$this->hasCheck('–¢–∞–±–ª–∏—Ü–∞ feature_flags')) {
                $this->line("   - –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: php artisan migrate");
            }
        }
    }

    private function hasCheck(string $name): bool
    {
        foreach ($this->checks as $check) {
            if ($check['name'] === $name && $check['passed']) {
                return true;
            }
        }
        return false;
    }
}