<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;

class ProjectStatus extends Command
{
    protected $signature = 'project:status 
                            {--update= : –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏}
                            {--check : –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã}
                            {--export : –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ñ–∞–π–ª}';
    
    protected $description = '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞';

    private $configPath;
    private $config;
    
    // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    private $autoCheckRules = [
        'models' => [
            'user' => 'app/Models/User.php',
            'master_profile' => 'app/Models/MasterProfile.php',
            'massage_category' => 'app/Models/MassageCategory.php',
            'service' => 'app/Models/Service.php',
            'booking' => 'app/Models/Booking.php',
            'review' => 'app/Models/Review.php',
        ],
        'controllers' => [
            'home' => 'app/Http/Controllers/HomeController.php',
            'master' => 'app/Http/Controllers/MasterController.php',
            'booking' => 'app/Http/Controllers/BookingController.php',
            'search' => 'app/Http/Controllers/SearchController.php',
        ],
        'database' => [
            'master_profiles' => 'database/migrations/*_create_master_profiles_table.php',
            'services' => 'database/migrations/*_create_services_table.php',
            'bookings' => 'database/migrations/*_create_bookings_table.php',
        ],
        'frontend' => [
            'home_page' => 'resources/js/Pages/Home.vue',
            'master_card' => 'resources/js/Components/Masters/MasterCard.vue',
            'booking_form' => 'resources/js/Components/Booking/BookingForm.vue',
            'calendar' => 'resources/js/Components/Booking/Calendar.vue',
        ]
    ];

    public function __construct()
    {
        parent::__construct();
        $this->configPath = config_path('project-status.json');
    }

    public function handle()
    {
        $this->loadConfig();

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if ($this->option('check')) {
            $this->autoCheckProgress();
            $this->info("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!");
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        if ($task = $this->option('update')) {
            $this->updateTaskStatus($task);
            return;
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        $report = $this->generateReport();
        $this->info($report);

        // –≠–∫—Å–ø–æ—Ä—Ç
        if ($this->option('export')) {
            $filename = 'project-report-' . date('Y-m-d') . '.txt';
            File::put(storage_path('app/' . $filename), $report);
            $this->info("\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: storage/app/{$filename}");
        }
    }

    private function autoCheckProgress()
    {
        foreach ($this->autoCheckRules as $module => $tasks) {
            foreach ($tasks as $task => $path) {
                if (!isset($this->config['modules'][$module]['tasks'][$task])) {
                    continue;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                $exists = false;
                if (strpos($path, '*') !== false) {
                    // –î–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (–º–∏–≥—Ä–∞—Ü–∏–∏)
                    $files = glob(base_path($path));
                    $exists = !empty($files);
                } else {
                    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    $exists = File::exists(base_path($path));
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                $this->config['modules'][$module]['tasks'][$task]['done'] = $exists;
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
                if ($exists && $module === 'frontend') {
                    $progress = $this->calculateFileProgress(base_path($path));
                    $this->config['modules'][$module]['tasks'][$task]['progress'] = $progress;
                }
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º
        $this->saveConfig();
    }

    private function calculateFileProgress($filePath)
    {
        if (!File::exists($filePath)) {
            return 0;
        }

        $content = File::get($filePath);
        $progress = 0;

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if (strpos($filePath, '.vue') !== false) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–ª–æ–∫–æ–≤
            if (strpos($content, '<template>') !== false) $progress += 25;
            if (strpos($content, '<script') !== false) $progress += 25;
            if (strpos($content, 'defineProps') !== false) $progress += 15;
            if (strpos($content, '@click') !== false || strpos($content, 'v-model') !== false) $progress += 20;
            if (strpos($content, '<style') !== false) $progress += 15;
        }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º PHP –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
        if (strpos($filePath, 'Controller.php') !== false) {
            if (strpos($content, 'public function index') !== false) $progress += 30;
            if (strpos($content, 'public function store') !== false) $progress += 25;
            if (strpos($content, 'public function show') !== false) $progress += 20;
            if (strpos($content, 'return Inertia::render') !== false) $progress += 25;
        }

        return min($progress, 100);
    }

    private function loadConfig()
    {
        if (!File::exists($this->configPath)) {
            $this->error('–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ config/project-status.json');
            exit(1);
        }

        $this->config = json_decode(File::get($this->configPath), true);
    }

    private function saveConfig()
    {
        File::put($this->configPath, json_encode($this->config, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
    }

    private function updateTaskStatus($taskPath)
    {
        [$module, $task] = explode('.', $taskPath);
        
        if (!isset($this->config['modules'][$module]['tasks'][$task])) {
            $this->error("–ó–∞–¥–∞—á–∞ {$taskPath} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            return;
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        $currentStatus = $this->config['modules'][$module]['tasks'][$task]['done'] ?? false;
        $this->config['modules'][$module]['tasks'][$task]['done'] = !$currentStatus;
        
        $this->saveConfig();
        
        $status = !$currentStatus ? '‚úÖ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ' : '‚ùå –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ';
        $this->info("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {$taskPath} - {$status}");
    }

    private function generateReport()
    {
        $output = [];
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        $output[] = "üìã –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –ü–†–û–ï–ö–¢–ê";
        $output[] = "–î–∞—Ç–∞: " . date('Y-m-d H:i:s');
        $output[] = str_repeat('‚ïê', 50);
        
        // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫
        $output[] = "\nüîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞:";
        foreach ($this->config['project']['stack'] as $key => $value) {
            $output[] = "‚Ä¢ " . ucfirst($key) . ": {$value}";
        }
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –º–æ–¥—É–ª—è–º
        $output[] = "\nüìä –ü–†–û–ì–†–ï–°–° –ü–û –ú–û–î–£–õ–Ø–ú:";
        $totalTasks = 0;
        $completedTasks = 0;
        
        foreach ($this->config['modules'] as $moduleKey => $module) {
            $moduleCompleted = 0;
            $moduleTasks = count($module['tasks']);
            
            foreach ($module['tasks'] as $task) {
                $totalTasks++;
                if ($task['done']) {
                    $moduleCompleted++;
                    $completedTasks++;
                }
            }
            
            $percentage = round(($moduleCompleted / $moduleTasks) * 100);
            $bar = $this->generateProgressBar($percentage);
            
            $output[] = "\n{$module['name']}: {$bar} {$percentage}%";
            
            // –î–µ—Ç–∞–ª–∏
            foreach ($module['tasks'] as $taskKey => $task) {
                $status = $task['done'] ? '‚úÖ' : '‚ùå';
                $progress = isset($task['progress']) ? " ({$task['progress']}%)" : '';
                $output[] = "  {$status} {$task['name']}{$progress}";
            }
        }
        
        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        $overallProgress = round(($completedTasks / $totalTasks) * 100);
        $output[] = "\n" . str_repeat('‚îÄ', 50);
        $output[] = "üìà –û–ë–©–ò–ô –ü–†–û–ì–†–ï–°–°: {$overallProgress}% ({$completedTasks}/{$totalTasks} –∑–∞–¥–∞—á)";
        $output[] = $this->generateProgressBar($overallProgress);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
        $output[] = "\nüìÅ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ê–ô–õ–û–í:";
        $output[] = "‚Ä¢ –ú–∏–≥—Ä–∞—Ü–∏–π: " . count(glob(database_path('migrations/*.php')));
        $output[] = "‚Ä¢ –ú–æ–¥–µ–ª–µ–π: " . count(glob(app_path('Models/*.php')));
        $output[] = "‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤: " . count(glob(app_path('Http/Controllers/*.php')));
        $output[] = "‚Ä¢ Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: " . count(glob(resource_path('js/Components/**/*.vue')));
        $output[] = "‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü: " . count(glob(resource_path('js/Pages/**/*.vue')));
        
        // –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
        $output[] = "\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:";
        foreach ($this->config['next_steps'] as $i => $step) {
            $output[] = ($i + 1) . ". {$step}";
        }
        
        // –ö–æ–º–∞–Ω–¥—ã
        $output[] = "\nüöÄ –ö–û–ú–ê–ù–î–´:";
        $output[] = "php artisan project:status --check     # –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤";
        $output[] = "php artisan project:status --export    # –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞";
        $output[] = "php artisan project:status --update=module.task  # –í—Ä—É—á–Ω—É—é";
        
        return implode("\n", $output);
    }

    private function generateProgressBar($percentage)
    {
        $filled = round($percentage / 10);
        $empty = 10 - $filled;
        
        return '[' . str_repeat('‚ñà', $filled) . str_repeat('‚ñë', $empty) . ']';
    }
}