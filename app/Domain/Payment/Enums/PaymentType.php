<?php

namespace App\Domain\Payment\Enums;

/**
 * –¢–∏–ø—ã –ø–ª–∞—Ç–µ–∂–µ–π
 */
enum PaymentType: string
{
    case SERVICE_PAYMENT = 'service_payment';   // –û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏
    case BOOKING_DEPOSIT = 'booking_deposit';   // –î–µ–ø–æ–∑–∏—Ç –∑–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    case SUBSCRIPTION = 'subscription';         // –ü–æ–¥–ø–∏—Å–∫–∞
    case COMMISSION = 'commission';             // –ö–æ–º–∏—Å—Å–∏—è
    case REFUND = 'refund';                    // –í–æ–∑–≤—Ä–∞—Ç
    case WITHDRAWAL = 'withdrawal';             // –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
    case TOP_UP = 'top_up';                    // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    case PENALTY = 'penalty';                  // –®—Ç—Ä–∞—Ñ
    case BONUS = 'bonus';                      // –ë–æ–Ω—É—Å
    case PROMOTION = 'promotion';              // –ü—Ä–æ–º–æ-–ø–ª–∞—Ç–µ–∂
    case AD_PLACEMENT = 'ad_placement';        // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞
     */
    public function getLabel(): string
    {
        return match($this) {
            self::SERVICE_PAYMENT => '–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏',
            self::BOOKING_DEPOSIT => '–î–µ–ø–æ–∑–∏—Ç –∑–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
            self::SUBSCRIPTION => '–ü–æ–¥–ø–∏—Å–∫–∞',
            self::COMMISSION => '–ö–æ–º–∏—Å—Å–∏—è',
            self::REFUND => '–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤',
            self::WITHDRAWAL => '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤',
            self::TOP_UP => '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
            self::PENALTY => '–®—Ç—Ä–∞—Ñ',
            self::BONUS => '–ë–æ–Ω—É—Å',
            self::PROMOTION => '–ü—Ä–æ–º–æ-–ø–ª–∞—Ç–µ–∂',
            self::AD_PLACEMENT => '–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞
     */
    public function getDescription(): string
    {
        return match($this) {
            self::SERVICE_PAYMENT => '–û—Å–Ω–æ–≤–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∑–∞ –æ–∫–∞–∑–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É',
            self::BOOKING_DEPOSIT => '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –∑–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏',
            self::SUBSCRIPTION => '–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–µ–º–∏—É–º —É—Å–ª—É–≥–∏',
            self::COMMISSION => '–ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —É—Å–ª—É–≥–∏',
            self::REFUND => '–í–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∫–ª–∏–µ–Ω—Ç—É',
            self::WITHDRAWAL => '–í—ã–≤–æ–¥ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –º–∞—Å—Ç–µ—Ä–æ–º',
            self::TOP_UP => '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞',
            self::PENALTY => '–®—Ç—Ä–∞—Ñ–Ω—ã–µ —Å–∞–Ω–∫—Ü–∏–∏ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è',
            self::BONUS => '–ë–æ–Ω—É—Å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
            self::PROMOTION => '–ü–ª–∞—Ç–µ–∂ –ø–æ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏ –∏–ª–∏ —Å–∫–∏–¥–∫–µ',
            self::AD_PLACEMENT => '–û–ø–ª–∞—Ç–∞ –∑–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è UI
     */
    public function getIcon(): string
    {
        return match($this) {
            self::SERVICE_PAYMENT => 'üí≥',
            self::BOOKING_DEPOSIT => 'üè¶',
            self::SUBSCRIPTION => 'üîÑ',
            self::COMMISSION => 'üíº',
            self::REFUND => '‚Ü©Ô∏è',
            self::WITHDRAWAL => 'üí∏',
            self::TOP_UP => 'üí∞',
            self::PENALTY => '‚ö†Ô∏è',
            self::BONUS => 'üéÅ',
            self::PROMOTION => 'üéâ',
            self::AD_PLACEMENT => 'üì¢',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è UI
     */
    public function getColor(): string
    {
        return match($this) {
            self::SERVICE_PAYMENT => '#10B981',    // green
            self::BOOKING_DEPOSIT => '#3B82F6',    // blue
            self::SUBSCRIPTION => '#8B5CF6',       // violet
            self::COMMISSION => '#F59E0B',         // amber
            self::REFUND => '#EF4444',             // red
            self::WITHDRAWAL => '#EC4899',         // pink
            self::TOP_UP => '#059669',             // green-600
            self::PENALTY => '#DC2626',            // red-600
            self::BONUS => '#7C3AED',              // violet-600
            self::PROMOTION => '#F97316',          // orange
            self::AD_PLACEMENT => '#0F766E',       // teal-600
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∏–ø –¥–æ—Ö–æ–¥–æ–º
     */
    public function isIncome(): bool
    {
        return match($this) {
            self::SERVICE_PAYMENT, 
            self::BOOKING_DEPOSIT, 
            self::SUBSCRIPTION,
            self::TOP_UP,
            self::BONUS,
            self::PROMOTION,
            self::AD_PLACEMENT => true,
            default => false,
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∏–ø —Ä–∞—Å—Ö–æ–¥–æ–º
     */
    public function isExpense(): bool
    {
        return match($this) {
            self::COMMISSION, 
            self::REFUND, 
            self::WITHDRAWAL, 
            self::PENALTY => true,
            default => false,
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
     */
    public function requiresApproval(): bool
    {
        return match($this) {
            self::WITHDRAWAL, self::REFUND, self::PENALTY => true,
            default => false,
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ª–∏ –ø–ª–∞—Ç–µ–∂
     */
    public function isAutomatic(): bool
    {
        return match($this) {
            self::COMMISSION, self::SUBSCRIPTION, self::BONUS => true,
            default => false,
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
     */
    public function getCategory(): string
    {
        return match($this) {
            self::SERVICE_PAYMENT, self::BOOKING_DEPOSIT => '–£—Å–ª—É–≥–∏',
            self::SUBSCRIPTION => '–ü–æ–¥–ø–∏—Å–∫–∏',
            self::COMMISSION => '–ö–æ–º–∏—Å—Å–∏–∏',
            self::REFUND => '–í–æ–∑–≤—Ä–∞—Ç—ã',
            self::WITHDRAWAL => '–í—ã–≤–æ–¥—ã',
            self::TOP_UP => '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è',
            self::PENALTY => '–®—Ç—Ä–∞—Ñ—ã',
            self::BONUS => '–ë–æ–Ω—É—Å—ã',
            self::PROMOTION => '–ü—Ä–æ–º–æ',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–ª–æ–≥–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
     */
    public function getTaxCategory(): string
    {
        return match($this) {
            self::SERVICE_PAYMENT, self::BOOKING_DEPOSIT => 'income_service',
            self::COMMISSION => 'expense_commission',
            self::SUBSCRIPTION => 'expense_subscription',
            self::BONUS => 'income_bonus',
            default => 'other',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –≤—ã—à–µ)
     */
    public function getProcessingPriority(): int
    {
        return match($this) {
            self::REFUND => 1,              // –í—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            self::WITHDRAWAL => 2,
            self::SERVICE_PAYMENT => 3,
            self::BOOKING_DEPOSIT => 4,
            self::PENALTY => 5,
            self::COMMISSION => 6,
            self::SUBSCRIPTION => 7,
            self::TOP_UP => 8,
            self::BONUS => 9,
            self::PROMOTION => 10,          // –ù–∏–∑—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø–∏—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–≤ —á–∞—Å–∞—Ö)
     */
    public function getProcessingTimeHours(): int
    {
        return match($this) {
            self::SERVICE_PAYMENT, self::TOP_UP => 0,        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ
            self::BOOKING_DEPOSIT, self::BONUS => 1,         // 1 —á–∞—Å
            self::COMMISSION, self::SUBSCRIPTION => 24,      // 1 –¥–µ–Ω—å
            self::WITHDRAWAL => 72,                          // 3 –¥–Ω—è
            self::REFUND => 168,                            // 7 –¥–Ω–µ–π
            self::PENALTY, self::PROMOTION => 48,           // 2 –¥–Ω—è
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è —Ç–∏–ø–∞
     */
    public function getMinAmount(): float
    {
        return match($this) {
            self::SERVICE_PAYMENT, self::BOOKING_DEPOSIT => 100.0,
            self::SUBSCRIPTION => 299.0,
            self::WITHDRAWAL => 500.0,
            self::TOP_UP => 50.0,
            self::COMMISSION => 1.0,
            self::REFUND => 1.0,
            self::PENALTY => 100.0,
            self::BONUS => 10.0,
            self::PROMOTION => 1.0,
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è —Ç–∏–ø–∞
     */
    public function getMaxAmount(): float
    {
        return match($this) {
            self::SERVICE_PAYMENT => 100000.0,    // 100k
            self::BOOKING_DEPOSIT => 50000.0,     // 50k
            self::SUBSCRIPTION => 9999.0,         // 10k
            self::WITHDRAWAL => 500000.0,         // 500k
            self::TOP_UP => 100000.0,             // 100k
            self::COMMISSION => 50000.0,          // 50k
            self::REFUND => 100000.0,             // 100k
            self::PENALTY => 25000.0,             // 25k
            self::BONUS => 10000.0,               // 10k
            self::PROMOTION => 50000.0,           // 50k
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è —Å—É–º–º—ã
     */
    public function isAvailableForAmount(float $amount): bool
    {
        return $amount >= $this->getMinAmount() && $amount <= $this->getMaxAmount();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è —Ç–∏–ø–∞
     */
    public function getAvailablePaymentMethods(): array
    {
        return match($this) {
            self::SERVICE_PAYMENT, self::BOOKING_DEPOSIT => [
                PaymentMethod::CARD, 
                PaymentMethod::ELECTRONIC, 
                PaymentMethod::CASH
            ],
            self::SUBSCRIPTION, self::TOP_UP => [
                PaymentMethod::CARD, 
                PaymentMethod::ELECTRONIC
            ],
            self::WITHDRAWAL, self::REFUND => [
                PaymentMethod::TRANSFER
            ],
            self::COMMISSION, self::PENALTY, self::BONUS, self::PROMOTION => [
                PaymentMethod::TRANSFER
            ],
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø—ã –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    public static function getUserTypes(): array
    {
        return [
            self::SERVICE_PAYMENT,
            self::BOOKING_DEPOSIT,
            self::SUBSCRIPTION,
            self::TOP_UP,
        ];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø—ã –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
     */
    public static function getMasterTypes(): array
    {
        return [
            self::SERVICE_PAYMENT,
            self::WITHDRAWAL,
            self::COMMISSION,
            self::BONUS,
            self::PENALTY,
        ];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∏–ø—ã –ø–ª–∞—Ç–µ–∂–µ–π
     */
    public static function getSystemTypes(): array
    {
        return [
            self::COMMISSION,
            self::REFUND,
            self::PENALTY,
            self::BONUS,
            self::PROMOTION,
        ];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –ù–î–°
     */
    public static function getVatRequiredTypes(): array
    {
        return [
            self::SERVICE_PAYMENT,
            self::SUBSCRIPTION,
            self::COMMISSION,
        ];
    }

    /**
     * –í—Å–µ —Ç–∏–ø—ã –¥–ª—è –≤—ã–±–æ—Ä–∫–∏
     */
    public static function options(): array
    {
        $types = [];
        foreach (self::cases() as $type) {
            $types[$type->value] = $type->getLabel();
        }
        return $types;
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å fallback
     */
    public static function tryFrom(string $value): ?self
    {
        try {
            return self::from($value);
        } catch (\ValueError) {
            return null;
        }
    }
}