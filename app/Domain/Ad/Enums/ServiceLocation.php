<?php

namespace App\Domain\Ad\Enums;

/**
 * –ú–µ—Å—Ç–∞ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥
 * –î–æ–º–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥
 */
enum ServiceLocation: string
{
    case HOME = 'home';
    case SALON = 'salon';
    case BOTH = 'both';
    case OUTCALL = 'outcall';
    case ONLINE = 'online';

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —É—Å–ª—É–≥
     */
    public function getLabel(): string
    {
        return match($this) {
            self::HOME => '–£ —Å–µ–±—è',
            self::SALON => '–í —Å–∞–ª–æ–Ω–µ',
            self::BOTH => '–£ —Å–µ–±—è –∏ –≤ —Å–∞–ª–æ–Ω–µ',
            self::OUTCALL => '–° –≤—ã–µ–∑–¥–æ–º',
            self::ONLINE => '–û–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
     */
    public function getDescription(): string
    {
        return match($this) {
            self::HOME => '–ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–µ–∑–∂–∞–µ—Ç –∫ –º–∞—Å—Ç–µ—Ä—É –¥–æ–º–æ–π',
            self::SALON => '–£—Å–ª—É–≥–∏ –≤ —Å–∞–ª–æ–Ω–µ –∫—Ä–∞—Å–æ—Ç—ã –∏–ª–∏ —Å—Ç—É–¥–∏–∏',
            self::BOTH => '–í–æ–∑–º–æ–∂–Ω—ã –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏',
            self::OUTCALL => '–ú–∞—Å—Ç–µ—Ä –≤—ã–µ–∑–∂–∞–µ—Ç –∫ –∫–ª–∏–µ–Ω—Ç—É',
            self::ONLINE => '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–Ω–ª–∞–π–Ω',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è UI
     */
    public function getIcon(): string
    {
        return match($this) {
            self::HOME => 'üè†',
            self::SALON => 'üè¢',
            self::BOTH => 'üè†üè¢',
            self::OUTCALL => 'üöó',
            self::ONLINE => 'üíª',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è UI
     */
    public function getColor(): string
    {
        return match($this) {
            self::HOME => '#10B981',      // emerald
            self::SALON => '#3B82F6',     // blue
            self::BOTH => '#8B5CF6',      // violet
            self::OUTCALL => '#F59E0B',   // amber
            self::ONLINE => '#EC4899',    // pink
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –º–µ—Å—Ç–æ —É–∫–∞–∑–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
     */
    public function requiresAddress(): bool
    {
        return match($this) {
            self::HOME, self::SALON, self::BOTH => true,
            self::OUTCALL, self::ONLINE => false,
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –º–µ—Å—Ç–æ —É–∫–∞–∑–∞–Ω–∏–µ –∑–æ–Ω—ã –≤—ã–µ–∑–¥–∞
     */
    public function requiresServiceArea(): bool
    {
        return match($this) {
            self::OUTCALL, self::BOTH => true,
            default => false,
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏
     */
    public function supportsCashPayment(): bool
    {
        return match($this) {
            self::ONLINE => false,
            default => true,
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏
     */
    public function getRecommendedContactMethods(): array
    {
        return match($this) {
            self::HOME, self::SALON => ['phone', 'whatsapp', 'telegram'],
            self::BOTH => ['phone', 'whatsapp', 'telegram', 'email'],
            self::OUTCALL => ['phone', 'whatsapp', 'telegram'],
            self::ONLINE => ['email', 'telegram', 'zoom', 'skype'],
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, —Ç—Ä–µ–±—É–µ–º—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –ª–æ–∫–∞—Ü–∏–∏
     */
    public function getRequiredFields(): array
    {
        return match($this) {
            self::HOME, self::SALON => ['address', 'phone'],
            self::BOTH => ['address', 'phone', 'outcall_areas'],
            self::OUTCALL => ['phone', 'service_areas', 'travel_time'],
            self::ONLINE => ['email', 'online_platforms'],
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ç–∏–ø–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    public function isCompatibleWith(AdType $adType): bool
    {
        return match($this) {
            self::ONLINE => in_array($adType, [
                AdType::WELLNESS,
                AdType::THERAPY,
                AdType::FITNESS,
                AdType::RELAXATION,
            ]),
            default => true, // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å –ª—é–±—ã–º–∏ —Ç–∏–ø–∞–º–∏
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–Ω—ã (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–æ—Ä–æ–∂–µ)
     */
    public function getPriceMultiplier(): float
    {
        return match($this) {
            self::OUTCALL => 1.3,      // –í—ã–µ–∑–¥ –¥–æ—Ä–æ–∂–µ –Ω–∞ 30%
            self::ONLINE => 0.7,       // –û–Ω–ª–∞–π–Ω –¥–µ—à–µ–≤–ª–µ –Ω–∞ 30%
            default => 1.0,
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–µ—Å—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏
     */
    public static function options(): array
    {
        $locations = [];
        foreach (self::cases() as $location) {
            $locations[$location->value] = $location->getLabel();
        }
        return $locations;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
     */
    public static function popularLocations(): array
    {
        return [
            self::SALON,
            self::OUTCALL,
            self::BOTH,
        ];
    }
}