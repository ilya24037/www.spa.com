<?php

namespace App\Domain\Ad\Services;

use App\Domain\Ad\Models\Ad;
use App\Domain\User\Models\User;
use Illuminate\Support\Facades\Log;

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏
 * –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—É KISS - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞
 */
class DraftService
{
    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫
     * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç mixed $adId –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
     */
    public function saveOrUpdate(array $data, User $user, mixed $adId = null): Ad
    {
                // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        $data = $this->prepareData($data);
        $data['user_id'] = $user->id;
        
        // –ü—Ä–∏–≤–æ–¥–∏–º ID –∫ integer –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
        $adId = $adId ? (int) $adId : null;

        // üéØ –õ–û–ì–ò–ö–ê –ö–ê–ö –ù–ê –ê–í–ò–¢–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        if ($adId && $adId > 0) {
            $existingAd = Ad::find($adId);
            if ($existingAd && $existingAd->status !== 'draft') {
                // –ù–µ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö/–º–æ–¥–µ—Ä–∏—Ä—É–µ–º—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                // –û—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö —Å—Ç–∞—Ç—É—Å –∫–∞–∫ –µ—Å—Ç—å
                unset($data['status']);
            } else {
                // –î–ª—è –Ω–æ–≤—ã—Ö –∏–ª–∏ —á–µ—Ä–Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å—Ç–∞–≤–∏–º draft
                $data['status'] = 'draft';
            }
        } else {
            // –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ draft
            $data['status'] = 'draft';
        }

        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ID, –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        if ($adId && $adId > 0) {
            
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            $ad = Ad::where('id', $adId)
                ->where('user_id', $user->id)
                ->first();
                
            if ($ad) {
                $ad->update($data);
                $ad->wasRecentlyCreated = false; // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                return $ad;
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–æ–æ–±—â–µ
            $adWithoutUserCheck = Ad::find($adId);
            if ($adWithoutUserCheck) {
                // –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                
                // –í–ê–ñ–ù–û: –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å
                // –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º, —á—Ç–æ Auth::user() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ —Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (auth()->check() && auth()->id() == $adWithoutUserCheck->user_id) {
                    $adWithoutUserCheck->update($data);
                    $adWithoutUserCheck->wasRecentlyCreated = false;
                    return $adWithoutUserCheck;
                }
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫
        $ad = Ad::create($data);
        $ad->wasRecentlyCreated = true; // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ
        
        return $ad;
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    public function prepareForDisplay(Ad $ad): array
    {
        // ‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–•–û–î–ê
        Log::info("üì∏ DraftService::prepareForDisplay –ù–ê–ß–ê–õ–û", [
            'ad_id' => $ad->id,
            'ad_status' => $ad->status,
            'ad_exists' => $ad->exists,
            'ad_attributes' => $ad->getAttributes(),
            'ad_keys' => array_keys($ad->getAttributes())
        ]);
        
        $data = $ad->toArray();
        
        // –í–ê–ñ–ù–û: –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ ID –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
        $data['id'] = (int) $ad->id;
        
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON –ø–æ–ª—è
        $jsonFields = ['clients', 'services', 'features', 'photos', 'video', 'geo', 'prices', 'schedule', 'faq'];
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ schedule –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (isset($data['schedule'])) {
            Log::info("üìÖ DraftService::prepareForDisplay: –î–∞–Ω–Ω—ã–µ schedule", [
                'schedule_exists' => isset($data['schedule']),
                'schedule_value' => $data['schedule'],
                'schedule_type' => gettype($data['schedule']),
                'schedule_is_string' => is_string($data['schedule']),
                'schedule_is_array' => is_array($data['schedule']),
                'schedule_is_null' => is_null($data['schedule'])
            ]);
        } else {
            Log::info("üìÖ DraftService::prepareForDisplay: –ü–æ–ª–µ schedule –ù–ï –ù–ê–ô–î–ï–ù–û –≤ –¥–∞–Ω–Ω—ã—Ö", [
                'available_fields' => array_keys($data),
                'data_keys_count' => count(array_keys($data))
            ]);
        }
        
        foreach ($jsonFields as $field) {
            if (isset($data[$field]) && is_string($data[$field])) {
                $decoded = json_decode($data[$field], true) ?: [];
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è video –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º URL —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç—ã Video
                if ($field === 'video' && is_array($decoded)) {
                    $videoObjects = [];
                    foreach ($decoded as $index => $videoItem) {
                        if (is_string($videoItem)) {
                            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º URL —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç Video
                            $videoObjects[] = [
                                'id' => 'video_' . $index . '_' . time(),
                                'url' => $videoItem,
                                'file' => null,
                                'isUploading' => false
                            ];
                        } else if (is_array($videoItem)) {
                            // –ï—Å–ª–∏ —É–∂–µ –æ–±—ä–µ–∫—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
                            $videoObjects[] = array_merge([
                                'id' => $videoItem['id'] ?? 'video_' . $index . '_' . time(),
                                'url' => null,
                                'file' => null,
                                'isUploading' => false
                            ], $videoItem);
                        }
                    }
                    $data[$field] = $videoObjects;
                } else {
                    $data[$field] = $decoded;
                }
                
                // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è schedule
                if ($field === 'schedule') {
                    Log::info("üìÖ DraftService::prepareForDisplay: –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è schedule", [
                        'field' => $field,
                        'original_value' => $ad->getAttribute($field),
                        'decoded_value' => $data[$field],
                        'decoded_type' => gettype($data[$field]),
                        'decoded_is_array' => is_array($data[$field])
                    ]);
                }
            }
        }
        
        // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ outcall –ø–æ–ª–µ–π
        // –û–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∫–∞–∫ –≤ prices (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç), —Ç–∞–∫ –∏ –≤ geo (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
        if (isset($data['geo']) && is_array($data['geo'])) {
            // –ü–æ–ª—è –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ geo
            $outcallFields = ['outcall_apartment', 'outcall_hotel', 'outcall_house', 
                           'outcall_sauna', 'outcall_office', 'taxi_included'];
            
            // –ï—Å–ª–∏ –ø–æ–ª—è –µ—Å—Ç—å –≤ prices –Ω–æ –Ω–µ –≤ geo - –ø–µ—Ä–µ–Ω–æ—Å–∏–º (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
            if (isset($data['prices']) && is_array($data['prices'])) {
                foreach ($outcallFields as $field) {
                    if (!isset($data['geo'][$field]) && isset($data['prices'][$field])) {
                        $data['geo'][$field] = $data['prices'][$field];
                    }
                }
            }
            
            // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –≤—Å–µ outcall –ø–æ–ª—è –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π boolean —Ç–∏–ø
            foreach ($outcallFields as $field) {
                if (isset($data['geo'][$field])) {
                    $value = $data['geo'][$field];
                    
                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ boolean
                    if ($value === '1' || $value === 1 || $value === true || $value === 'true') {
                        $data['geo'][$field] = true;
                    } elseif ($value === '0' || $value === 0 || $value === false || $value === 'false' || $value === null) {
                        $data['geo'][$field] = false;
                    } else {
                        $data['geo'][$field] = (bool)$value;
                    }
                }
            }
        }
        
        
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥—Ä—É–≥–∏–µ boolean –ø–æ–ª—è –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
        $topLevelBooleanFields = ['is_starting_price', 'online_booking'];
        foreach ($topLevelBooleanFields as $boolField) {
            if (isset($data[$boolField])) {
                $value = $data[$boolField];
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º '1', 1, true –≤ true; '0', 0, false, null –≤ false
                if ($value === '1' || $value === 1 || $value === true) {
                    $data[$boolField] = true;
                } else {
                    $data[$boolField] = false;
                }
            }
        }
        
        // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ description –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–¥–∞–∂–µ –µ—Å–ª–∏ –ø—É—Å—Ç–æ–µ)
        if (!isset($data['description'])) {
            $data['description'] = '';
        }
        
        // ‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í –ö–û–ù–¶–ï
        Log::info("üì∏ DraftService::prepareForDisplay –ó–ê–í–ï–†–®–ï–ù–û", [
            'final_data_keys' => array_keys($data),
            'final_data_count' => count($data)
        ]);
        
        return $data;
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫
     */
    public function delete(Ad $ad): bool
    {
        // –¢–æ–ª—å–∫–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å
        if ($ad->status !== 'draft') {
            throw new \InvalidArgumentException('–¢–æ–ª—å–∫–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å');
        }
        
        return $ad->delete();
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏—Ö –æ–ø—Ü–∏–π –≤ FAQ
     * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —á—Ç–æ –æ–ø—Ü–∏—è "–ù–µ—Ç" –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω–∞ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –æ–ø—Ü–∏—è–º–∏
     */
    private function validateFaqExclusivity($faq): array
    {
        if (!is_array($faq)) {
            return [];
        }
        
        // –í–æ–ø—Ä–æ—Å—ã —Å –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–µ–π –æ–ø—Ü–∏–µ–π "–ù–µ—Ç" (questionId => value –æ–ø—Ü–∏–∏ "–ù–µ—Ç")
        $exclusiveNoQuestions = [
            'faq_2' => 4, // "–ï—Å—Ç—å –ª–∞—Å–∫–∏ –∏ —Ç–∞–∫—Ç–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç?" - –æ–ø—Ü–∏—è "–ù–µ—Ç"
            'faq_3' => 4  // "–í–æ–∑–º–æ–∂–Ω—ã –≤—Å—Ç—Ä–µ—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ GFE?" - –æ–ø—Ü–∏—è "–ù–µ—Ç"
        ];
        
        foreach ($exclusiveNoQuestions as $questionId => $noValue) {
            if (isset($faq[$questionId]) && is_array($faq[$questionId])) {
                $values = $faq[$questionId];
                
                // –ï—Å–ª–∏ –æ–ø—Ü–∏—è "–ù–µ—Ç" –≤—ã–±—Ä–∞–Ω–∞ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –æ–ø—Ü–∏—è–º–∏
                if (in_array($noValue, $values) && count($values) > 1) {
                    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ "–ù–µ—Ç", —É–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
                    $faq[$questionId] = [$noValue];
                    
                    Log::info("FAQ –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–µ–Ω–∏–µ: –û—á–∏—â–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –æ–ø—Ü–∏–∏", [
                        'question_id' => $questionId,
                        'original_values' => $values,
                        'cleaned_values' => [$noValue]
                    ]);
                }
            }
        }
        
        return $faq;
    }
    
    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    private function prepareData(array $data): array
    {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏—Ö –æ–ø—Ü–∏–π –≤ FAQ
        if (isset($data['faq'])) {
            $data['faq'] = $this->validateFaqExclusivity($data['faq']);
        }
        
        // –ö–æ–¥–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã –≤ JSON
        // –ò—Å–∫–ª—é—á–∞–µ–º 'faq' –∏–∑ —Ä—É—á–Ω–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –º–æ–¥–µ–ª—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ $jsonFields
        $jsonFields = ['clients', 'service_provider', 'services', 'features', 'photos', 'video', 'geo', 'prices', 'schedule'];
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ schedule –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        if (isset($data['schedule'])) {
            Log::info("üìÖ DraftService: –î–∞–Ω–Ω—ã–µ schedule –ø–µ—Ä–µ–¥ JSON –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º", [
                'schedule_data' => $data['schedule'],
                'schedule_type' => gettype($data['schedule']),
                'schedule_is_array' => is_array($data['schedule'])
            ]);
        }
        
        foreach ($jsonFields as $field) {
            if (isset($data[$field])) {
                // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è geo —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                if ($field === 'geo' && is_string($data[$field])) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º JSON
                    $decoded = json_decode($data[$field], true);
                    if (json_last_error() === JSON_ERROR_NONE) {
                        // –≠—Ç–æ —É–∂–µ JSON, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        continue;
                    }
                }
                
                if (!is_string($data[$field])) {
                    // –î–ª—è –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
                    try {
                        $encoded = json_encode($data[$field], JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        if (strlen($encoded) > 65000) { // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è TEXT –ø–æ–ª—è –≤ MySQL
                            // –î–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                            if ($field === 'photos' || $field === 'video') {
                                // –î–ª—è –º–µ–¥–∏–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
                                $data[$field] = '[]';
                            } elseif ($field === 'services' || $field === 'features') {
                                // –î–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —Ñ–∏—á –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç/–º–∞—Å—Å–∏–≤
                                $data[$field] = in_array($field, ['services', 'prices', 'geo']) ? '{}' : '[]';
                            } else {
                                // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                                $data[$field] = in_array($field, ['services', 'prices', 'geo']) ? '{}' : '[]';
                            }
                        } else {
                            $data[$field] = $encoded;
                        }
                        
                        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç JSON –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è schedule
                        if ($field === 'schedule') {
                            Log::info("üìÖ DraftService: –†–µ–∑—É–ª—å—Ç–∞—Ç JSON –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è schedule", [
                                'encoded_schedule' => $data[$field],
                                'encoded_length' => strlen($data[$field])
                            ]);
                        }
                    } catch (\Exception $e) {
                        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        $data[$field] = in_array($field, ['services', 'prices', 'geo']) ? '{}' : '[]';
                    }
                } // –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –¥–ª—è if (!is_string($data[$field]))
            }
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        $data['title'] = $data['title'] ?? '–ß–µ—Ä–Ω–æ–≤–∏–∫';
        
        return $data;
    }
}