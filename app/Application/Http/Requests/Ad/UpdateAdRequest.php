<?php

namespace App\Application\Http\Requests\Ad;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

/**
 * Request –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
 */
class UpdateAdRequest extends FormRequest
{
    /**
     * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
     */
    public function authorize(): bool
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        $ad = $this->route('ad');
        return auth()->check() && auth()->id() === $ad->user_id;
    }


    /**
     * –ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
     */
    public function rules(): array
    {
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–æ—É—Ç–∞
        $ad = $this->route('ad');
        
        // –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–µ - —Å–º—è–≥—á–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        $isActive = $ad && $ad->status === 'active';
        
        \Log::info('üü¢ UpdateAdRequest: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', [
            'ad_id' => $ad?->id,
            'ad_status' => $ad?->status,
            'is_active' => $isActive,
            'validation_mode' => $isActive ? '–ú–Ø–ì–ö–ê–Ø (–∞–∫—Ç–∏–≤–Ω–æ–µ)' : '–°–¢–†–û–ì–ê–Ø (–Ω–æ–≤–æ–µ/—á–µ—Ä–Ω–æ–≤–∏–∫)'
        ]);
        
        return [
            'title' => $isActive ? 'nullable|string|max:255|min:2' : 'required|string|max:255|min:2',
            'specialty' => 'nullable|string|max:200',
            'clients' => 'nullable',
            'client_age_from' => 'nullable|integer|min:18|max:120',
            'service_location' => 'nullable|array',
            'service_location.*' => 'string|in:home,salon,both',
            'outcall_locations' => 'nullable|array',
            'outcall_locations.*' => 'string|max:100',
            'taxi_option' => 'nullable|string|in:separately,included',
            'work_format' => $isActive ? 'nullable|string|in:individual,salon,duo' : 'required|string|in:individual,salon,duo',
            'service_provider' => 'nullable',
            'experience' => 'nullable|string',

            'features' => 'nullable',
            'additional_features' => 'nullable|string|max:1000',
            'description' => 'nullable|string|max:5000',
            'price' => 'nullable|numeric|min:0|max:1000000',
            'price_unit' => $isActive ? 'nullable|string|in:service,hour,minute,day' : 'required|string|in:service,hour,minute,day',
            'is_starting_price' => 'nullable|array',
            'contacts_per_hour' => 'nullable|string|in:1,2,3,4,5,6',
            'discount' => 'nullable|numeric|min:0|max:100',
            'new_client_discount' => 'nullable|numeric|min:0|max:100',
            'gift' => 'nullable|string|max:500',
            'address' => $isActive ? 'nullable|string|max:500' : 'required|string|max:500',
            'travel_area' => $isActive ? 'nullable|string|max:200' : 'required|string|max:200',
            'phone' => $isActive ? 'nullable|string|regex:/^[+]?[0-9\s\-\(\)]{10,20}$/' : 'required|string|regex:/^[+]?[0-9\s\-\(\)]{10,20}$/',
            'contact_method' => $isActive ? 'nullable|string|in:any,calls,messages' : 'required|string|in:any,calls,messages',
            'whatsapp' => 'nullable|string|regex:/^[+]?[0-9\s\-\(\)]{10,20}$/',
            'telegram' => 'nullable|string|max:100',
            
            // –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            'age' => 'nullable|integer|min:18|max:99',
            'height' => 'nullable|integer|min:140|max:220',
            'weight' => 'nullable|integer|min:40|max:200',
            'breast_size' => 'nullable|string|max:10',
            'hair_color' => 'nullable|string|max:50',
            'eye_color' => 'nullable|string|max:50',
            'appearance' => 'nullable|string|max:100',
            'nationality' => 'nullable|string|max:100',
            'bikini_zone' => 'nullable|string|max:50',
            'has_girlfriend' => 'nullable|boolean',
            
            // –£—Å–ª—É–≥–∏ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            'services' => 'nullable',
            'services_additional_info' => 'nullable|string|max:2000',
            'schedule' => 'nullable',
            'schedule_notes' => 'nullable|string|max:1000',
            
            // –ú–µ–¥–∏–∞
            'photos' => 'nullable|array|max:20',
            'photos.*' => 'nullable',
            'video' => 'nullable|array',
            'show_photos_in_gallery' => 'nullable|boolean',
            'allow_download_photos' => 'nullable|boolean',
            'watermark_photos' => 'nullable|boolean',
            
            // FAQ
            'faq' => 'nullable|array',
            'faq.*' => 'nullable',

            // –°—Ç–∞—Ç—É—Å –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è (–¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞)
            'status' => 'nullable|string|in:draft,active,archived',
            'is_published' => 'nullable|boolean',
        ];
    }

    /**
     * –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
     */
    public function messages(): array
    {
        return [
            'title.required' => '–í–≤–µ–¥–∏—Ç–µ –∏–º—è',
            'title.min' => '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞',
            'title.max' => '–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 255 —Å–∏–º–≤–æ–ª–æ–≤',

            'service_location.required' => '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥',
            'service_location.min' => '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —É—Å–ª—É–≥',
            'work_format.required' => '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã',
            'experience.required' => '–£–∫–∞–∂–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã',
            'description.required' => '–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥',
            'description.min' => '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤',
            'description.max' => '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 5000 —Å–∏–º–≤–æ–ª–æ–≤',
            'price.required' => '–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥',
            'price.numeric' => '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º',
            'price.min' => '–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π',
            'price.max' => '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å',
            'price_unit.required' => '–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ü–µ–Ω—ã',
            'address.required' => '–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å',
            'travel_area.required' => '–£–∫–∞–∂–∏—Ç–µ —Ä–∞–π–æ–Ω –≤—ã–µ–∑–¥–∞',
            'phone.required' => '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
            'phone.regex' => '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
            'contact_method.required' => '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏',
            'age.min' => '–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 18 –ª–µ—Ç',
            'age.max' => '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç',
            'height.min' => '–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 140 —Å–º',
            'height.max' => '–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 220 —Å–º',
            'weight.min' => '–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 40 –∫–≥',
            'weight.max' => '–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 200 –∫–≥',
            
            // –ú–µ–¥–∏–∞
            'photos.min' => '–ú–∏–Ω–∏–º—É–º 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏',
            'photos.max' => '–ú–∞–∫—Å–∏–º—É–º 20 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π',
            'photos.*.max' => '–†–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10 –ú–ë',
            'photos.*.mimes' => '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPG, PNG, BMP, GIF, WebP, HEIC',
        ];
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    protected function prepareForValidation(): void
    {
        \Log::info('üîç UpdateAdRequest::prepareForValidation –ù–ê–ß–ê–õ–û', [
            'all_data_keys' => array_keys($this->all()),
            'has_status' => $this->has('status'),
            'has_is_published' => $this->has('is_published'),
            'status_value' => $this->input('status'),
            'is_published_value' => $this->input('is_published')
        ]);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ status –∏–∑ FormData
        if ($this->has('status')) {
            $this->merge(['status' => $this->input('status')]);
            \Log::info('‚úÖ UpdateAdRequest: status –æ–±—Ä–∞–±–æ—Ç–∞–Ω', [
                'status' => $this->input('status')
            ]);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ is_published –∏–∑ FormData (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ boolean)
        if ($this->has('is_published')) {
            $value = $this->input('is_published');
            $boolValue = ($value === '1' || $value === 'true' || $value === true);
            $this->merge(['is_published' => $boolValue]);
            \Log::info('‚úÖ UpdateAdRequest: is_published –æ–±—Ä–∞–±–æ—Ç–∞–Ω', [
                'original_value' => $value,
                'bool_value' => $boolValue
            ]);
        }

        // –ü–∞—Ä—Å–∏–º JSON —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—Å—Å–∏–≤—ã (–¥–ª—è FormData)
        $fieldsToparse = ['services', 'service_provider', 'clients', 'features', 'schedule',
                          'prices', 'geo', 'video', 'faq', 'media_settings', 'photos'];

        foreach ($fieldsToparse as $field) {
            if ($this->has($field)) {
                $value = $this->input($field);
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ JSON —Å—Ç—Ä–æ–∫–∞
                if (is_string($value) && (str_starts_with($value, '[') || str_starts_with($value, '{'))) {
                    try {
                        $decoded = json_decode($value, true);
                        if (json_last_error() === JSON_ERROR_NONE) {
                            $this->merge([$field => $decoded]);
                            \Log::info("‚úÖ UpdateAdRequest: {$field} —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –∏–∑ JSON", [
                                'original_type' => gettype($value),
                                'decoded_type' => gettype($decoded),
                                'decoded_count' => is_array($decoded) ? count($decoded) : 'not_array'
                            ]);
                        }
                    } catch (\Exception $e) {
                        \Log::warning("‚ö†Ô∏è UpdateAdRequest: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {$field}: " . $e->getMessage());
                    }
                }
            }
        }

        // –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        if ($this->has('phone') && $this->phone) {
            $this->merge([
                'phone' => preg_replace('/[^\d+]/', '', $this->phone)
            ]);
        }

        // –û—á–∏—â–∞–µ–º WhatsApp –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        if ($this->has('whatsapp') && $this->whatsapp) {
            $this->merge([
                'whatsapp' => preg_replace('/[^\d+]/', '', $this->whatsapp)
            ]);
        }

        \Log::info('üîç UpdateAdRequest::prepareForValidation –ó–ê–í–ï–†–®–ï–ù–û', [
            'final_status' => $this->input('status'),
            'final_is_published' => $this->input('is_published')
        ]);
    }

    /**
     * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
     */
    protected function withValidator($validator)
    {
        $validator->after(function ($validator) {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π - –ø—Ä–∏–Ω–∏–º–∞–µ–º –∏ —Ñ–∞–π–ª—ã, –∏ —Å—Ç—Ä–æ–∫–∏
            $photos = $this->input('photos', []);
            if (is_array($photos)) {
                foreach ($photos as $index => $photo) {
                    if ($photo !== null) {
                        // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª - –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ
                        if ($photo instanceof \Illuminate\Http\UploadedFile) {
                            if (!$photo->isValid()) {
                                $validator->errors()->add("photos.{$index}", '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
                            }
                            if ($photo->getSize() > 10 * 1024 * 1024) {
                                $validator->errors()->add("photos.{$index}", '–†–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10 –ú–ë');
                            }
                            $allowedMimes = ['jpeg', 'jpg', 'png', 'bmp', 'gif', 'webp', 'heic', 'heif'];
                            if (!in_array($photo->getClientOriginalExtension(), $allowedMimes)) {
                                $validator->errors()->add("photos.{$index}", '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPG, PNG, BMP, GIF, WebP, HEIC');
                            }
                        }
                        // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ base64 –∏–ª–∏ URL
                        elseif (is_string($photo)) {
                            if (!empty($photo) && !str_starts_with($photo, 'data:image/') && !str_starts_with($photo, '/storage/') && !str_starts_with($photo, 'http')) {
                                $validator->errors()->add("photos.{$index}", '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
                            }
                        }
                        // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                        elseif (is_array($photo)) {
                            if (!isset($photo['url']) && !isset($photo['preview'])) {
                                $validator->errors()->add("photos.{$index}", '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
                            }
                        }
                    }
                }
            }
        });
    }
}