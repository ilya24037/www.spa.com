<?php

namespace App\Application\Http\Controllers\Ad;

use App\Application\Http\Controllers\Controller;
use App\Domain\Ad\Services\AdService;
use App\Domain\Ad\Services\DraftService;
use App\Domain\Ad\Models\Ad;
use Illuminate\Http\Request;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Auth;
use Inertia\Inertia;
use Inertia\Response;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
 * –ü—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π, —Ç–æ–ª—å–∫–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∏
 */
class DraftController extends Controller
{
    public function __construct(
        private AdService $adService,
        private DraftService $draftService
    ) {}

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫
     */
    public function show(Ad $ad): Response
    {
        $this->authorize('view', $ad);

        return Inertia::render('Draft/Show', [
            'ad' => $this->draftService->prepareForDisplay($ad)
        ]);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
     * –ö–∞–∫ –±—ã–ª–æ –¥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ - –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ad_id –≤ –¥–∞–Ω–Ω—ã—Ö, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
     */
    public function store(Request $request): JsonResponse|RedirectResponse
    {
        
        // –ú–µ—Ç–æ–¥ store –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ù–û–í–´–• —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤
        // –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ update
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        $data = $request->all();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–µ–π prices (–æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ prices[key])
        $prices = [];
        foreach ($request->all() as $key => $value) {
            if (str_starts_with($key, 'prices[')) {
                $fieldName = str_replace(['prices[', ']'], '', $key);
                $prices[$fieldName] = $value;
            }
        }
        if (!empty($prices)) {
            $data['prices'] = $prices;
        }
        
        // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π (–¥–∞–∂–µ –µ—Å–ª–∏ –ø—É—Å—Ç—ã–µ)
        if (!isset($data['description'])) {
            $data['description'] = '';
        }
        if (!isset($data['additional_features'])) {
            $data['additional_features'] = '';
        }
        if (!isset($data['schedule_notes'])) {
            $data['schedule_notes'] = '';
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—è faq
        if ($request->has('faq')) {
            $faqData = $request->input('faq');
            // –ï—Å–ª–∏ faq –ø—Ä–∏—à–µ–ª –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫–∞, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
            if (is_string($faqData)) {
                $decoded = json_decode($faqData, true);
                $data['faq'] = is_array($decoded) ? $decoded : [];
            } else {
                $data['faq'] = is_array($faqData) ? $faqData : [];
            }
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ media_settings –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ boolean –ø–æ–ª—è
        if (isset($data['media_settings'])) {
            $settings = is_string($data['media_settings']) 
                ? json_decode($data['media_settings'], true) 
                : $data['media_settings'];
            
            if (is_array($settings)) {
                $data['show_photos_in_gallery'] = in_array('show_photos_in_gallery', $settings);
                $data['allow_download_photos'] = in_array('allow_download_photos', $settings);
                $data['watermark_photos'] = in_array('watermark_photos', $settings);
            }
            
            unset($data['media_settings']); // –£–¥–∞–ª—è–µ–º, —Ç.–∫. —Ç–∞–∫–æ–≥–æ –ø–æ–ª—è –Ω–µ—Ç –≤ –ë–î
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
        $uploadedPhotos = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è photos[0], photos[1], etc
        $index = 0;
        $maxIterations = 50; // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        
        while ($index < $maxIterations) {
            if ($request->hasFile("photos.{$index}")) {
                $file = $request->file("photos.{$index}");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å 10MB)
                if ($file->getSize() > 10 * 1024 * 1024) {
                    $index++;
                    continue;
                }
                
                try {
                    
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                    $fileName = uniqid() . '_' . time() . '.' . $file->getClientOriginalExtension();
                    $path = $file->storeAs('photos/' . Auth::id(), $fileName, 'public');
                    $uploadedPhotos[] = '/storage/' . $path;
                } catch (\Exception $e) {
                }
            } elseif (!$request->has("photos.{$index}")) {
                break; // –ë–æ–ª—å—à–µ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            }
            $index++;
        }
        
        if (!empty($uploadedPhotos)) {
            $data['photos'] = $uploadedPhotos;
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫
        $ad = $this->draftService->saveOrUpdate(
            $data,
            Auth::user(),
            null // –í—Å–µ–≥–¥–∞ null, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ
        );

        // –î–ª—è Inertia –∑–∞–ø—Ä–æ—Å–æ–≤
        if ($request->header('X-Inertia')) {
            return redirect()
                ->route('profile.items.draft')
                ->with('success', '–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        }

        // –î–ª—è AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
        return response()->json([
            'success' => true,
            'message' => '–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ–∑–¥–∞–Ω',
            'ad_id' => $ad->id
        ]);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫
     */
    public function update(Request $request, Ad $ad): JsonResponse|RedirectResponse
    {
        $this->authorize('update', $ad);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        $data = $request->all();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–µ–π prices (–æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ prices[key])
        $prices = [];
        foreach ($request->all() as $key => $value) {
            if (str_starts_with($key, 'prices[')) {
                $fieldName = str_replace(['prices[', ']'], '', $key);
                $prices[$fieldName] = $value;
            }
        }
        if (!empty($prices)) {
            $data['prices'] = $prices;
        }
        
        // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
        // –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—É—Å—Ç—ã–µ
        if (!isset($data['description'])) {
            $data['description'] = '';
        }
        if ($request->has('description')) {
            $data['description'] = $request->input('description', '');
        }
        
        if (!isset($data['additional_features'])) {
            $data['additional_features'] = '';
        }
        if ($request->has('additional_features')) {
            $data['additional_features'] = $request->input('additional_features', '');
        }
        
        if (!isset($data['schedule_notes'])) {
            $data['schedule_notes'] = '';
        }
        if ($request->has('schedule_notes')) {
            $data['schedule_notes'] = $request->input('schedule_notes', '');
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—è schedule
        if (!isset($data['schedule'])) {
            $data['schedule'] = [];
        }
        if ($request->has('schedule')) {
            $scheduleData = $request->input('schedule');
            // –ï—Å–ª–∏ schedule –ø—Ä–∏—à–µ–ª –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫–∞, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
            if (is_string($scheduleData)) {
                $decoded = json_decode($scheduleData, true);
                $data['schedule'] = is_array($decoded) ? $decoded : [];
            } else {
                $data['schedule'] = is_array($scheduleData) ? $scheduleData : [];
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—è online_booking
        if ($request->has('online_booking')) {
            $data['online_booking'] = $request->boolean('online_booking');
        } else {
            $data['online_booking'] = false; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—è faq
        if ($request->has('faq')) {
            $faqData = $request->input('faq');
            // –ï—Å–ª–∏ faq –ø—Ä–∏—à–µ–ª –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫–∞, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
            if (is_string($faqData)) {
                $decoded = json_decode($faqData, true);
                $data['faq'] = is_array($decoded) ? $decoded : [];
            } else {
                $data['faq'] = is_array($faqData) ? $faqData : [];
            }
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ schedule –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        \Log::info("üìÖ DraftController: –î–∞–Ω–Ω—ã–µ schedule", [
            'request_has_schedule' => $request->has('schedule'),
            'schedule_input' => $request->input('schedule'),
            'schedule_data' => $data['schedule'],
            'schedule_notes_input' => $request->input('schedule_notes'),
            'schedule_notes_data' => $data['schedule_notes'],
            'online_booking_input' => $request->input('online_booking'),
            'online_booking_data' => $data['online_booking']
        ]);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ media_settings
        if (isset($data['media_settings']) && is_array($data['media_settings'])) {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –≤ boolean –ø–æ–ª—è
            $data['show_photos_in_gallery'] = in_array('show_photos_in_gallery', $data['media_settings']);
            $data['allow_download_photos'] = in_array('allow_download_photos', $data['media_settings']);
            $data['watermark_photos'] = in_array('watermark_photos', $data['media_settings']);
            
            // –£–¥–∞–ª—è–µ–º media_settings, —Ç–∞–∫ –∫–∞–∫ –≤ –ë–î —Ç–∞–∫–∏—Ö –ø–æ–ª–µ–π –Ω–µ—Ç
            unset($data['media_settings']);
        }
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –ë–î
        $currentPhotos = [];
        if ($ad->photos) {
            $decoded = json_decode($ad->photos, true);
            if (is_array($decoded)) {
                $currentPhotos = $decoded;
            }
        }
        
        \Log::info("üì∏ DraftController: –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –ë–î", [
            'ad_id' => $ad->id,
            'photos_from_db' => count($currentPhotos),
            'current_photos' => $currentPhotos
        ]);
        
        // KISS: –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        $uploadedPhotos = [];
        $existingPhotos = [];
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
        $uploadedVideos = [];
        $existingVideos = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è photos[0], photos[1] –∏ —Ç.–¥.
        $index = 0;
        $maxIterations = 50; // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        
        while ($index < $maxIterations) {
            // –ü—Ä–æ–±—É–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞: photos.0 –∏ photos[0]
            $dotNotation = "photos.{$index}";
            $bracketNotation = "photos[{$index}]";
            
            $hasFile = $request->hasFile($dotNotation) || $request->hasFile($bracketNotation);
            $hasValue = $request->has($dotNotation) || $request->has($bracketNotation);
            
            if (!$hasFile && !$hasValue) {
                break; // –ë–æ–ª—å—à–µ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            }
            
            if ($hasFile) {
                $file = $request->file($dotNotation) ?: $request->file($bracketNotation);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å 10MB)
                if ($file && $file->getSize() > 10 * 1024 * 1024) {
                    $index++;
                    continue;
                }
                
                try {
                    if ($file) {
                        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                        $fileName = uniqid() . '_' . time() . '.' . $file->getClientOriginalExtension();
                        $path = $file->storeAs('photos/' . Auth::id(), $fileName, 'public');
                        $uploadedPhotos[] = '/storage/' . $path;
                    }
                } catch (\Exception $e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
                }
            } elseif ($hasValue) {
                // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                $photoValue = $request->input($dotNotation) ?: $request->input($bracketNotation);
                if (is_string($photoValue) && !empty($photoValue) && $photoValue !== '[]') {
                    
                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ data:URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å –≤–∏–¥–µ–æ
                    if (str_starts_with($photoValue, 'data:image/')) {
                        try {
                            // –ò–∑–≤–ª–µ–∫–∞–µ–º MIME —Ç–∏–ø –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                            preg_match('/data:image\/([^;]+)/', $photoValue, $matches);
                            $extension = $matches[1] ?? 'webp';
                            
                            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –¥–∞–Ω–Ω—ã–µ
                            $base64Data = explode(',', $photoValue, 2)[1];
                            $binaryData = base64_decode($base64Data);
                            
                            if ($binaryData !== false) {
                                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
                                $fileName = uniqid() . '_' . time() . '.' . $extension;
                                $path = 'photos/' . Auth::id() . '/' . $fileName;
                                
                                \Storage::disk('public')->put($path, $binaryData);
                                $uploadedPhotos[] = '/storage/' . $path;
                                
                                \Log::info("‚úÖ DraftController: Data:URL —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ", [
                                    'index' => $index,
                                    'extension' => $extension,
                                    'saved_path' => '/storage/' . $path
                                ]);
                            } else {
                                \Log::error("‚ùå DraftController: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å Base64 —Ñ–æ—Ç–æ", [
                                    'index' => $index
                                ]);
                                // –ï—Å–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—É—é —Å—Ç—Ä–æ–∫—É
                                $existingPhotos[] = $photoValue;
                            }
                        } catch (\Exception $e) {
                            \Log::error("‚ùå DraftController: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ data:URL —Ñ–æ—Ç–æ", [
                                'index' => $index,
                                'error' => $e->getMessage()
                            ]);
                            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—É—é —Å—Ç—Ä–æ–∫—É
                            $existingPhotos[] = $photoValue;
                        }
                    } else {
                        // –û–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (URL –∏–ª–∏ –ø—É—Ç—å)
                        $existingPhotos[] = $photoValue;
                    }
                }
            }
            
            $index++;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ñ–æ—Ç–æ
        
        $videoIndex = 0;
        while ($videoIndex < $maxIterations) {
            // –ü—Ä–æ–±—É–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞: video.0 –∏ video[0]
            $dotNotation = "video.{$videoIndex}";
            $bracketNotation = "video[{$videoIndex}]";
            
            $hasFile = $request->hasFile($dotNotation) || $request->hasFile($bracketNotation);
            $hasValue = $request->has($dotNotation) || $request->has($bracketNotation);
            
            if (!$hasFile && !$hasValue) {
                break; // –ë–æ–ª—å—à–µ –Ω–µ—Ç –≤–∏–¥–µ–æ
            }
            
            
            if ($hasFile) {
                $file = $request->file($dotNotation) ?: $request->file($bracketNotation);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å 50MB –¥–ª—è –≤–∏–¥–µ–æ)
                if ($file && $file->getSize() > 50 * 1024 * 1024) {
                    \Log::warning("üé¨ DraftController: –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ", [
                        'index' => $videoIndex,
                        'size' => $file->getSize(),
                        'name' => $file->getClientOriginalName()
                    ]);
                    $videoIndex++;
                    continue;
                }
                
                try {
                    if ($file) {
                        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                        $fileName = uniqid() . '_' . time() . '.' . $file->getClientOriginalExtension();
                        $path = $file->storeAs('videos/' . Auth::id(), $fileName, 'public');
                        $uploadedVideos[] = '/storage/' . $path;
                        
                        \Log::info("‚úÖ DraftController: –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", [
                            'index' => $videoIndex,
                            'original_name' => $file->getClientOriginalName(),
                            'saved_path' => '/storage/' . $path
                        ]);
                    }
                } catch (\Exception $e) {
                    \Log::error("‚ùå DraftController: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ", [
                        'index' => $videoIndex,
                        'error' => $e->getMessage()
                    ]);
                }
            } elseif ($hasValue) {
                // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                $videoValue = $request->input($dotNotation) ?: $request->input($bracketNotation);
                if (is_string($videoValue) && !empty($videoValue) && $videoValue !== '[]') {
                    
                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ data:URL –≤–∏–¥–µ–æ
                    if (str_starts_with($videoValue, 'data:video/')) {
                        try {
                            // –û–±—Ä–∞–±–æ—Ç–∫–∞ data:URL –≤–∏–¥–µ–æ
                            
                            // –ò–∑–≤–ª–µ–∫–∞–µ–º MIME —Ç–∏–ø –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                            preg_match('/data:video\/([^;]+)/', $videoValue, $matches);
                            $extension = $matches[1] ?? 'webm';
                            
                            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –¥–∞–Ω–Ω—ã–µ
                            $base64Data = explode(',', $videoValue, 2)[1];
                            $binaryData = base64_decode($base64Data);
                            
                            if ($binaryData !== false) {
                                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
                                $fileName = uniqid() . '_' . time() . '.' . $extension;
                                $path = 'videos/' . Auth::id() . '/' . $fileName;
                                
                                \Storage::disk('public')->put($path, $binaryData);
                                $uploadedVideos[] = '/storage/' . $path;
                                
                                \Log::info("‚úÖ DraftController: Data:URL –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ", [
                                    'index' => $videoIndex,
                                    'extension' => $extension,
                                    'saved_path' => '/storage/' . $path,
                                    'file_size' => strlen($binaryData)
                                ]);
                            } else {
                                \Log::error("‚ùå DraftController: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å base64", [
                                    'index' => $videoIndex
                                ]);
                            }
                            
                        } catch (\Exception $e) {
                            \Log::error("‚ùå DraftController: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ data:URL –≤–∏–¥–µ–æ", [
                                'index' => $videoIndex,
                                'error' => $e->getMessage()
                            ]);
                        }
                    } else {
                        // –û–±—ã—á–Ω—ã–π URL –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                        $existingVideos[] = $videoValue;
                        \Log::info("üé¨ DraftController: –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –≤–∏–¥–µ–æ", [
                            'index' => $videoIndex,
                            'value' => $videoValue
                        ]);
                    }
                }
            }
            
            $videoIndex++;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∏–¥–µ–æ –∏–∑ –ë–î
        $currentVideos = [];
        if ($ad->video) {
            $decoded = json_decode($ad->video, true);
            if (is_array($decoded)) {
                $currentVideos = $decoded;
            }
        }
        
        // KISS: –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ - —Ç–æ —á—Ç–æ –ø—Ä–∏—à–ª–æ —Å —Ñ—Ä–æ–Ω—Ç–∞, —Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        $finalPhotos = [];
        $finalVideos = [];
        
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø—Ä–∏—à–µ–ª —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
        if ($request->input('photos') === '[]') {
            $finalPhotos = [];
        } else {
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ—Å—Ç–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ç–æ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (data:URL –∏ –æ–±—ã—á–Ω—ã–µ URL)
            if (!empty($existingPhotos)) {
                $finalPhotos = array_merge($finalPhotos, $existingPhotos);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ñ–æ—Ç–æ  
            if (!empty($uploadedPhotos)) {
                $finalPhotos = array_merge($finalPhotos, $uploadedPhotos);
            }
            
            // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ –≤ –∑–∞–ø—Ä–æ—Å–µ –≤–æ–æ–±—â–µ - –±–µ—Ä–µ–º –∏–∑ –ë–î
            if (empty($finalPhotos) && !empty($currentPhotos)) {
                $finalPhotos = $currentPhotos;
            }
        }
        
        \Log::info("üì∏ DraftController: –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", [
            'ad_id' => $ad->id,
            'existing_photos_count' => count($existingPhotos),
            'existing_photos' => $existingPhotos,
            'uploaded_photos_count' => count($uploadedPhotos), 
            'uploaded_photos' => $uploadedPhotos,
            'current_photos_count' => count($currentPhotos),
            'current_photos' => $currentPhotos,
            'final_photos_count' => count($finalPhotos),
            'final_photos' => $finalPhotos
        ]);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ñ–æ—Ç–æ
        if ($request->input('video') === '[]') {
            $finalVideos = [];
        } else {
            // 1. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∏–¥–µ–æ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (—Ç–µ —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è)
            if (!empty($existingVideos)) {
                $finalVideos = $existingVideos;
            }
            
            // 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
            if (!empty($uploadedVideos)) {
                $finalVideos = array_merge($finalVideos, $uploadedVideos);
            }
        }
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∏ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã photos –≤ –ª—é–±–æ–º –≤–∏–¥–µ
        // Laravel –Ω–µ –≤–∏–¥–∏—Ç photos –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã photos[0], photos[1] –∏ —Ç.–¥.
        $hasPhotosInRequest = false;
        foreach ($request->all() as $key => $value) {
            if (str_starts_with($key, 'photos[') || $key === 'photos') {
                $hasPhotosInRequest = true;
                break;
            }
        }
        
        if ($hasPhotosInRequest) {
            // Photos –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (–¥–∞–∂–µ –µ—Å–ª–∏ –ø—É—Å—Ç—ã–µ) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            $data['photos'] = $finalPhotos;
        } else {
            // –ü–æ–ª–µ photos –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤–æ–æ–±—â–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑ –ë–î
            $data['photos'] = $currentPhotos;
        }
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–∏ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã video –≤ –ª—é–±–æ–º –≤–∏–¥–µ
        $hasVideoInRequest = false;
        foreach ($request->all() as $key => $value) {
            if (str_starts_with($key, 'video[') || $key === 'video') {
                $hasVideoInRequest = true;
                break;
            }
        }
        
        if ($hasVideoInRequest) {
            // Video –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (–¥–∞–∂–µ –µ—Å–ª–∏ –ø—É—Å—Ç—ã–µ) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            $data['video'] = $finalVideos;
            \Log::info("üé¨ DraftController: –§–∏–Ω–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ (–∏–∑ –∑–∞–ø—Ä–æ—Å–∞)", [
                'count' => count($finalVideos),
                'videos' => $finalVideos
            ]);
        } else {
            // –ü–æ–ª–µ video –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤–æ–æ–±—â–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑ –ë–î
            $data['video'] = $currentVideos;
            \Log::info("üé¨ DraftController: –§–∏–Ω–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ (–∏–∑ –ë–î)", [
                'count' => count($currentVideos),
                'videos' => $currentVideos
            ]);
        }

        $ad = $this->draftService->saveOrUpdate(
            $data,
            Auth::user(),
            $ad->id
        );


        // –î–ª—è Inertia –∑–∞–ø—Ä–æ—Å–æ–≤
        if ($request->header('X-Inertia')) {
            return redirect()
                ->route('profile.items.draft')
                ->with('success', '–ß–µ—Ä–Ω–æ–≤–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω');
        }

        // –î–ª—è AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
        return response()->json([
            'success' => true,
            'message' => '–ß–µ—Ä–Ω–æ–≤–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω',
            'ad_id' => $ad->id
        ]);
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫
     */
    public function destroy(Ad $ad): RedirectResponse
    {
        $this->authorize('delete', $ad);

        $this->draftService->delete($ad);

        return redirect()
            ->route('profile.items.draft')
            ->with('success', '–ß–µ—Ä–Ω–æ–≤–∏–∫ —É–¥–∞–ª–µ–Ω');
    }
}