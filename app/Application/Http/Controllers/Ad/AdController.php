<?php

namespace App\Application\Http\Controllers\Ad;

use App\Application\Http\Controllers\Controller;
use App\Application\Http\Requests\Ad\CreateAdRequest;
use App\Application\Http\Requests\Ad\UpdateAdRequest;
use App\Application\Http\Resources\Ad\AdResource;
use App\Domain\Ad\Services\AdService;
use App\Domain\Ad\Services\DraftService;
use App\Domain\Ad\Services\AdModerationService;
use App\Domain\Ad\Models\Ad;
use App\Domain\Ad\DTOs\CreateAdDTO;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Inertia\Inertia;
use Inertia\Response;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –±–∞–∑–æ–≤—ã—Ö CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
 * –ü—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π, —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—É KISS
 */
class AdController extends Controller
{
    public function __construct(
        private AdService $adService,
        private DraftService $draftService,
        private AdModerationService $moderationService
    ) {}

    /**
     * –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    public function index(): Response
    {
        $ads = $this->adService->getActiveAds(
            perPage: 20,
            withRelations: ['photos', 'user']
        );

        return Inertia::render('Ads/Index', [
            'ads' => AdResource::collection($ads)
        ]);
    }

    /**
     * –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    public function show(Ad $ad): Response
    {
        Log::info('üîç AdController::show - –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', [
            'ad_id' => $ad->id,
            'status' => $ad->status->value ?? 'null',
            'is_published' => $ad->is_published,
            'is_paid' => $ad->is_paid ?? false,
            'user_id' => $ad->user_id,
            'auth_user_id' => auth()->id(),
            'auth_check' => auth()->check(),
        ]);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏:
        // 1. –°—Ç–∞—Ç—É—Å active –ò –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ (–ø—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é)
        // 2. –ò–õ–ò —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤–ª–∞–¥–µ–ª–µ—Ü –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        $canView = ($ad->status->value === 'active' && $ad->is_published === true)
                || (auth()->check() && auth()->id() === $ad->user_id);

        Log::info('üîç AdController::show - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞', [
            'canView' => $canView,
            'condition1_status_active' => $ad->status->value === 'active',
            'condition2_is_published' => $ad->is_published === true,
            'condition3_is_owner' => auth()->check() && auth()->id() === $ad->user_id,
        ]);

        if (!$canView) {
            Log::warning('‚ùå AdController::show - –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (404)', [
                'ad_id' => $ad->id,
                'reason' => '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ –∏–ª–∏ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü'
            ]);
            abort(404);
        }

        Log::info('‚úÖ AdController::show - –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ');

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
        $this->adService->incrementViews($ad);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (slug, rating —Ç–µ–ø–µ—Ä—å –≤ users)
        $ad->load(['user']);

        // üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º RAW –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ AdResource
        Log::info('üì∏ AdController::show - RAW AD DATA', [
            'ad_id' => $ad->id,
            'photos_type' => gettype($ad->photos),
            'photos_count' => is_array($ad->photos) ? count($ad->photos) : 'NOT ARRAY',
            'photos_sample' => is_array($ad->photos) ? array_slice($ad->photos, 0, 2) : $ad->photos,
            'services_type' => gettype($ad->services),
            'prices_type' => gettype($ad->prices),
            'prices_sample' => is_array($ad->prices) ? $ad->prices : 'NOT ARRAY'
        ]);

        $adResource = new AdResource($ad);
        $adResourceArray = $adResource->toArray(request());

        // üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ AdResource
        Log::info('üì∏ AdController::show - ADRESOURCE DATA', [
            'photos_exists' => isset($adResourceArray['photos']),
            'photos_type' => gettype($adResourceArray['photos'] ?? null),
            'photos_count' => isset($adResourceArray['photos']) && is_array($adResourceArray['photos']) ? count($adResourceArray['photos']) : 'NOT ARRAY',
            'photos_sample' => isset($adResourceArray['photos']) && is_array($adResourceArray['photos']) ? array_slice($adResourceArray['photos'], 0, 2) : ($adResourceArray['photos'] ?? 'NULL'),
            'services_exists' => isset($adResourceArray['services']),
            'services_type' => gettype($adResourceArray['services'] ?? null),
            'prices_exists' => isset($adResourceArray['prices']),
            'prices_type' => gettype($adResourceArray['prices'] ?? null),
            'resource_keys' => array_keys($adResourceArray)
        ]);

        return Inertia::render('Ads/Show', [
            'ad' => $adResource,
            'similarAds' => AdResource::collection(
                $this->adService->getSimilarAds($ad, limit: 4)
            )
        ]);
    }

    /**
     * –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è
     */
    public function create(): Response
    {
        // –†–µ–Ω–¥–µ—Ä–∏–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        // –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—á–∏—â–∞–µ—Ç localStorage
        return Inertia::render('Ad/Create');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π
     */
    public function store(CreateAdRequest $request): RedirectResponse
    {
        Log::info('üü¢ AdController::store –ù–ê–ß–ê–õ–û', [
            'user_id' => Auth::id(),
            'request_method' => $request->method(),
            'request_keys' => array_keys($request->all()),
            'has_title' => !empty($request->input('title')),
            'has_display_name' => !empty($request->input('display_name')),
            'category' => $request->input('category'),
            'content_type' => $request->header('Content-Type')
        ]);

        Log::info('üìù AdController: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö', [
            'validation_rules_count' => count(app(CreateAdRequest::class)->rules()),
            'request_data_preview' => [
                'title' => $request->input('title', '–Ω–µ —É–∫–∞–∑–∞–Ω'),
                'age' => $request->input('age', '–Ω–µ —É–∫–∞–∑–∞–Ω'),
                'work_format' => $request->input('work_format', '–Ω–µ —É–∫–∞–∑–∞–Ω'),
                'address' => $request->input('address', '–Ω–µ —É–∫–∞–∑–∞–Ω'),
                'services' => $request->input('services') ? '–µ—Å—Ç—å' : '–Ω–µ—Ç',
                'photos' => $request->hasFile('photos') ? '–µ—Å—Ç—å —Ñ–∞–π–ª—ã' : '–Ω–µ—Ç —Ñ–∞–π–ª–æ–≤',
                'geo' => $request->input('geo') ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'
            ]
        ]);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≤–∏–¥–µ–æ –∏ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ DraftService
        $processedPhotos = $this->processPhotosFromRequest($request);
        $processedVideo = $this->processVideoFromRequest($request);
        $processedVerificationPhoto = $this->processVerificationPhotoFromRequest($request);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º DraftService –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫–∏)
        $data = array_merge(
            $request->validated(),
            [
                'user_id' => Auth::id(),
                'status' => 'pending_moderation', // –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
                'is_published' => false, // –ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –¥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è
                'photos' => $processedPhotos, // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                'video' => $processedVideo, // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
                'verification_photo' => $processedVerificationPhoto // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
            ]
        );

        Log::info('üìã AdController: –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ DraftService', [
            'data_keys' => array_keys($data),
            'user_id' => Auth::id(),
            'data_preview' => [
                'title' => $data['title'] ?? '–Ω–µ—Ç',
                'age' => $data['age'] ?? '–Ω–µ—Ç',
                'work_format' => $data['work_format'] ?? '–Ω–µ—Ç',
                'address' => $data['address'] ?? '–Ω–µ—Ç',
                'photos_count' => count($data['photos'] ?? []),
                'geo' => isset($data['geo']) ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'
            ]
        ]);

        $ad = $this->draftService->saveOrUpdate($data, Auth::user());

        Log::info('‚úÖ AdController: –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ', [
            'ad_id' => $ad->id,
            'user_id' => Auth::id(),
            'is_published' => $ad->is_published,
            'status' => $ad->status->value ?? 'unknown'
        ]);

        $redirectUrl = route('additem.success', ['ad' => $ad->id]);
        Log::info('üîÑ AdController: –í—ã–ø–æ–ª–Ω—è–µ–º redirect –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—Ö–∞', [
            'ad_id' => $ad->id,
            'redirect_route' => 'additem.success',
            'redirect_url' => $redirectUrl
        ]);

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—Ö–∞
        return redirect()
            ->route('additem.success', ['ad' => $ad->id]);
    }

    /**
     * –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    public function edit(Ad $ad): Response
    {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        if (!$ad->exists) {
            abort(404, '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
        
        $this->authorize('update', $ad);

        // ‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í AdController::edit
        Log::info("üîç AdController::edit –ù–ê–ß–ê–õ–û", [
            'ad_id' => $ad->id,
            'ad_status' => $ad->status,
            'ad_exists' => $ad->exists,
            'ad_attributes' => $ad->getAttributes(),
            'ad_keys' => array_keys($ad->getAttributes())
        ]);
        
        // –î–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º DraftService –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        if ($ad->status->value === 'draft') {
            Log::info("üì∏ AdController::edit: –≠—Ç–æ —á–µ—Ä–Ω–æ–≤–∏–∫, –≤—ã–∑—ã–≤–∞–µ–º DraftService", [
                'ad_id' => $ad->id,
                'ad_status' => $ad->status
            ]);
            
            $draftService = app(\App\Domain\Ad\Services\DraftService::class);
            $preparedData = $draftService->prepareForDisplay($ad);
            
            Log::info("üì∏ AdController::edit: DraftService –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ", [
                'prepared_data_keys' => array_keys($preparedData),
                'prepared_data_count' => count($preparedData),
                'has_media_settings' => isset($preparedData['media_settings']),
                'media_settings_value' => $preparedData['media_settings'] ?? 'undefined'
            ]);
            
            // –í–ê–ñ–ù–û: –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ ID –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
            $preparedData['id'] = (int) $ad->id;
            
            return Inertia::render('Ad/Edit', [
                'ad' => $preparedData,
                'isActive' => false
            ]);
        }

        // ‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –ê–ö–¢–ò–í–ù–´–• –û–ë–™–Ø–í–õ–ï–ù–ò–ô
        Log::info("üì∏ AdController::edit: –≠—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º AdResource", [
            'ad_id' => $ad->id,
            'ad_status' => $ad->status,
            'ad_is_active' => $ad->isActive()
        ]);
        
        // –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π AdResource
        return Inertia::render('Ad/Edit', [
            'ad' => new AdResource($ad),
            'isActive' => $ad->isActive()
        ]);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    public function update(UpdateAdRequest $request, Ad $ad): RedirectResponse
    {
        \Log::info('üü¢ AdController::update –ù–ê–ß–ê–õ–û', [
            'ad_id' => $ad->id,
            'ad_status' => $ad->status,
            'request_data_keys' => array_keys($request->validated()),
            'service_provider' => $request->input('service_provider'),
            'clients' => $request->input('clients'),
            'user_id' => auth()->id()
        ]);
        
        $this->authorize('update', $ad);
        \Log::info('üü¢ AdController::update –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞');

        // –í–ê–ñ–ù–û: –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ç–æ –∏–∑ –ë–î –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–æ –Ω–æ–≤—ã–º–∏
        $currentPhotos = [];
        if ($ad->photos) {
            if (is_array($ad->photos)) {
                $currentPhotos = $ad->photos;
            } elseif (is_string($ad->photos)) {
                $decoded = json_decode($ad->photos, true);
                if (is_array($decoded)) {
                    $currentPhotos = $decoded;
                }
            }
        }

        \Log::info('üì∏ AdController::update - –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ç–æ –∏–∑ –ë–î', [
            'current_photos_count' => count($currentPhotos),
            'current_photos_sample' => array_slice($currentPhotos, 0, 2)
        ]);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≤–∏–¥–µ–æ –∏ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ DraftService
        $processedPhotos = $this->processPhotosFromRequest($request);
        $processedVideo = $this->processVideoFromRequest($request);
        $processedVerificationPhoto = $this->processVerificationPhotoFromRequest($request);

        \Log::info('üì∏ AdController::update - –ù–æ–≤—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ', [
            'processed_photos_count' => count($processedPhotos),
            'processed_photos_sample' => array_slice($processedPhotos, 0, 2)
        ]);

        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ + –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        // –ü–†–û–ë–õ–ï–ú–ê: processPhotosFromRequest() —É–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ URL –≤ –º–∞—Å—Å–∏–≤!
        // –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º processedPhotos –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ —Ç–∞–º –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–µ URL

        $finalPhotos = [];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Ä–Ω—É–ª processPhotosFromRequest
        if (!empty($processedPhotos)) {
            // processPhotosFromRequest —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ä—ã–µ URL + –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            $finalPhotos = $processedPhotos;

            \Log::info('üì∏ AdController::update - –ò—Å–ø–æ–ª—å–∑—É–µ–º processedPhotos', [
                'photos_count' => count($finalPhotos)
            ]);
        } else {
            // Fallback: –µ—Å–ª–∏ processPhotosFromRequest –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - –±–µ—Ä–µ–º –∏–∑ –ë–î
            if (!empty($currentPhotos)) {
                $finalPhotos = $currentPhotos;
                \Log::info('üì∏ AdController::update - Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ç–æ –∏–∑ –ë–î');
            }
        }

        \Log::info('üì∏ AdController::update - –ò–¢–û–ì–û–í–´–ô –Ω–∞–±–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π', [
            'final_photos_count' => count($finalPhotos),
            'final_photos' => $finalPhotos
        ]);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–µ–π prices (–æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ prices[key]) - –∫–∞–∫ –≤ DraftController
        $prices = [];
        foreach ($request->all() as $key => $value) {
            if (str_starts_with($key, 'prices[')) {
                $fieldName = str_replace(['prices[', ']'], '', $key);
                $prices[$fieldName] = $value;
            }
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º DraftService –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫–∏)
        $data = array_merge(
            $request->validated(),
            [
                'photos' => $finalPhotos, // –ò–°–ü–û–õ–¨–ó–£–ï–ú –§–ò–ù–ê–õ–¨–ù–´–ô –Ω–∞–±–æ—Ä (—Å—Ç–∞—Ä—ã–µ + –Ω–æ–≤—ã–µ)
                'video' => $processedVideo, // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
                'verification_photo' => $processedVerificationPhoto // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
            ]
        );

        // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        if (in_array($ad->status->value, ['active', 'rejected'])) {
            $data['status'] = 'pending_moderation';
            $data['is_published'] = false;
            \Log::info('üü¢ AdController::update –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é', [
                'ad_id' => $ad->id,
                'old_status' => $ad->status->value,
                'new_status' => 'pending_moderation',
                'reason' => $ad->status->value === 'rejected' ? '–ü–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ'
            ]);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º prices –µ—Å–ª–∏ –µ—Å—Ç—å
        if (!empty($prices)) {
            $data['prices'] = $prices;
        }
        
        \Log::info('üü¢ AdController::update –û–±—Ä–∞–±–æ—Ç–∫–∞ prices –ø–æ–ª–µ–π', [
            'prices_found' => !empty($prices),
            'prices_data' => $prices,
            'prices_count' => count($prices)
        ]);
        
        \Log::info('üü¢ AdController::update –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', [
            'data_keys' => array_keys($data),
            'status' => $data['status'] ?? '–ù–ï–¢',
            'is_published' => $data['is_published'] ?? '–ù–ï–¢',
            'request_status' => $request->input('status'),
            'request_is_published' => $request->input('is_published'),
            'photos_count' => count($processedPhotos)
        ]);
        
        $updatedAd = $this->draftService->saveOrUpdate($data, Auth::user(), $ad->id);
        
        \Log::info('üü¢ AdController::update –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', [
            'ad_id' => $updatedAd->id,
            'ad_status' => $updatedAd->status,
            'is_published' => $updatedAd->is_published,
            'request_status' => $request->input('status'),
            'is_paid' => $updatedAd->is_paid,
            'expires_at' => $updatedAd->expires_at,
            'is_active' => $updatedAd->isActive(),
            'status_enum_value' => $updatedAd->status->value ?? 'null'
        ]);

        // –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ (–ø–µ—Ä–µ—Ö–æ–¥ –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é)
        if ($updatedAd->status === \App\Domain\Ad\Enums\AdStatus::ACTIVE &&
            $updatedAd->is_published === false) {
            \Log::info('üü¢ AdController::update –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—Ö–∞', [
                'ad_id' => $updatedAd->id,
                'redirect_to' => route('additem.success', ['ad' => $updatedAd->id])
            ]);
            return redirect()
                ->route('additem.success', ['ad' => $updatedAd->id]);
        }

        // –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º Inertia –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if ($updatedAd->status === \App\Domain\Ad\Enums\AdStatus::ACTIVE) {
            \Log::info('üü¢ AdController::update –ê–ö–¢–ò–í–ù–û–ï –æ–±—ä—è–≤–ª–µ–Ω–∏–µ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ', [
                'ad_id' => $updatedAd->id,
                'redirect_to' => '/profile/items/active/all'
            ]);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º redirect –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
            return redirect('/profile/items/active/all');
        }

        // –î–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ (–æ–Ω–∏ —Ç–∞–º –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ")
        if ($updatedAd->status === \App\Domain\Ad\Enums\AdStatus::PENDING_MODERATION) {
            \Log::info('üü¢ AdController::update –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ', [
                'ad_id' => $updatedAd->id,
                'redirect_to' => '/profile/items/active/all'
            ]);
            return redirect('/profile/items/active/all');
        }
        
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É
        \Log::info('üü¢ AdController::update –ù–ï –ê–ö–¢–ò–í–ù–û–ï –æ–±—ä—è–≤–ª–µ–Ω–∏–µ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ ads.show', [
            'ad_id' => $updatedAd->id,
            'redirect_route' => 'ads.show'
        ]);
        return redirect()
            ->route('ads.show', $updatedAd)
            ->with('success', '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    public function destroy(Ad $ad): RedirectResponse
    {
        $this->authorize('delete', $ad);

        $this->adService->delete($ad);

        return redirect()
            ->route('profile.items')
            ->with('success', '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ');
    }

    /**
     * –í–†–ï–ú–ï–ù–ù–´–ô DEBUG ENDPOINT –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
     */
    public function debugForm(Request $request)
    {
        Log::info('üîç DEBUG ENDPOINT: –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞', [
            'method' => $request->method(),
            'url' => $request->fullUrl(),
            'headers' => $request->headers->all(),
            'all_data' => $request->all(),
            'files' => $request->allFiles(),
            'user_id' => Auth::id(),
            'content_type' => $request->header('Content-Type'),
            'raw_input' => $request->getContent()
        ]);

        return response()->json([
            'success' => true,
            'message' => 'Debug data logged',
            'data_received' => $request->all(),
            'files_received' => array_keys($request->allFiles())
        ]);
    }

    /**
     * –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    public function success(Ad $ad): Response
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if ($ad->user_id !== auth()->id()) {
            abort(403, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        }

        return Inertia::render('AddItem/Success', [
            'ad' => [
                'id' => $ad->id,
                'title' => $ad->title,
                'description' => $ad->description,
                'status' => $ad->status->value,
                'is_published' => $ad->is_published,
                'moderated_at' => $ad->moderated_at,
                'created_at' => $ad->created_at,
            ]
        ]);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
     * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
     * @param Request $request –ó–∞–ø—Ä–æ—Å
     * @param int $maxPhotos –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
     * @return array –ú–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º
     */
    private function processPhotosFromRequest(Request $request, int $maxPhotos = 50): array
    {
        \Log::info('üîç AdController::processPhotosFromRequest: –ù–ê–ß–ê–õ–û', [
            'request_all' => array_keys($request->all()),
            'request_files' => array_keys($request->allFiles()),
            'request_photos' => $request->input('photos'),
            'request_photos_type' => gettype($request->input('photos'))
        ]);
        
        $photosData = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ photos –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫–∞ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
        if ($request->has('photos')) {
            $photosValue = $request->input('photos');
            
            // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ (—É–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π JSON)
            if (is_array($photosValue)) {
                \Log::info('üîç AdController: photos —É–∂–µ –º–∞—Å—Å–∏–≤, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º', [
                    'photos_count' => count($photosValue),
                    'photos_sample' => array_slice($photosValue, 0, 2)
                ]);
                
                foreach ($photosValue as $photo) {
                    if (is_array($photo) && isset($photo['file'])) {
                        // –≠—Ç–æ File –æ–±—ä–µ–∫—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                        if ($photo['file'] instanceof \Illuminate\Http\UploadedFile) {
                            $file = $photo['file'];
                            if ($file->getSize() <= 10 * 1024 * 1024) {
                                try {
                                    $fileName = uniqid() . '_' . time() . '.' . $file->getClientOriginalExtension();
                                    $path = $file->storeAs('photos/' . Auth::id(), $fileName, 'public');
                                    $photosData[] = '/storage/' . $path;
                                    \Log::info("‚úÖ AdController: –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª —Ñ–æ—Ç–æ: {$path}");
                                } catch (\Exception $e) {
                                    \Log::error('AdController: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: ' . $e->getMessage());
                                }
                            }
                        }
                    } elseif (is_string($photo) && !empty($photo)) {
                        // –≠—Ç–æ —Å—Ç—Ä–æ–∫–∞ (URL –∏–ª–∏ base64)
                        if (str_starts_with($photo, 'data:image/')) {
                            $savedPath = $this->saveBase64Photo($photo);
                            if ($savedPath) {
                                $photosData[] = $savedPath;
                                \Log::info("‚úÖ AdController: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ base64 —Ñ–æ—Ç–æ: {$savedPath}");
                            }
                        } else {
                            $photosData[] = $photo;
                            \Log::info("‚úÖ AdController: –°–æ—Ö—Ä–∞–Ω–µ–Ω URL —Ñ–æ—Ç–æ: {$photo}");
                        }
                    }
                }
            }
            // –ï—Å–ª–∏ —ç—Ç–æ JSON —Å—Ç—Ä–æ–∫–∞ - –ø–∞—Ä—Å–∏–º
            elseif (is_string($photosValue) && (str_starts_with($photosValue, '[') || str_starts_with($photosValue, '{'))) {
                try {
                    $decoded = json_decode($photosValue, true);
                    if (json_last_error() === JSON_ERROR_NONE && is_array($decoded)) {
                        \Log::info('üîç AdController: photos JSON —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º', [
                            'photos_count' => count($decoded),
                            'photos_sample' => array_slice($decoded, 0, 2)
                        ]);
                        
                        foreach ($decoded as $photo) {
                            if (is_array($photo) && isset($photo['file'])) {
                                // –≠—Ç–æ File –æ–±—ä–µ–∫—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                                if ($photo['file'] instanceof \Illuminate\Http\UploadedFile) {
                                    $file = $photo['file'];
                                    if ($file->getSize() <= 10 * 1024 * 1024) {
                                        try {
                                            $fileName = uniqid() . '_' . time() . '.' . $file->getClientOriginalExtension();
                                            $path = $file->storeAs('photos/' . Auth::id(), $fileName, 'public');
                                            $photosData[] = '/storage/' . $path;
                                            \Log::info("‚úÖ AdController: –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª —Ñ–æ—Ç–æ: {$path}");
                                        } catch (\Exception $e) {
                                            \Log::error('AdController: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: ' . $e->getMessage());
                                        }
                                    }
                                }
                            } elseif (is_string($photo) && !empty($photo)) {
                                // –≠—Ç–æ —Å—Ç—Ä–æ–∫–∞ (URL –∏–ª–∏ base64)
                                if (str_starts_with($photo, 'data:image/')) {
                                    $savedPath = $this->saveBase64Photo($photo);
                                    if ($savedPath) {
                                        $photosData[] = $savedPath;
                                        \Log::info("‚úÖ AdController: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ base64 —Ñ–æ—Ç–æ: {$savedPath}");
                                    }
                                } else {
                                    $photosData[] = $photo;
                                    \Log::info("‚úÖ AdController: –°–æ—Ö—Ä–∞–Ω–µ–Ω URL —Ñ–æ—Ç–æ: {$photo}");
                                }
                            }
                        }
                    }
                } catch (\Exception $e) {
                    \Log::error('AdController: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON photos: ' . $e->getMessage());
                }
            }
        }
        
        // Fallback: —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç photos[0], photos[1], etc.
        if (empty($photosData)) {
            \Log::info('üîç AdController: Fallback –∫ —Å—Ç–∞—Ä–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É photos[index]');
            for ($index = 0; $index < $maxPhotos; $index++) {
                $bracketNotation = "photos[{$index}]";
                $dotNotation = "photos.{$index}";
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
                if ($request->hasFile($bracketNotation) || $request->hasFile($dotNotation)) {
                    $file = $request->file($bracketNotation) ?: $request->file($dotNotation);
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (10MB)
                    if ($file && $file->getSize() <= 10 * 1024 * 1024) {
                        try {
                            $fileName = uniqid() . '_' . time() . '.' . $file->getClientOriginalExtension();
                            $path = $file->storeAs('photos/' . Auth::id(), $fileName, 'public');
                            $photosData[] = '/storage/' . $path;
                            \Log::info("‚úÖ AdController: –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª —Ñ–æ—Ç–æ: {$path}");
                        } catch (\Exception $e) {
                            \Log::error('AdController: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: ' . $e->getMessage());
                        }
                    }
                }
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ (—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ç–æ –∏–ª–∏ base64)
                elseif ($request->has($bracketNotation) || $request->has($dotNotation)) {
                    $photoValue = $request->input($bracketNotation) ?: $request->input($dotNotation);
                    
                    if (is_string($photoValue) && !empty($photoValue) && $photoValue !== '[]') {
                        // –ï—Å–ª–∏ —ç—Ç–æ base64 - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
                        if (str_starts_with($photoValue, 'data:image/')) {
                            $savedPath = $this->saveBase64Photo($photoValue);
                            if ($savedPath) {
                                $photosData[] = $savedPath;
                                \Log::info("‚úÖ AdController: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ base64 —Ñ–æ—Ç–æ: {$savedPath}");
                            }
                        } else {
                            // –û–±—ã—á–Ω—ã–π URL
                            $photosData[] = $photoValue;
                            \Log::info("‚úÖ AdController: –°–æ—Ö—Ä–∞–Ω–µ–Ω URL —Ñ–æ—Ç–æ: {$photoValue}");
                        }
                    }
                } else {
                    // –ù–µ—Ç –±–æ–ª—å—à–µ —Ñ–æ—Ç–æ
                    break;
                }
            }
        }
        
        \Log::info('üîç AdController::processPhotosFromRequest: –†–ï–ó–£–õ–¨–¢–ê–¢', [
            'photos_count' => count($photosData),
            'result' => $photosData
        ]);
        
        return $photosData;
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å base64 —Ñ–æ—Ç–æ –∫–∞–∫ —Ñ–∞–π–ª
     * @param string $base64Data Base64 –¥–∞–Ω–Ω—ã–µ
     * @return string|null –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ null
     */
    private function saveBase64Photo(string $base64Data): ?string
    {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ base64
            if (!str_starts_with($base64Data, 'data:image/')) {
                return null;
            }
            
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
            $parts = explode(',', $base64Data, 2);
            if (count($parts) !== 2) {
                return null;
            }
            
            $imageData = base64_decode($parts[1]);
            if (!$imageData) {
                return null;
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            preg_match('/data:image\/([^;]+)/', $base64Data, $matches);
            $extension = $matches[1] ?? 'jpg';
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            $fileName = uniqid() . '_' . time() . '.' . $extension;
            $path = 'photos/' . Auth::id() . '/' . $fileName;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            Storage::disk('public')->put($path, $imageData);
            
            return '/storage/' . $path;
        } catch (\Exception $e) {
            \Log::error('AdController: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è base64 —Ñ–æ—Ç–æ: ' . $e->getMessage());
            return null;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
     */
    private function processVideoFromRequest(Request $request, int $maxVideos = 10): array
    {
        \Log::info('üîç AdController::processVideoFromRequest: –ù–ê–ß–ê–õ–û', [
            'request_all' => array_keys($request->all()),
            'request_files' => array_keys($request->allFiles()),
            'request_video' => $request->input('video'),
            'request_video_type' => gettype($request->input('video'))
        ]);
        
        $videoData = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ video –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫–∞ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
        if ($request->has('video')) {
            $videoValue = $request->input('video');
            
            // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ (—É–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π JSON)
            if (is_array($videoValue)) {
                \Log::info('üîç AdController: video —É–∂–µ –º–∞—Å—Å–∏–≤, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º', [
                    'video_count' => count($videoValue),
                    'video_sample' => array_slice($videoValue, 0, 2)
                ]);
                
                foreach ($videoValue as $video) {
                    if (is_array($video) && isset($video['file'])) {
                        // –≠—Ç–æ File –æ–±—ä–µ–∫—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                        if ($video['file'] instanceof \Illuminate\Http\UploadedFile) {
                            $file = $video['file'];
                            if ($file->getSize() <= 100 * 1024 * 1024) { // 100MB –¥–ª—è –≤–∏–¥–µ–æ
                                try {
                                    $fileName = uniqid() . '_' . time() . '.' . $file->getClientOriginalExtension();
                                    $path = $file->storeAs('videos/' . Auth::id(), $fileName, 'public');
                                    $videoData[] = '/storage/' . $path;
                                    \Log::info("‚úÖ AdController: –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª –≤–∏–¥–µ–æ: {$path}");
                                } catch (\Exception $e) {
                                    \Log::error('AdController: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: ' . $e->getMessage());
                                }
                            }
                        }
                    } elseif (is_string($video) && !empty($video)) {
                        // –≠—Ç–æ —Å—Ç—Ä–æ–∫–∞ (URL –∏–ª–∏ base64)
                        if (str_starts_with($video, 'data:video/')) {
                            $savedPath = $this->saveBase64Video($video);
                            if ($savedPath) {
                                $videoData[] = $savedPath;
                                \Log::info("‚úÖ AdController: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ base64 –≤–∏–¥–µ–æ: {$savedPath}");
                            }
                        } else {
                            $videoData[] = $video;
                            \Log::info("‚úÖ AdController: –°–æ—Ö—Ä–∞–Ω–µ–Ω URL –≤–∏–¥–µ–æ: {$video}");
                        }
                    }
                }
            }
            // –ï—Å–ª–∏ —ç—Ç–æ JSON —Å—Ç—Ä–æ–∫–∞ - –ø–∞—Ä—Å–∏–º
            elseif (is_string($videoValue) && (str_starts_with($videoValue, '[') || str_starts_with($videoValue, '{'))) {
                try {
                    $decoded = json_decode($videoValue, true);
                    if (json_last_error() === JSON_ERROR_NONE && is_array($decoded)) {
                        \Log::info('üîç AdController: video JSON —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º', [
                            'video_count' => count($decoded),
                            'video_sample' => array_slice($decoded, 0, 2)
                        ]);
                        
                        foreach ($decoded as $video) {
                            if (is_array($video) && isset($video['file'])) {
                                // –≠—Ç–æ File –æ–±—ä–µ–∫—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                                if ($video['file'] instanceof \Illuminate\Http\UploadedFile) {
                                    $file = $video['file'];
                                    if ($file->getSize() <= 100 * 1024 * 1024) { // 100MB –¥–ª—è –≤–∏–¥–µ–æ
                                        try {
                                            $fileName = uniqid() . '_' . time() . '.' . $file->getClientOriginalExtension();
                                            $path = $file->storeAs('videos/' . Auth::id(), $fileName, 'public');
                                            $videoData[] = '/storage/' . $path;
                                            \Log::info("‚úÖ AdController: –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª –≤–∏–¥–µ–æ: {$path}");
                                        } catch (\Exception $e) {
                                            \Log::error('AdController: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: ' . $e->getMessage());
                                        }
                                    }
                                }
                            } elseif (is_string($video) && !empty($video)) {
                                // –≠—Ç–æ —Å—Ç—Ä–æ–∫–∞ (URL –∏–ª–∏ base64)
                                if (str_starts_with($video, 'data:video/')) {
                                    $savedPath = $this->saveBase64Video($video);
                                    if ($savedPath) {
                                        $videoData[] = $savedPath;
                                        \Log::info("‚úÖ AdController: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ base64 –≤–∏–¥–µ–æ: {$savedPath}");
                                    }
                                } else {
                                    $videoData[] = $video;
                                    \Log::info("‚úÖ AdController: –°–æ—Ö—Ä–∞–Ω–µ–Ω URL –≤–∏–¥–µ–æ: {$video}");
                                }
                            }
                        }
                    }
                } catch (\Exception $e) {
                    \Log::error('AdController: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON video: ' . $e->getMessage());
                }
            }
        }
        
        // Fallback: —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç video[0], video[1], etc.
        if (empty($videoData)) {
            \Log::info('üîç AdController: Fallback –∫ —Å—Ç–∞—Ä–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É video[index]');
            for ($index = 0; $index < $maxVideos; $index++) {
                $bracketNotation = "video[{$index}]";
                $dotNotation = "video.{$index}";
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
                if ($request->hasFile($bracketNotation) || $request->hasFile($dotNotation)) {
                    $file = $request->file($bracketNotation) ?: $request->file($dotNotation);
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (100MB –¥–ª—è –≤–∏–¥–µ–æ)
                    if ($file && $file->getSize() <= 100 * 1024 * 1024) {
                        try {
                            $fileName = uniqid() . '_' . time() . '.' . $file->getClientOriginalExtension();
                            $path = $file->storeAs('videos/' . Auth::id(), $fileName, 'public');
                            $videoData[] = '/storage/' . $path;
                            \Log::info("‚úÖ AdController: –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª –≤–∏–¥–µ–æ: {$path}");
                        } catch (\Exception $e) {
                            \Log::error('AdController: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: ' . $e->getMessage());
                        }
                    }
                }
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ (—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –≤–∏–¥–µ–æ –∏–ª–∏ base64)
                elseif ($request->has($bracketNotation) || $request->has($dotNotation)) {
                    $videoValue = $request->input($bracketNotation) ?: $request->input($dotNotation);
                    
                    if (is_string($videoValue) && !empty($videoValue) && $videoValue !== '[]') {
                        // –ï—Å–ª–∏ —ç—Ç–æ base64 - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
                        if (str_starts_with($videoValue, 'data:video/')) {
                            $savedPath = $this->saveBase64Video($videoValue);
                            if ($savedPath) {
                                $videoData[] = $savedPath;
                                \Log::info("‚úÖ AdController: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ base64 –≤–∏–¥–µ–æ: {$savedPath}");
                            }
                        } else {
                            // –û–±—ã—á–Ω—ã–π URL
                            $videoData[] = $videoValue;
                            \Log::info("‚úÖ AdController: –°–æ—Ö—Ä–∞–Ω–µ–Ω URL –≤–∏–¥–µ–æ: {$videoValue}");
                        }
                    }
                } else {
                    // –ù–µ—Ç –±–æ–ª—å—à–µ –≤–∏–¥–µ–æ
                    break;
                }
            }
        }
        
        \Log::info('üîç AdController::processVideoFromRequest: –†–ï–ó–£–õ–¨–¢–ê–¢', [
            'video_count' => count($videoData),
            'result' => $videoData
        ]);
        
        return $videoData;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ base64 –≤–∏–¥–µ–æ
     */
    private function saveBase64Video(string $base64Data): ?string
    {
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            $data = explode(',', $base64Data);
            if (count($data) !== 2) {
                return null;
            }
            
            $videoData = base64_decode($data[1]);
            if ($videoData === false) {
                return null;
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            preg_match('/data:video\/([^;]+)/', $base64Data, $matches);
            $extension = $matches[1] ?? 'mp4';
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            $fileName = uniqid() . '_' . time() . '.' . $extension;
            $path = 'videos/' . Auth::id() . '/' . $fileName;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            Storage::disk('public')->put($path, $videoData);
            
            return '/storage/' . $path;
        } catch (\Exception $e) {
            \Log::error('AdController: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è base64 –≤–∏–¥–µ–æ: ' . $e->getMessage());
            return null;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω–æ–≥–æ —Ñ–æ—Ç–æ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
     */
    private function processVerificationPhotoFromRequest(Request $request): ?string
    {
        \Log::info('üîç AdController::processVerificationPhotoFromRequest: –ù–ê–ß–ê–õ–û', [
            'request_verification_photo' => $request->input('verification_photo'),
            'request_verification_photo_type' => gettype($request->input('verification_photo'))
        ]);
        
        $verificationPhoto = $request->input('verification_photo');
        
        if (empty($verificationPhoto)) {
            \Log::info('üîç AdController: verification_photo –ø—É—Å—Ç–æ–µ');
            return null;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ base64 - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
        if (str_starts_with($verificationPhoto, 'data:image/')) {
            $savedPath = $this->saveBase64Photo($verificationPhoto);
            if ($savedPath) {
                \Log::info("‚úÖ AdController: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ base64 –ø—Ä–æ–≤–µ—Ä–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ: {$savedPath}");
                return $savedPath;
            }
        } else {
            // –û–±—ã—á–Ω—ã–π URL
            \Log::info("‚úÖ AdController: –°–æ—Ö—Ä–∞–Ω–µ–Ω URL –ø—Ä–æ–≤–µ—Ä–æ—á–Ω–æ–≥–æ —Ñ–æ—Ç–æ: {$verificationPhoto}");
            return $verificationPhoto;
        }
        
        \Log::info('üîç AdController::processVerificationPhotoFromRequest: –†–ï–ó–£–õ–¨–¢–ê–¢', [
            'result' => $verificationPhoto
        ]);
        
        return $verificationPhoto;
    }

    /**
     * –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
     * –î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∏ –∏—Å—Ç–µ–∫—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    public function resubmit(Ad $ad): RedirectResponse
    {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if ($ad->user_id !== Auth::id()) {
            abort(403, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ - –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ rejected –∏–ª–∏ expired
        if (!in_array($ad->status->value, ['rejected', 'expired'])) {
            return back()->with('error', '–≠—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ');
        }

        try {
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            $result = $this->moderationService->submitForModeration($ad);

            if ($result['success']) {
                $message = $result['status'] === 'approved'
                    ? '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'
                    : '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é';

                return back()->with('success', $message);
            } else {
                return back()->with('error', $result['error'] ?? '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é');
            }
        } catch (\Exception $e) {
            Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é', [
                'ad_id' => $ad->id,
                'error' => $e->getMessage()
            ]);

            return back()->with('error', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é');
        }
    }
}