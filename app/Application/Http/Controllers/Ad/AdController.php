<?php

namespace App\Application\Http\Controllers\Ad;

use App\Application\Http\Controllers\Controller;
use App\Application\Http\Requests\Ad\CreateAdRequest;
use App\Application\Http\Requests\Ad\UpdateAdRequest;
use App\Application\Http\Resources\Ad\AdResource;
use App\Domain\Ad\Services\AdService;
use App\Domain\Ad\Services\DraftService;
use App\Domain\Ad\Models\Ad;
use App\Domain\Ad\DTOs\CreateAdDTO;
use Illuminate\Http\RedirectResponse;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Inertia\Inertia;
use Inertia\Response;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –±–∞–∑–æ–≤—ã—Ö CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
 * –ü—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π, —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—É KISS
 */
class AdController extends Controller
{
    public function __construct(
        private AdService $adService
    ) {}

    /**
     * –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    public function index(): Response
    {
        $ads = $this->adService->getActiveAds(
            perPage: 20,
            withRelations: ['photos', 'user']
        );

        return Inertia::render('Ads/Index', [
            'ads' => AdResource::collection($ads)
        ]);
    }

    /**
     * –ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–¥–æ—Å—Ç—É–ø–µ–Ω –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
     */
    public function showPublic(string $slug, int $ad): Response
    {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        $adModel = Ad::with(['user'])->findOrFail($ad);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
        // –í–†–ï–ú–ï–ù–ù–û: —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        // if (!$adModel->isActive()) {
        //     abort(404);
        // }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å slug
        if ($adModel->slug !== $slug && $adModel->slug) {
            return redirect()->route('ads.show.public', [
                'slug' => $adModel->slug,
                'ad' => $adModel->id
            ], 301);
        }
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
        $this->adService->incrementViews($adModel);
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç–∏–ª–µ –º–∞—Å—Ç–µ—Ä–∞
        $masterData = [
            'id' => $adModel->id,
            'name' => $adModel->title ?? $adModel->name ?? '–ú–∞—Å—Ç–µ—Ä',
            'avatar' => $adModel->avatar ?? $adModel->photosCollection?->first()?->url ?? null,
            'specialty' => $adModel->specialty ?? '–ú–∞—Å—Å–∞–∂',
            'description' => $adModel->description,
            'rating' => $adModel->rating ?? 4.5,
            'reviews_count' => $adModel->reviews_count ?? 0,
            'services' => $this->prepareServices($adModel),
            'photos' => $this->preparePhotos($adModel),
            'location' => $adModel->address ?? $adModel->district ?? '–ú–æ—Å–∫–≤–∞',
            'price' => $adModel->price ?? $adModel->price_from ?? 2000,
            'phone' => $adModel->phone,
            'whatsapp' => $adModel->whatsapp,
            'telegram' => $adModel->telegram,
            'experience' => $adModel->experience ?? '5+ –ª–µ—Ç',
            'completion_rate' => '98%',
            'geo' => $adModel->geo,
            'parameters' => $adModel->parameters,
            'amenities' => $adModel->amenities,
            'comfort' => $adModel->comfort,
        ];
        
        return Inertia::render('Masters/Show', [
            'master' => $masterData
        ]);
    }
    
    /**
     * –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    public function show(Ad $ad): Response
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        if (!$ad->isActive() && (!auth()->check() || auth()->id() !== $ad->user_id)) {
            abort(404);
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
        $this->adService->incrementViews($ad);

        $ad->load(['user.profile']);

        return Inertia::render('Ads/Show', [
            'ad' => new AdResource($ad),
            'similarAds' => AdResource::collection(
                $this->adService->getSimilarAds($ad, limit: 4)
            )
        ]);
    }

    /**
     * –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è
     */
    public function create(): Response
    {
        // –†–µ–Ω–¥–µ—Ä–∏–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        // –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—á–∏—â–∞–µ—Ç localStorage
        return Inertia::render('Ad/Create');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    public function store(CreateAdRequest $request): RedirectResponse
    {
        $dto = CreateAdDTO::fromArray(
            array_merge(
                $request->validated(),
                ['user_id' => Auth::id()]
            )
        );

        $ad = $this->adService->createFromDTO($dto);

        // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å—Ä–∞–∑—É –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
        if ($request->boolean('publish_immediately', true)) {
            $this->adService->publish($ad);
        }

        return redirect()
            ->route('profile.items.active')
            ->with('success', '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ');
    }

    /**
     * –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    public function edit(Ad $ad): Response
    {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        if (!$ad->exists) {
            abort(404, '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
        
        $this->authorize('update', $ad);

        // ‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í AdController::edit
        Log::info("üîç AdController::edit –ù–ê–ß–ê–õ–û", [
            'ad_id' => $ad->id,
            'ad_status' => $ad->status,
            'ad_exists' => $ad->exists,
            'ad_attributes' => $ad->getAttributes(),
            'ad_keys' => array_keys($ad->getAttributes())
        ]);
        
        // –î–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º DraftService –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        if ($ad->status->value === 'draft') {
            Log::info("üì∏ AdController::edit: –≠—Ç–æ —á–µ—Ä–Ω–æ–≤–∏–∫, –≤—ã–∑—ã–≤–∞–µ–º DraftService", [
                'ad_id' => $ad->id,
                'ad_status' => $ad->status
            ]);
            
            $draftService = app(\App\Domain\Ad\Services\DraftService::class);
            $preparedData = $draftService->prepareForDisplay($ad);
            
            Log::info("üì∏ AdController::edit: DraftService –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ", [
                'prepared_data_keys' => array_keys($preparedData),
                'prepared_data_count' => count($preparedData),
                'has_media_settings' => isset($preparedData['media_settings']),
                'media_settings_value' => $preparedData['media_settings'] ?? 'undefined'
            ]);
            
            // –í–ê–ñ–ù–û: –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ ID –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
            $preparedData['id'] = (int) $ad->id;
            
            // –í–ê–ñ–ù–û: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º enum work_format –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if (isset($preparedData['work_format']) && is_object($preparedData['work_format'])) {
                $preparedData['work_format'] = $preparedData['work_format']->value ?? 'individual';
            }
            
            // –£–ù–ò–§–ò–ö–ê–¶–ò–Ø: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤
            // AdResource –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤, —Ç–∞–∫ –∫–∞–∫ DraftService —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–∞–Ω–Ω—ã–µ
            
            return Inertia::render('Ad/Edit', [
                'ad' => ['data' => $preparedData], // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∫ –≤ AdResource  
                'isActive' => false
            ]);
        }

        // ‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –ê–ö–¢–ò–í–ù–´–• –û–ë–™–Ø–í–õ–ï–ù–ò–ô
        Log::info("üì∏ AdController::edit: –≠—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º AdResource", [
            'ad_id' => $ad->id,
            'ad_status' => $ad->status,
            'ad_is_active' => $ad->isActive()
        ]);
        
        // –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π AdResource
        return Inertia::render('Ad/Edit', [
            'ad' => new AdResource($ad),
            'isActive' => $ad->isActive()
        ]);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    public function update(UpdateAdRequest $request, Ad $ad): RedirectResponse
    {
        \Log::info('üü¢ AdController::update –ù–ê–ß–ê–õ–û', [
            'ad_id' => $ad->id,
            'ad_status' => $ad->status,
            'request_data_keys' => array_keys($request->validated()),
            'service_provider' => $request->input('service_provider'),
            'clients' => $request->input('clients'),
            'user_id' => auth()->id()
        ]);
        
        $this->authorize('update', $ad);
        \Log::info('üü¢ AdController::update –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞');

        $updatedAd = $this->adService->update($ad, $request->validated());
        
        \Log::info('üü¢ AdController::update –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', [
            'ad_id' => $updatedAd->id,
            'ad_status' => $updatedAd->status,
            'is_paid' => $updatedAd->is_paid,
            'expires_at' => $updatedAd->expires_at,
            'is_active' => $updatedAd->isActive(),
            'status_enum_value' => $updatedAd->status->value ?? 'null'
        ]);

        // –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–∫—Ç–∏–≤–Ω—ã—Ö
        // –í–†–ï–ú–ï–ù–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å, –Ω–µ is_paid
        if ($updatedAd->status === \App\Domain\Ad\Enums\AdStatus::ACTIVE) {
            \Log::info('üü¢ AdController::update –ê–ö–¢–ò–í–ù–û–ï –æ–±—ä—è–≤–ª–µ–Ω–∏–µ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /profile/items/active/all', [
                'ad_id' => $updatedAd->id,
                'redirect_to' => '/profile/items/active/all'
            ]);
            return redirect()
                ->to('/profile/items/active/all')
                ->with('success', '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
        }
        
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É
        \Log::info('üü¢ AdController::update –ù–ï –ê–ö–¢–ò–í–ù–û–ï –æ–±—ä—è–≤–ª–µ–Ω–∏–µ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ ads.show', [
            'ad_id' => $updatedAd->id,
            'redirect_route' => 'ads.show'
        ]);
        return redirect()
            ->route('ads.show', $updatedAd)
            ->with('success', '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    public function destroy(Ad $ad): RedirectResponse
    {
        $this->authorize('delete', $ad);

        $this->adService->delete($ad);

        return redirect()
            ->route('profile.items')
            ->with('success', '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ');
    }
    
    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É—Å–ª—É–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private function prepareServices(Ad $ad): array
    {
        $services = [];
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ services –≤ JSON
        if ($ad->services) {
            $servicesData = is_string($ad->services) ? json_decode($ad->services, true) : $ad->services;
            if (is_array($servicesData)) {
                foreach ($servicesData as $key => $value) {
                    if (is_array($value) && isset($value['name'])) {
                        $services[] = [
                            'id' => $key,
                            'name' => $value['name'],
                            'price' => $value['price'] ?? $ad->price ?? 2000,
                            'duration' => $value['duration'] ?? 60
                        ];
                    } elseif (is_string($value)) {
                        $services[] = [
                            'id' => $key,
                            'name' => $value,
                            'price' => $ad->price ?? 2000,
                            'duration' => 60
                        ];
                    }
                }
            }
        }
        
        // –ï—Å–ª–∏ —É—Å–ª—É–≥ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
        if (empty($services)) {
            $services[] = [
                'id' => 1,
                'name' => $ad->specialty ?? '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∞–∂',
                'price' => $ad->price ?? $ad->price_from ?? 2000,
                'duration' => 60
            ];
        }
        
        return $services;
    }
    
    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
     */
    private function preparePhotos(Ad $ad): array
    {
        $photos = [];
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∞–∫—Å–µ—Å—Å–æ—Ä photosCollection
        $photosCollection = $ad->photosCollection;
        if ($photosCollection && $photosCollection->count() > 0) {
            foreach ($photosCollection as $photo) {
                $photos[] = [
                    'id' => $photo->id,
                    'url' => $photo->url,
                    'thumbnail_url' => $photo->thumbnail_url,
                    'alt' => '–§–æ—Ç–æ ' . ($photo->position + 1),
                    'caption' => null
                ];
            }
        }
        
        // –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
        if (empty($photos)) {
            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
            if ($ad->avatar) {
                $photos[] = [
                    'id' => 'avatar',
                    'url' => $ad->avatar,
                    'thumbnail_url' => $ad->avatar,
                    'alt' => '–ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ'
                ];
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                $photos[] = [
                    'id' => 'default',
                    'url' => '/images/no-photo.svg',
                    'thumbnail_url' => '/images/no-photo.svg',
                    'alt' => '–ù–µ—Ç —Ñ–æ—Ç–æ'
                ];
            }
        }
        
        return $photos;
    }
}