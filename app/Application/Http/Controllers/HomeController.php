<?php

namespace App\Application\Http\Controllers;

use App\Domain\Master\Models\MasterProfile;
use App\Domain\Master\Services\MasterService;
use App\Domain\Master\Repositories\MasterRepository;
use App\Domain\Service\Models\MassageCategory;
use App\Domain\Master\DTOs\MasterFilterDTO;
use Illuminate\Http\Request;
use Inertia\Inertia;

class HomeController extends Controller
{
    // –í–†–ï–ú–ï–ù–ù–û –£–ë–ò–†–ê–ï–ú –í–°–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò
    public function __construct()
    {
        // –ü—É—Å—Ç–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    }
    public function index(Request $request)
    {
        // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        try {
            $masters = MasterProfile::with(['user', 'masterServices', 'primaryLocation', 'locations'])
                ->where('status', 'active') // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ status –≤–º–µ—Å—Ç–æ is_active
                ->take(12)
                ->get()
                ->map(function ($master) {
                    // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
                    $location = $master->primaryLocation ?? $master->locations->first();
                    
                    // –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏
                    $services = $master->masterServices->pluck('name')->take(3)->toArray();
                    if (empty($services)) {
                        $services = ['–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∞–∂']; // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —É—Å–ª—É–≥–∞
                    }
                    
                    return [
                        'id' => $master->id,
                        'name' => $master->display_name ?? $master->user->name ?? '–ú–∞—Å—Ç–µ—Ä',
                        'photo' => $master->avatar ?? '/images/no-photo.svg',
                        'rating' => $master->rating ?? 4.5,
                        'reviews_count' => $master->reviews_count ?? 0,
                        'price_from' => $master->masterServices->min('price') ?? 2000,
                        'services' => $services,
                        'district' => $location->district ?? '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω',
                        'metro' => $location->metro_station ?? null,
                        'experience_years' => $master->experience_years ?? 1,
                        'is_verified' => $master->is_verified ?? false,
                        'is_premium' => $master->is_premium ?? false,
                    ];
                });
                
            // –ï—Å–ª–∏ –º–∞—Å—Ç–µ—Ä–æ–≤ –Ω–µ—Ç –≤ –ë–î, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if ($masters->isEmpty()) {
                $masters = collect($this->getTestMasters());
            }
        } catch (\Exception $e) {
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ë–î –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            $masters = collect($this->getTestMasters());
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        $categories = $this->getCategories();
        
        return Inertia::render('Home', [
            'masters' => [
                'data' => $masters,
                'meta' => [
                    'total' => $masters->count(),
                    'per_page' => 12,
                    'current_page' => 1
                ]
            ],
            'filters' => [
                'price_min' => $request->get('price_min'),
                'price_max' => $request->get('price_max'),
                'services' => $request->get('services', []),
                'districts' => $request->get('districts', [])
            ],
            'categories' => $categories,
            'districts' => $this->getDistricts(),
            'priceRange' => ['min' => 1000, 'max' => 10000],
            'currentCity' => $request->get('city', '–ú–æ—Å–∫–≤–∞')
        ]);
    }
    
    /**
     * –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–æ–≤
     */
    private function getTestMasters(): array
    {
        // –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ç–æ
        $photos = [
            '/images/masters/–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ.png',
            '/images/masters/–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ (4).png',
            '/images/masters/–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ (5).png',
            '/images/masters/–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ (6).png',
            '/images/masters/–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ (7).png',
            '/images/masters/–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ (8).png',
        ];
        
        return [
            [
                'id' => 1,
                'name' => '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
                'photo' => $photos[0] ?? '/images/no-photo.svg',
                'rating' => 4.8,
                'reviews_count' => 47,
                'price_from' => 2500,
                'services' => ['–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∞–∂', '–†–µ–ª–∞–∫—Å –º–∞—Å—Å–∞–∂', '–ê–Ω—Ç–∏—Ü–µ–ª–ª—é–ª–∏—Ç–Ω—ã–π'],
                'district' => '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π',
                'metro' => '–ê—Ä–±–∞—Ç—Å–∫–∞—è',
                'experience_years' => 5,
                'is_verified' => true,
                'is_premium' => true,
            ],
            [
                'id' => 2,
                'name' => '–ò—Ä–∏–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞',
                'photo' => $photos[1] ?? '/images/no-photo.svg',
                'rating' => 4.9,
                'reviews_count' => 89,
                'price_from' => 3000,
                'services' => ['–¢–∞–π—Å–∫–∏–π –º–∞—Å—Å–∞–∂', '–°—Ç–æ—É–Ω-—Ç–µ—Ä–∞–ø–∏—è', '–ê—Ä–æ–º–∞—Ç–µ—Ä–∞–ø–∏—è'],
                'district' => '–ü—Ä–µ—Å–Ω–µ–Ω—Å–∫–∏–π',
                'metro' => '–ë–∞—Ä—Ä–∏–∫–∞–¥–Ω–∞—è',
                'experience_years' => 8,
                'is_verified' => true,
            ],
            [
                'id' => 3,
                'name' => '–ï–ª–µ–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞',
                'photo' => $photos[2] ?? '/images/no-photo.svg',
                'rating' => 4.7,
                'reviews_count' => 35,
                'price_from' => 2000,
                'services' => ['–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∞–∂', '–õ–µ—á–µ–±–Ω—ã–π –º–∞—Å—Å–∞–∂', '–ú–∞–Ω—É–∞–ª—å–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è'],
                'district' => '–¢–≤–µ—Ä—Å–∫–æ–π',
                'metro' => '–¢–≤–µ—Ä—Å–∫–∞—è',
                'experience_years' => 3,
            ],
            [
                'id' => 4,
                'name' => '–ú–∞—Ä–∏—è –ö–æ–∑–ª–æ–≤–∞',
                'photo' => $photos[3] ?? '/images/no-photo.svg',
                'rating' => 5.0,
                'reviews_count' => 122,
                'price_from' => 3500,
                'services' => ['–õ–∏–º—Ñ–æ–¥—Ä–µ–Ω–∞–∂–Ω—ã–π', '–ê–Ω—Ç–∏—Ü–µ–ª–ª—é–ª–∏—Ç–Ω—ã–π', '–û–±–µ—Ä—Ç—ã–≤–∞–Ω–∏—è'],
                'district' => '–ê—Ä–±–∞—Ç',
                'metro' => '–°–º–æ–ª–µ–Ω—Å–∫–∞—è',
                'experience_years' => 10,
                'is_premium' => true,
            ],
            [
                'id' => 5,
                'name' => '–û–ª—å–≥–∞ –ù–æ–≤–∏–∫–æ–≤–∞',
                'photo' => $photos[4] ?? '/images/no-photo.svg',
                'rating' => 4.6,
                'reviews_count' => 28,
                'price_from' => 2200,
                'services' => ['–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –º–∞—Å—Å–∞–∂', '–°–ü–ê –ø—Ä–æ–≥—Ä–∞–º–º—ã', '–ü–∏–ª–∏–Ω–≥'],
                'district' => '–•–∞–º–æ–≤–Ω–∏–∫–∏',
                'metro' => '–ü–∞—Ä–∫ –ö—É–ª—å—Ç—É—Ä—ã',
                'experience_years' => 4,
                'is_verified' => true,
            ],
            [
                'id' => 6,
                'name' => '–°–≤–µ—Ç–ª–∞–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞',
                'photo' => $photos[5] ?? '/images/no-photo.svg',
                'rating' => 4.9,
                'reviews_count' => 67,
                'price_from' => 2800,
                'services' => ['–ú–µ–¥–æ–≤—ã–π –º–∞—Å—Å–∞–∂', '–ë–∞–Ω–æ—á–Ω—ã–π –º–∞—Å—Å–∞–∂', '–†–µ—Ñ–ª–µ–∫—Å–æ—Ç–µ—Ä–∞–ø–∏—è'],
                'district' => '–ó–∞–º–æ—Å–∫–≤–æ—Ä–µ—á—å–µ',
                'metro' => '–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫–∞—è',
                'experience_years' => 6,
            ]
        ];
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    private function getCategories(): array
    {
        try {
            return MassageCategory::select('id', 'name', 'icon')
                ->where('is_active', true)
                ->orderBy('sort_order')
                ->get()
                ->toArray();
        } catch (\Exception $e) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            return [
                ['id' => 1, 'name' => '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∞–∂', 'icon' => 'üíÜ'],
                ['id' => 2, 'name' => '–¢–∞–π—Å–∫–∏–π –º–∞—Å—Å–∞–∂', 'icon' => 'üßò'],
                ['id' => 3, 'name' => '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∞–∂', 'icon' => 'üèÉ'],
                ['id' => 4, 'name' => '–õ–µ—á–µ–±–Ω—ã–π –º–∞—Å—Å–∞–∂', 'icon' => 'üè•'],
                ['id' => 5, 'name' => '–ê–Ω—Ç–∏—Ü–µ–ª–ª—é–ª–∏—Ç–Ω—ã–π', 'icon' => '‚ú®'],
                ['id' => 6, 'name' => '–°–ü–ê –ø—Ä–æ–≥—Ä–∞–º–º—ã', 'icon' => 'üå∫'],
            ];
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–π–æ–Ω–æ–≤
     */
    private function getDistricts(): array
    {
        return [
            '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π',
            '–ü—Ä–µ—Å–Ω–µ–Ω—Å–∫–∏–π',
            '–¢–≤–µ—Ä—Å–∫–æ–π',
            '–ê—Ä–±–∞—Ç',
            '–•–∞–º–æ–≤–Ω–∏–∫–∏',
            '–ó–∞–º–æ—Å–∫–≤–æ—Ä–µ—á—å–µ',
            '–ë–∞—Å–º–∞–Ω–Ω—ã–π',
            '–ö—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∏–π',
            '–ú–µ—â–∞–Ω—Å–∫–∏–π',
            '–¢–∞–≥–∞–Ω—Å–∫–∏–π'
        ];
    }
}