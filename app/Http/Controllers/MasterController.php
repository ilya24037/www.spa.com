<?php

namespace App\Http\Controllers;

use App\Models\MasterProfile;
use App\Models\MassageCategory;
use App\Models\Service;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;
use Inertia\Inertia;

class MasterController extends Controller
{
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ (–¥–ª—è API)
     */
    public function apiIndex(Request $request)
    {
        $query = MasterProfile::query()
            ->with(['user', 'services', 'photos'])
            ->where('is_active', true)
            ->where('status', 'active');

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        if ($request->has('category_id')) {
            $query->whereHas('services', function ($q) use ($request) {
                $q->where('massage_category_id', $request->category_id);
            });
        }

        if ($request->has('price_min')) {
            $query->where('price_from', '>=', $request->price_min);
        }

        if ($request->has('price_max')) {
            $query->where('price_from', '<=', $request->price_max);
        }

        if ($request->has('city')) {
            $query->where('city', $request->city);
        }

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        $sortBy = $request->get('sort', 'rating');
        switch ($sortBy) {
            case 'price_asc':
                $query->orderBy('price_from', 'asc');
                break;
            case 'price_desc':
                $query->orderBy('price_from', 'desc');
                break;
            case 'rating':
                $query->orderBy('rating', 'desc');
                break;
            case 'reviews':
                $query->orderBy('reviews_count', 'desc');
                break;
            default:
                $query->orderBy('created_at', 'desc');
        }

        return $query->paginate(12);
    }

    /**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –º–∞—Å—Ç–µ—Ä–∞
 */
public function show($slug, $master)
{
    // $master - —ç—Ç–æ ID –∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞
    $masterProfile = MasterProfile::with([
        'user',
        'services.category',
        'photos',
        'reviews.client',
        'workZones',
        'schedules'
    ])
    ->findOrFail($master);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ slug —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É
    if ($slug !== $masterProfile->slug) {
        // –ï—Å–ª–∏ slug –∏–∑–º–µ–Ω–∏–ª—Å—è, –¥–µ–ª–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL
        return redirect()->route('masters.show', [
            'slug' => $masterProfile->slug,
            'master' => $masterProfile->id
        ], 301);
    }

    // üî• –î–û–ë–ê–í–õ–ï–ù–û: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º meta-—Ç–µ–≥–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (empty($masterProfile->meta_title) || empty($masterProfile->meta_description)) {
        $masterProfile->generateMetaTags()->save();
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    $masterProfile->increment('views_count');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ª–∏ –º–∞—Å—Ç–µ—Ä
    $isFavorite = false;
    if (auth()->check()) {
        $isFavorite = auth()->user()->favorites()->where('master_profile_id', $masterProfile->id)->exists();
    }

    return Inertia::render('Masters/Show', [
        'master' => [
            'id' => $masterProfile->id,
            'name' => $masterProfile->display_name,
            'slug' => $masterProfile->slug,
            'description' => $masterProfile->description,
            'age' => $masterProfile->age,
            'experience_years' => $masterProfile->experience_years,
            'rating' => $masterProfile->rating,
            'reviews_count' => $masterProfile->reviews_count,
            'views_count' => $masterProfile->views_count,
            'price_from' => $masterProfile->price_from,
            'price_to' => $masterProfile->price_to,
            'photos' => $masterProfile->photos,
            'avatar' => $masterProfile->avatar_url,
            'all_photos' => $masterProfile->all_photos, // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ
            'is_available_now' => $masterProfile->isAvailableNow(),
            'is_favorite' => $isFavorite,
            'is_verified' => $masterProfile->is_verified,
            'is_premium' => $masterProfile->isPremium(),
            'phone' => $masterProfile->show_phone ? $masterProfile->phone : null,
            'whatsapp' => $masterProfile->whatsapp,
            'telegram' => $masterProfile->telegram,
            'city' => $masterProfile->city,
            'district' => $masterProfile->district,
            'metro_station' => $masterProfile->metro_station, // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–æ
            'address' => $masterProfile->address,
            'salon_name' => $masterProfile->salon_name,
            'services' => $masterProfile->services->map(function ($service) {
                return [
                    'id' => $service->id,
                    'name' => $service->name,
                    'category' => $service->category->name ?? '–ú–∞—Å—Å–∞–∂',
                    'price' => $service->price,
                    'duration' => $service->duration,
                    'description' => $service->description,
                ];
            }),
            'work_zones' => $masterProfile->workZones,
            'schedules' => $masterProfile->schedules,
            'reviews' => $masterProfile->reviews->take(5),
            'created_at' => $masterProfile->created_at,
        ],
        // üî• –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞—ë–º meta-—Ç–µ–≥–∏ –¥–ª—è SEO
        'meta' => [
            'title' => $masterProfile->meta_title,
            'description' => $masterProfile->meta_description,
            'keywords' => implode(', ', [
                $masterProfile->display_name,
                '–º–∞—Å—Å–∞–∂',
                $masterProfile->city,
                $masterProfile->district,
                '–º–∞—Å—Å–∞–∂–∏—Å—Ç'
            ]),
            'og:title' => $masterProfile->meta_title,
            'og:description' => $masterProfile->meta_description,
            'og:image' => $masterProfile->avatar_url ?? asset('images/default-master.jpg'),
            'og:url' => $masterProfile->full_url,
            'og:type' => 'profile',
        ],
        'similarMasters' => $this->getSimilarMasters($masterProfile),
    ]);
}

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
     */
    public function create()
    {
        $categories = MassageCategory::with('subcategories')->get();
        
        return Inertia::render('Masters/Create', [
            'categories' => $categories,
            'cities' => ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'],
        ]);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É
     */
    public function store(Request $request)
    {
        $validated = $request->validate([
            'display_name' => 'required|string|max:255',
            'description' => 'required|string|min:50',
            'age' => 'nullable|integer|min:18|max:65',
            'experience_years' => 'nullable|integer|min:0|max:50',
            'city' => 'required|string',
            'district' => 'nullable|string',
            'address' => 'nullable|string',
            'salon_name' => 'nullable|string|max:255',
            'phone' => 'required|string',
            'whatsapp' => 'nullable|string',
            'telegram' => 'nullable|string',
            'price_from' => 'required|integer|min:500',
            'price_to' => 'nullable|integer|gt:price_from',
            'show_phone' => 'boolean',
            'services' => 'required|array|min:1',
            'services.*.category_id' => 'required|exists:massage_categories,id',
            'services.*.name' => 'required|string|max:255',
            'services.*.price' => 'required|integer|min:100',
            'services.*.duration' => 'required|integer|min:15|max:480',
            'work_zones' => 'array',
            'photos' => 'array|max:10',
            'photos.*' => 'image|max:5120', // 5MB
        ]);

        DB::transaction(function () use ($validated, $request) {
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞
            $profile = auth()->user()->masterProfiles()->create([
                'display_name' => $validated['display_name'],
                'slug' => Str::slug($validated['display_name']),
                'description' => $validated['description'],
                'age' => $validated['age'] ?? null,
                'experience_years' => $validated['experience_years'] ?? null,
                'city' => $validated['city'],
                'district' => $validated['district'] ?? null,
                'address' => $validated['address'] ?? null,
                'salon_name' => $validated['salon_name'] ?? null,
                'phone' => $validated['phone'],
                'whatsapp' => $validated['whatsapp'] ?? null,
                'telegram' => $validated['telegram'] ?? null,
                'price_from' => $validated['price_from'],
                'price_to' => $validated['price_to'] ?? null,
                'show_phone' => $validated['show_phone'] ?? false,
                'status' => 'active',
                'is_active' => true,
            ]);

            // üî• –î–û–ë–ê–í–õ–ï–ù–û: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º meta-—Ç–µ–≥–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
            $profile->generateMetaTags()->save();

            // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª—É–≥–∏
            foreach ($validated['services'] as $service) {
                $profile->services()->create([
                    'massage_category_id' => $service['category_id'],
                    'name' => $service['name'],
                    'price' => $service['price'],
                    'duration' => $service['duration'],
                    'description' => $service['description'] ?? null,
                ]);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–æ–Ω—ã —Ä–∞–±–æ—Ç—ã
            if (!empty($validated['work_zones'])) {
                foreach ($validated['work_zones'] as $zone) {
                    $profile->workZones()->create(['name' => $zone]);
                }
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            if ($request->hasFile('photos')) {
                foreach ($request->file('photos') as $index => $photo) {
                    $path = $photo->store('masters/photos', 'public');
                    $profile->photos()->create([
                        'path' => $path,
                        'is_main' => $index === 0,
                    ]);
                }
            }
        });

        return redirect()
            ->route('profile.dashboard')
            ->with('success', '–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    public function edit($id)
    {
        $master = auth()->user()->masterProfiles()->findOrFail($id);
        $categories = MassageCategory::with('subcategories')->get();

        return Inertia::render('Masters/Edit', [
            'master' => $master->load(['services', 'photos', 'workZones']),
            'categories' => $categories,
            'cities' => ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'],
        ]);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É
     */
    public function update(Request $request, $id)
    {
        $profile = auth()->user()->masterProfiles()->findOrFail($id);

        $validated = $request->validate([
            'display_name' => 'required|string|max:255',
            'description' => 'required|string|min:50',
            'age' => 'nullable|integer|min:18|max:65',
            'experience_years' => 'nullable|integer|min:0|max:50',
            'city' => 'required|string',
            'district' => 'nullable|string',
            'address' => 'nullable|string',
            'salon_name' => 'nullable|string|max:255',
            'phone' => 'required|string',
            'whatsapp' => 'nullable|string',
            'telegram' => 'nullable|string',
            'price_from' => 'required|integer|min:500',
            'price_to' => 'nullable|integer|gt:price_from',
            'show_phone' => 'boolean',
        ]);

        $profile->update($validated);

        // üî• –î–û–ë–ê–í–õ–ï–ù–û: –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º meta-—Ç–µ–≥–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
        $profile->generateMetaTags()->save();

        return redirect()
            ->route('masters.show', [$profile->slug, $profile->id])
            ->with('success', '–ê–Ω–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É
     */
    public function destroy($id)
    {
        $profile = auth()->user()->masterProfiles()->findOrFail($id);
        
        // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∞—Ä—Ö–∏–≤
        $profile->update([
            'status' => 'archived',
            'is_active' => false,
        ]);

        return redirect()
            ->route('profile.dashboard')
            ->with('success', '–ê–Ω–∫–µ—Ç–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤!');
    }

    /**
     * API: –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –º–∞—Å—Ç–µ—Ä–∞
     */
    public function apiShow($id)
    {
        $master = MasterProfile::with(['services', 'photos', 'workZones'])
            ->findOrFail($id);

        return response()->json($master);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ö–æ–∂–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
     */
    private function getSimilarMasters($master)
    {
        return MasterProfile::where('id', '!=', $master->id)
            ->where('city', $master->city)
            ->where('is_active', true)
            ->whereHas('services', function ($query) use ($master) {
                $categoryIds = $master->services->pluck('massage_category_id');
                $query->whereIn('massage_category_id', $categoryIds);
            })
            ->with(['user', 'services', 'photos'])
            ->orderBy('rating', 'desc')
            ->limit(4)
            ->get();
    }
}