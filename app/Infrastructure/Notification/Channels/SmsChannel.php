<?php

namespace App\Infrastructure\Notification\Channels;

use App\Domain\Notification\Models\NotificationDelivery;
use Illuminate\Support\Facades\Log;

/**
 * SMS –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
class SmsChannel implements ChannelInterface
{
    public function getName(): string
    {
        return 'sms';
    }

    public function getDescription(): string
    {
        return 'SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—É—é —Å–≤—è–∑—å';
    }

    public function isEnabled(): bool
    {
        return config('services.sms.enabled', false);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    public function send(NotificationDelivery $delivery): array
    {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ SMS —Å–µ—Ä–≤–∏—Å –≤–∫–ª—é—á–µ–Ω
            if (!$this->isEnabled()) {
                return [
                    'success' => false,
                    'error' => 'SMS channel is disabled'
                ];
            }

            $content = $delivery->content;
            $recipient = $delivery->recipient;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if (empty($recipient)) {
                return [
                    'success' => false,
                    'error' => 'No phone number provided'
                ];
            }

            $phone = $this->normalizePhone($recipient);
            $message = $this->formatMessage($content);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
            $result = $this->sendSms($phone, $message, $delivery);

            if ($result) {
                Log::info('SMS notification sent successfully', [
                    'delivery_id' => $delivery->id,
                    'phone' => $this->maskPhone($phone)
                ]);

                return [
                    'success' => true,
                    'message' => 'SMS sent successfully',
                    'external_id' => 'sms_' . time(),
                    'delivery_time' => rand(1, 10),
                ];
            } else {
                return [
                    'success' => false,
                    'error' => 'SMS sending failed'
                ];
            }

        } catch (\Exception $e) {
            Log::error('SMS notification failed', [
                'delivery_id' => $delivery->id,
                'error' => $e->getMessage()
            ]);

            return [
                'success' => false,
                'error' => $e->getMessage()
            ];
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    protected function sendSms(string $phone, string $message, NotificationDelivery $delivery): bool
    {
        $provider = config('services.sms.provider', 'test');
        
        switch ($provider) {
            case 'smsc':
                return $this->sendViaSmsc($phone, $message, $delivery);
            case 'smsru':
                return $this->sendViaSmsRu($phone, $message, $delivery);
            case 'twilio':
                return $this->sendViaTwilio($phone, $message, $delivery);
            case 'test':
            default:
                return $this->sendTestSms($phone, $message, $delivery);
        }
    }

    /**
     * –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ SMS –≤ development
     */
    protected function sendTestSms(string $phone, string $message, NotificationDelivery $delivery): bool
    {
        Log::info('üì± SMS notification (TEST MODE)', [
            'delivery_id' => $delivery->id,
            'phone' => $this->maskPhone($phone),
            'message' => $message,
        ]);

        if (config('app.debug')) {
            Log::channel('single')->info("üì± SMS TO: {$this->maskPhone($phone)}\nMESSAGE:\n{$message}");
        }

        return true;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ SMSC.ru
     */
    protected function sendViaSmsc(string $phone, string $message, NotificationDelivery $delivery): bool
    {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å SMSC.ru
        Log::info('SMS via SMSC.ru', [
            'delivery_id' => $delivery->id,
            'phone' => $this->maskPhone($phone),
            'message' => mb_substr($message, 0, 50) . '...'
        ]);
        return true;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ SMS.ru
     */
    protected function sendViaSmsRu(string $phone, string $message, NotificationDelivery $delivery): bool
    {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å SMS.ru
        Log::info('SMS via SMS.ru', [
            'delivery_id' => $delivery->id,
            'phone' => $this->maskPhone($phone),
            'message' => mb_substr($message, 0, 50) . '...'
        ]);
        return true;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Twilio
     */
    protected function sendViaTwilio(string $phone, string $message, NotificationDelivery $delivery): bool
    {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Twilio
        Log::info('SMS via Twilio', [
            'delivery_id' => $delivery->id,
            'phone' => $this->maskPhone($phone),
            'message' => mb_substr($message, 0, 50) . '...'
        ]);
        return true;
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
     */
    protected function normalizePhone(string $phone): string
    {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
        $phone = preg_replace('/[^\d]/', '', $phone);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –†–æ—Å—Å–∏–∏ –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8
        if (str_starts_with($phone, '8') && strlen($phone) === 11) {
            $phone = '7' . substr($phone, 1);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º + –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        if (!str_starts_with($phone, '+')) {
            $phone = '+' . $phone;
        }
        
        return $phone;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è SMS
     */
    protected function formatMessage(array $content): string
    {
        $title = $content['title'] ?? '';
        $message = $content['message'] ?? '';
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (!empty($message) && $message !== $title) {
            $text = $title . "\n" . $message;
        } else {
            $text = $title ?: $message;
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É SMS (160 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ SMS)
        $maxLength = config('services.sms.max_length', 160);
        if (mb_strlen($text) > $maxLength) {
            $text = mb_substr($text, 0, $maxLength - 3) . '...';
        }
        
        return $text;
    }

    /**
     * –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ª–æ–≥–æ–≤
     */
    protected function maskPhone(string $phone): string
    {
        if (strlen($phone) <= 4) {
            return $phone;
        }
        
        return substr($phone, 0, 3) . str_repeat('*', strlen($phone) - 6) . substr($phone, -3);
    }

    // === –ú–ï–¢–û–î–´ –ò–ù–¢–ï–†–§–ï–ô–°–ê ===

    public function isAvailable(): bool
    {
        return $this->isEnabled() && !empty(config('services.sms.provider'));
    }

    public function getMaxDeliveryTime(): int
    {
        return 30; // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è SMS
    }

    public function supportsDeliveryConfirmation(): bool
    {
        return false; // SMS –æ–±—ã—á–Ω–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –±–∞–∑–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
    }
}