<?php

namespace App\Enums;

/**
 * –¢–∏–ø—ã –ø–æ–∏—Å–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
 */
enum SearchType: string
{
    case ADS = 'ads';               // –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    case MASTERS = 'masters';       // –ü–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–æ–≤
    case SERVICES = 'services';     // –ü–æ–∏—Å–∫ —É—Å–ª—É–≥
    case GLOBAL = 'global';         // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
    case RECOMMENDATIONS = 'recommendations'; // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞
     */
    public function getLabel(): string
    {
        return match($this) {
            self::ADS => '–û–±—ä—è–≤–ª–µ–Ω–∏—è',
            self::MASTERS => '–ú–∞—Å—Ç–µ—Ä–∞',
            self::SERVICES => '–£—Å–ª—É–≥–∏',
            self::GLOBAL => '–í–µ–∑–¥–µ',
            self::RECOMMENDATIONS => '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
     */
    public function getDescription(): string
    {
        return match($this) {
            self::ADS => '–ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –º–∞—Å—Ç–µ—Ä–æ–≤',
            self::MASTERS => '–ü–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∏, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —É—Å–ª—É–≥–∞–º',
            self::SERVICES => '–ü–æ–∏—Å–∫ —É—Å–ª—É–≥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
            self::GLOBAL => '–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Ä–∞–∑–¥–µ–ª–∞–º —Å–∞–π—Ç–∞',
            self::RECOMMENDATIONS => '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
        ];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è UI
     */
    public function getIcon(): string
    {
        return match($this) {
            self::ADS => 'üìã',
            self::MASTERS => 'üë®‚Äçüíº',
            self::SERVICES => '‚ö°',
            self::GLOBAL => 'üîç',
            self::RECOMMENDATIONS => '‚ú®',
        ];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è UI
     */
    public function getColor(): string
    {
        return match($this) {
            self::ADS => '#3B82F6',        // blue
            self::MASTERS => '#10B981',    // green
            self::SERVICES => '#F59E0B',   // amber
            self::GLOBAL => '#8B5CF6',     // violet
            self::RECOMMENDATIONS => '#EC4899', // pink
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞
     */
    public function getModel(): string
    {
        return match($this) {
            self::ADS => 'App\\Models\\Ad',
            self::MASTERS => 'App\\Models\\User',
            self::SERVICES => 'App\\Models\\Service',
            self::GLOBAL => 'mixed',
            self::RECOMMENDATIONS => 'mixed',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
     */
    public function getSearchFields(): array
    {
        return match($this) {
            self::ADS => [
                'title' => '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
                'description' => '–û–ø–∏—Å–∞–Ω–∏–µ',
                'specialty' => '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è',
                'additional_features' => '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏',
                'city' => '–ì–æ—Ä–æ–¥',
            ],
            self::MASTERS => [
                'name' => '–ò–º—è',
                'specialty' => '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è',
                'description' => '–û–ø–∏—Å–∞–Ω–∏–µ',
                'city' => '–ì–æ—Ä–æ–¥',
                'services' => '–£—Å–ª—É–≥–∏',
            ],
            self::SERVICES => [
                'name' => '–ù–∞–∑–≤–∞–Ω–∏–µ',
                'description' => '–û–ø–∏—Å–∞–Ω–∏–µ',
                'category' => '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                'tags' => '–¢–µ–≥–∏',
            ],
            self::GLOBAL => [
                'query' => '–û–±—â–∏–π –ø–æ–∏—Å–∫',
            ],
            self::RECOMMENDATIONS => [
                'preferences' => '–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è',
                'history' => '–ò—Å—Ç–æ—Ä–∏—è',
            ],
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
     */
    public function getAvailableFilters(): array
    {
        return match($this) {
            self::ADS => [
                'city' => '–ì–æ—Ä–æ–¥',
                'price_range' => '–¶–µ–Ω–∞',
                'rating' => '–†–µ–π—Ç–∏–Ω–≥',
                'experience' => '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã',
                'service_type' => '–¢–∏–ø —É—Å–ª—É–≥–∏',
                'availability' => '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å',
                'ad_type' => '–¢–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
                'work_format' => '–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã',
            ],
            self::MASTERS => [
                'city' => '–ì–æ—Ä–æ–¥',
                'specialty' => '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è',
                'rating' => '–†–µ–π—Ç–∏–Ω–≥',
                'experience' => '–û–ø—ã—Ç',
                'price_range' => '–¶–µ–Ω–∞',
                'availability' => '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å',
                'verified' => '–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ',
                'distance' => '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ',
            ],
            self::SERVICES => [
                'category' => '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                'price_range' => '–¶–µ–Ω–∞',
                'duration' => '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                'popularity' => '–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å',
            ],
            self::GLOBAL => [
                'type' => '–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
                'date' => '–î–∞—Ç–∞',
                'relevance' => '–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å',
            ],
            self::RECOMMENDATIONS => [
                'type' => '–¢–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
                'novelty' => '–ù–æ–≤–∏–∑–Ω–∞',
                'relevance' => '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è',
            ],
        ];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
     */
    public function getSortOptions(): array
    {
        return match($this) {
            self::ADS => [
                'relevance' => '–ü–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏',
                'rating' => '–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É',
                'price_asc' => '–ü–æ —Ü–µ–Ω–µ (–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ)',
                'price_desc' => '–ü–æ —Ü–µ–Ω–µ (—É–±—ã–≤–∞–Ω–∏–µ)',
                'created_at' => '–ü–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è',
                'views' => '–ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏',
                'distance' => '–ü–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é',
            ],
            self::MASTERS => [
                'relevance' => '–ü–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏',
                'rating' => '–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É',
                'experience' => '–ü–æ –æ–ø—ã—Ç—É',
                'reviews' => '–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–∑—ã–≤–æ–≤',
                'price_asc' => '–ü–æ —Ü–µ–Ω–µ (–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ)',
                'price_desc' => '–ü–æ —Ü–µ–Ω–µ (—É–±—ã–≤–∞–Ω–∏–µ)',
                'distance' => '–ü–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é',
                'activity' => '–ü–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
            ],
            self::SERVICES => [
                'relevance' => '–ü–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏',
                'name' => '–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é',
                'price_asc' => '–ü–æ —Ü–µ–Ω–µ (–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ)',
                'price_desc' => '–ü–æ —Ü–µ–Ω–µ (—É–±—ã–≤–∞–Ω–∏–µ)',
                'popularity' => '–ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏',
                'duration' => '–ü–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
            ],
            self::GLOBAL => [
                'relevance' => '–ü–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏',
                'date' => '–ü–æ –¥–∞—Ç–µ',
                'popularity' => '–ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏',
            ],
            self::RECOMMENDATIONS => [
                'relevance' => '–ü–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏',
                'novelty' => '–ü–æ –Ω–æ–≤–∏–∑–Ω–µ',
                'rating' => '–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É',
            ],
        ];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    public function getDefaultLimit(): int
    {
        return match($this) {
            self::ADS => 20,
            self::MASTERS => 15,
            self::SERVICES => 30,
            self::GLOBAL => 10,
            self::RECOMMENDATIONS => 12,
        };
    }

    /**
     * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –≥–µ–æ–ø–æ–∏—Å–∫
     */
    public function supportsGeoSearch(): bool
    {
        return match($this) {
            self::ADS, self::MASTERS => true,
            default => false,
        };
    }

    /**
     * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ —Ñ–∞—Å–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫
     */
    public function supportsFacetedSearch(): bool
    {
        return match($this) {
            self::ADS, self::MASTERS, self::SERVICES => true,
            default => false,
        };
    }

    /**
     * –¢—Ä–µ–±—É–µ—Ç –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    public function requiresAuth(): bool
    {
        return match($this) {
            self::RECOMMENDATIONS => true,
            default => false,
        };
    }

    /**
     * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
     */
    public function supportsAutocomplete(): bool
    {
        return match($this) {
            self::GLOBAL => false,
            default => true,
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    public function getCacheKey(string $query, array $filters = []): string
    {
        $filtersHash = md5(serialize($filters));
        return "search:{$this->value}:" . md5($query) . ":{$filtersHash}";
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ –º–∏–Ω—É—Ç–∞—Ö)
     */
    public function getCacheTTL(): int
    {
        return match($this) {
            self::ADS => 15,           // 15 –º–∏–Ω—É—Ç
            self::MASTERS => 30,       // 30 –º–∏–Ω—É—Ç
            self::SERVICES => 60,      // 1 —á–∞—Å
            self::GLOBAL => 10,        // 10 –º–∏–Ω—É—Ç
            self::RECOMMENDATIONS => 5, // 5 –º–∏–Ω—É—Ç
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞
     */
    public function getMinQueryLength(): int
    {
        return match($this) {
            self::GLOBAL => 1,
            self::RECOMMENDATIONS => 0,
            default => 2,
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
     */
    public function getPriority(): int
    {
        return match($this) {
            self::ADS => 1,            // –°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            self::MASTERS => 2,
            self::SERVICES => 3,
            self::RECOMMENDATIONS => 4,
            self::GLOBAL => 5,         // –°–∞–º—ã–π –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        };
    }

    /**
     * –í—Å–µ —Ç–∏–ø—ã –¥–ª—è –≤—ã–±–æ—Ä–∫–∏
     */
    public static function options(): array
    {
        $types = [];
        foreach (self::cases() as $type) {
            $types[$type->value] = $type->getLabel();
        }
        return $types;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–∏—Å–∫–∞
     */
    public static function getPopularTypes(): array
    {
        return [self::ADS, self::MASTERS, self::SERVICES];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    public static function default(): self
    {
        return self::ADS;
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
     */
    public static function detectFromContext(string $route = null, array $params = []): self
    {
        if (!$route) {
            return self::default();
        }

        return match(true) {
            str_contains($route, 'ads') => self::ADS,
            str_contains($route, 'masters') => self::MASTERS,
            str_contains($route, 'services') => self::SERVICES,
            str_contains($route, 'search') => self::GLOBAL,
            default => self::default(),
        };
    }
}