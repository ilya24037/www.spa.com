<?php

namespace App\Enums;

/**
 * –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
 */
enum PaymentMethod: string
{
    case CASH = 'cash';
    case TRANSFER = 'transfer';
    case CARD = 'card';
    case ELECTRONIC = 'electronic';

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
     */
    public function getLabel(): string
    {
        return match($this) {
            self::CASH => '–ù–∞–ª–∏—á–Ω—ã–µ',
            self::TRANSFER => '–ü–µ—Ä–µ–≤–æ–¥',
            self::CARD => '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞',
            self::ELECTRONIC => '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
     */
    public function getDescription(): string
    {
        return match($this) {
            self::CASH => '–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ —Å –º–∞—Å—Ç–µ—Ä–æ–º',
            self::TRANSFER => '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º',
            self::CARD => '–û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π —á–µ—Ä–µ–∑ –ø–ª–∞—Ç–µ–∂–Ω—ã–π —à–ª—é–∑',
            self::ELECTRONIC => '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏: –ÆMoney, QIWI, WebMoney',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è UI
     */
    public function getIcon(): string
    {
        return match($this) {
            self::CASH => 'üíµ',
            self::TRANSFER => 'üè¶',
            self::CARD => 'üí≥',
            self::ELECTRONIC => 'üí∞',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è UI
     */
    public function getColor(): string
    {
        return match($this) {
            self::CASH => '#059669',     // green-600
            self::TRANSFER => '#374151', // gray-700
            self::CARD => '#1F2937',     // gray-800
            self::ELECTRONIC => '#7C3AED', // violet-600
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ —Å–ø–æ—Å–æ–± –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É
     */
    public function requiresPrepayment(): bool
    {
        return match($this) {
            self::TRANSFER, self::CARD, self::ELECTRONIC => true,
            self::CASH => false,
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é –æ–ø–ª–∞—Ç—É
     */
    public function isInstant(): bool
    {
        return match($this) {
            self::CARD, self::ELECTRONIC => true,
            self::CASH, self::TRANSFER => false,
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
     */
    public function requiresConfirmation(): bool
    {
        return match($this) {
            self::CASH, self::TRANSFER => true,
            self::CARD, self::ELECTRONIC => false,
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
     */
    public function supportsRefund(): bool
    {
        return match($this) {
            self::CARD, self::ELECTRONIC, self::TRANSFER => true,
            self::CASH => false,
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞
     */
    public function getMinAmount(): float
    {
        return match($this) {
            self::CARD, self::ELECTRONIC => 50.0,
            self::TRANSFER => 100.0,
            self::CASH => 0.0,
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞
     */
    public function getMaxAmount(): float
    {
        return match($this) {
            self::CARD => 300000.0,       // 300k —Ä—É–±–ª–µ–π
            self::ELECTRONIC => 100000.0, // 100k —Ä—É–±–ª–µ–π
            self::TRANSFER => 1000000.0,  // 1M —Ä—É–±–ª–µ–π
            self::CASH => 50000.0,        // 50k —Ä—É–±–ª–µ–π
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
     */
    public function getFeePercentage(): float
    {
        return match($this) {
            self::CARD => 2.9,
            self::ELECTRONIC => 3.0,
            self::TRANSFER => 0.0,
            self::CASH => 0.0,
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
     */
    public function getProcessingTime(): int
    {
        return match($this) {
            self::CARD => 1,
            self::ELECTRONIC => 5,
            self::TRANSFER => 1440, // 24 —á–∞—Å–∞
            self::CASH => 0,        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –≤—ã—à–µ)
     */
    public function getDisplayPriority(): int
    {
        return match($this) {
            self::CARD => 1,
            self::ELECTRONIC => 2,
            self::CASH => 3,
            self::TRANSFER => 4,
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–ø–æ—Å–æ–± –¥–ª—è —Å—É–º–º—ã
     */
    public function isAvailableForAmount(float $amount): bool
    {
        return $amount >= $this->getMinAmount() && $amount <= $this->getMaxAmount();
    }

    /**
     * –í—ã—á–∏—Å–ª–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è —Å—É–º–º—ã
     */
    public function calculateFee(float $amount): float
    {
        return ($amount * $this->getFeePercentage()) / 100;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É —Å –∫–æ–º–∏—Å—Å–∏–µ–π
     */
    public function getTotalWithFee(float $amount): float
    {
        return $amount + $this->calculateFee($amount);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
     */
    public static function getPopular(): array
    {
        return [self::CARD, self::CASH, self::ELECTRONIC];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
     */
    public static function getInstantMethods(): array
    {
        return array_filter(self::cases(), fn($method) => $method->isInstant());
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–æ—Å–æ–±—ã –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏
     */
    public static function getZeroFeeMethods(): array
    {
        return array_filter(self::cases(), fn($method) => $method->getFeePercentage() === 0.0);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–æ—Å–æ–±—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Å—É–º–º—ã
     */
    public static function getAvailableForAmount(float $amount): array
    {
        return array_filter(self::cases(), fn($method) => $method->isAvailableForAmount($amount));
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∫–∏
     */
    public static function options(): array
    {
        $methods = [];
        foreach (self::cases() as $method) {
            $methods[$method->value] = $method->getLabel();
        }
        return $methods;
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å fallback
     */
    public static function tryFrom(string $value): ?self
    {
        try {
            return self::from($value);
        } catch (\ValueError) {
            return null;
        }
    }
}