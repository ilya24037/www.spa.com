<?php

namespace App\Enums;

/**
 * –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ
 */
enum UserRole: string
{
    case CLIENT = 'client';
    case MASTER = 'master';
    case ADMIN = 'admin';
    case MODERATOR = 'moderator';

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
     */
    public function getLabel(): string
    {
        return match($this) {
            self::CLIENT => '–ö–ª–∏–µ–Ω—Ç',
            self::MASTER => '–ú–∞—Å—Ç–µ—Ä',
            self::ADMIN => '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            self::MODERATOR => '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏
     */
    public function getDescription(): string
    {
        return match($this) {
            self::CLIENT => '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –∏ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç —É—Å–ª—É–≥–∏',
            self::MASTER => '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É—Å–ª—É–≥–∏',
            self::ADMIN => '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏',
            self::MODERATOR => '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ä–æ–ª–∏
     */
    public function getPermissions(): array
    {
        return match($this) {
            self::CLIENT => [
                'view_ads',
                'create_bookings',
                'write_reviews',
                'manage_favorites',
                'update_profile',
            ],
            self::MASTER => [
                'view_ads',
                'create_ads',
                'manage_ads',
                'accept_bookings',
                'manage_services',
                'view_earnings',
                'update_profile',
            ],
            self::ADMIN => [
                'manage_users',
                'manage_ads',
                'manage_bookings',
                'view_analytics',
                'manage_system',
                'moderate_content',
                'manage_payments',
                'export_data',
            ],
            self::MODERATOR => [
                'moderate_ads',
                'moderate_reviews',
                'view_reports',
                'ban_users',
                'manage_complaints',
            ],
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —É —Ä–æ–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
     */
    public function hasPermission(string $permission): bool
    {
        return in_array($permission, $this->getPermissions());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π
     */
    public function isAdmin(): bool
    {
        return in_array($this, [self::ADMIN, self::MODERATOR]);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–µ—Ç –ª–∏ —Ä–æ–ª—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    public function canCreateAds(): bool
    {
        return $this === self::MASTER;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–µ—Ç –ª–∏ —Ä–æ–ª—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    public function canCreateBookings(): bool
    {
        return $this === self::CLIENT;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç —Ä–æ–ª–∏ –¥–ª—è UI
     */
    public function getColor(): string
    {
        return match($this) {
            self::CLIENT => '#3B82F6',     // blue
            self::MASTER => '#10B981',     // green
            self::ADMIN => '#DC2626',      // red
            self::MODERATOR => '#F59E0B',  // amber
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É —Ä–æ–ª–∏
     */
    public function getIcon(): string
    {
        return match($this) {
            self::CLIENT => 'üë§',
            self::MASTER => '‚≠ê',
            self::ADMIN => 'üîß',
            self::MODERATOR => 'üõ°Ô∏è',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     */
    public static function getRegistrationRoles(): array
    {
        return [
            self::CLIENT->value => self::CLIENT->getLabel(),
            self::MASTER->value => self::MASTER->getLabel(),
        ];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–æ–ª–∏ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏
     */
    public static function options(): array
    {
        $roles = [];
        foreach (self::cases() as $role) {
            $roles[$role->value] = $role->getLabel();
        }
        return $roles;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    public static function default(): self
    {
        return self::CLIENT;
    }
}