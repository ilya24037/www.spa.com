<?php

namespace App\Enums;

/**
 * –°—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–µ–π
 */
enum PaymentStatus: string
{
    case PENDING = 'pending';           // –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    case PROCESSING = 'processing';     // –í –æ–±—Ä–∞–±–æ—Ç–∫–µ
    case COMPLETED = 'completed';       // –ó–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ
    case FAILED = 'failed';            // –ù–µ—É–¥–∞—á–Ω—ã–π
    case CANCELLED = 'cancelled';       // –û—Ç–º–µ–Ω–µ–Ω
    case REFUNDED = 'refunded';        // –í–æ–∑–≤—Ä–∞—â–µ–Ω
    case PARTIALLY_REFUNDED = 'partially_refunded'; // –ß–∞—Å—Ç–∏—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω
    case EXPIRED = 'expired';          // –ò—Å—Ç–µ–∫ —Å—Ä–æ–∫
    case DISPUTED = 'disputed';        // –°–ø–æ—Ä–Ω—ã–π
    case HELD = 'held';               // –ó–∞–º–æ—Ä–æ–∂–µ–Ω

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
     */
    public function getLabel(): string
    {
        return match($this) {
            self::PENDING => '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
            self::PROCESSING => '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
            self::COMPLETED => '–û–ø–ª–∞—á–µ–Ω–æ',
            self::FAILED => '–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã',
            self::CANCELLED => '–û—Ç–º–µ–Ω–µ–Ω–æ',
            self::REFUNDED => '–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ',
            self::PARTIALLY_REFUNDED => '–ß–∞—Å—Ç–∏—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ',
            self::EXPIRED => '–°—Ä–æ–∫ –∏—Å—Ç–µ–∫',
            self::DISPUTED => '–°–ø–æ—Ä',
            self::HELD => '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
     */
    public function getDescription(): string
    {
        return match($this) {
            self::PENDING => '–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤',
            self::PROCESSING => '–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π',
            self::COMPLETED => '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω, —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã',
            self::FAILED => '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞',
            self::CANCELLED => '–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è',
            self::REFUNDED => '–ü–ª–∞—Ç–µ–∂ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ–∑–≤—Ä–∞—â–µ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—é',
            self::PARTIALLY_REFUNDED => '–ß–∞—Å—Ç—å —Å—É–º–º—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é',
            self::EXPIRED => '–ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–ª–∞—Ç–µ–∂–∞',
            self::DISPUTED => '–ü–æ –ø–ª–∞—Ç–µ–∂—É –æ—Ç–∫—Ä—ã—Ç —Å–ø–æ—Ä –∏–ª–∏ —á–∞—Ä–¥–∂–±—ç–∫',
            self::HELD => '–ü–ª–∞—Ç–µ–∂ –∑–∞–º–æ—Ä–æ–∂–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è UI
     */
    public function getColor(): string
    {
        return match($this) {
            self::PENDING => '#F59E0B',      // amber
            self::PROCESSING => '#3B82F6',   // blue
            self::COMPLETED => '#10B981',    // green
            self::FAILED => '#EF4444',       // red
            self::CANCELLED => '#6B7280',    // gray
            self::REFUNDED => '#8B5CF6',     // purple
            self::PARTIALLY_REFUNDED => '#A855F7', // violet
            self::EXPIRED => '#9CA3AF',      // gray-400
            self::DISPUTED => '#DC2626',     // red-600
            self::HELD => '#D97706',         // amber-600
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è UI
     */
    public function getIcon(): string
    {
        return match($this) {
            self::PENDING => '‚è≥',
            self::PROCESSING => '‚ö°',
            self::COMPLETED => '‚úÖ',
            self::FAILED => '‚ùå',
            self::CANCELLED => 'üö´',
            self::REFUNDED => '‚Ü©Ô∏è',
            self::PARTIALLY_REFUNDED => '‚Ü™Ô∏è',
            self::EXPIRED => '‚è∞',
            self::DISPUTED => '‚ö†Ô∏è',
            self::HELD => 'üîí',
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º
     */
    public function isFinal(): bool
    {
        return match($this) {
            self::COMPLETED, 
            self::FAILED, 
            self::CANCELLED, 
            self::REFUNDED, 
            self::EXPIRED => true,
            default => false,
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂
     */
    public function isCancellable(): bool
    {
        return match($this) {
            self::PENDING, self::PROCESSING => true,
            default => false,
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å –ø–ª–∞—Ç–µ–∂
     */
    public function isRefundable(): bool
    {
        return match($this) {
            self::COMPLETED, self::PARTIALLY_REFUNDED => true,
            default => false,
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —É—Å–ø–µ—à–µ–Ω –ª–∏ –ø–ª–∞—Ç–µ–∂
     */
    public function isSuccessful(): bool
    {
        return $this === self::COMPLETED;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –≤–Ω–∏–º–∞–Ω–∏—è
     */
    public function requiresAttention(): bool
    {
        return match($this) {
            self::FAILED, self::DISPUTED, self::HELD => true,
            default => false,
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã —Å—Ç–∞—Ç—É—Å–æ–≤
     */
    public function getAvailableTransitions(): array
    {
        return match($this) {
            self::PENDING => [self::PROCESSING, self::COMPLETED, self::FAILED, self::CANCELLED, self::EXPIRED],
            self::PROCESSING => [self::COMPLETED, self::FAILED, self::HELD],
            self::COMPLETED => [self::REFUNDED, self::PARTIALLY_REFUNDED, self::DISPUTED],
            self::FAILED => [self::PENDING], // –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            self::HELD => [self::COMPLETED, self::FAILED, self::CANCELLED],
            self::PARTIALLY_REFUNDED => [self::REFUNDED, self::DISPUTED],
            default => [], // –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–æ–∑–º–æ–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –¥—Ä—É–≥–æ–º—É —Å—Ç–∞—Ç—É—Å—É
     */
    public function canTransitionTo(PaymentStatus $newStatus): bool
    {
        return in_array($newStatus, $this->getAvailableTransitions());
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
     */
    public function getTimeoutMinutes(): ?int
    {
        return match($this) {
            self::PENDING => 30,     // 30 –º–∏–Ω—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
            self::PROCESSING => 10,  // 10 –º–∏–Ω—É—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
            self::HELD => 1440,      // 24 —á–∞—Å–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
            default => null,
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
     */
    public function getPriority(): int
    {
        return match($this) {
            self::DISPUTED => 1,
            self::FAILED => 2,
            self::HELD => 3,
            self::PROCESSING => 4,
            self::PENDING => 5,
            self::PARTIALLY_REFUNDED => 6,
            self::COMPLETED => 7,
            self::REFUNDED => 8,
            self::CANCELLED => 9,
            self::EXPIRED => 10,
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    public static function getAutomationRequired(): array
    {
        return [
            self::PENDING,
            self::PROCESSING,
            self::HELD,
        ];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
     */
    public static function getSuccessfulStatuses(): array
    {
        return [
            self::COMPLETED,
            self::PARTIALLY_REFUNDED,
            self::REFUNDED,
        ];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
     */
    public static function getFailedStatuses(): array
    {
        return [
            self::FAILED,
            self::CANCELLED,
            self::EXPIRED,
        ];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
     */
    public static function getActiveStatuses(): array
    {
        return [
            self::PENDING,
            self::PROCESSING,
            self::HELD,
        ];
    }

    /**
     * –í—Å–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∫–∏
     */
    public static function options(): array
    {
        $options = [];
        foreach (self::cases() as $status) {
            $options[$status->value] = $status->getLabel();
        }
        return $options;
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å fallback
     */
    public static function tryFrom(string $value): ?self
    {
        try {
            return self::from($value);
        } catch (\ValueError) {
            return null;
        }
    }
}