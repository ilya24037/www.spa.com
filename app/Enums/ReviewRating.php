<?php

namespace App\Enums;

/**
 * –†–µ–π—Ç–∏–Ω–≥–∏ –æ—Ç–∑—ã–≤–æ–≤ (1-5 –∑–≤–µ–∑–¥)
 */
enum ReviewRating: int
{
    case ONE = 1;
    case TWO = 2;
    case THREE = 3;
    case FOUR = 4;
    case FIVE = 5;

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
     */
    public function getLabel(): string
    {
        return match($this) {
            self::ONE => '–û—á–µ–Ω—å –ø–ª–æ—Ö–æ',
            self::TWO => '–ü–ª–æ—Ö–æ',
            self::THREE => '–ù–æ—Ä–º–∞–ª—å–Ω–æ',
            self::FOUR => '–•–æ—Ä–æ—à–æ',
            self::FIVE => '–û—Ç–ª–∏—á–Ω–æ',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
     */
    public function getEmoji(): string
    {
        return match($this) {
            self::ONE => 'üòû',
            self::TWO => 'üòê',
            self::THREE => 'üòä',
            self::FOUR => 'üòÉ',
            self::FIVE => 'ü§©',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
     */
    public function getColor(): string
    {
        return match($this) {
            self::ONE, self::TWO => 'error',
            self::THREE => 'warning',
            self::FOUR => 'info',
            self::FIVE => 'success',
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å HTML –∑–≤–µ–∑–¥
     */
    public function getStarsHtml(): string
    {
        $stars = '';
        for ($i = 1; $i <= 5; $i++) {
            $stars .= $i <= $this->value ? '‚òÖ' : '‚òÜ';
        }
        return $stars;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º
     */
    public function isPositive(): bool
    {
        return $this->value >= 4;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
     */
    public function isNegative(): bool
    {
        return $this->value <= 2;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º
     */
    public function isNeutral(): bool
    {
        return $this->value === 3;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Å —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ
     */
    public function getWeight(): float
    {
        return match($this) {
            self::ONE => 0.2,
            self::TWO => 0.4,
            self::THREE => 0.6,
            self::FOUR => 0.8,
            self::FIVE => 1.0,
        };
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∏–∑ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
     */
    public static function fromValue(int $value): self
    {
        return match($value) {
            1 => self::ONE,
            2 => self::TWO,
            3 => self::THREE,
            4 => self::FOUR,
            5 => self::FIVE,
            default => throw new \InvalidArgumentException("Invalid rating value: {$value}"),
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
     */
    public static function all(): array
    {
        return [
            self::ONE,
            self::TWO,
            self::THREE,
            self::FOUR,
            self::FIVE,
        ];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
     */
    public static function positive(): array
    {
        return [self::FOUR, self::FIVE];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
     */
    public static function negative(): array
    {
        return [self::ONE, self::TWO];
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ –º–∞—Å—Å–∏–≤–∞
     */
    public static function calculateAverage(array $ratings): float
    {
        if (empty($ratings)) {
            return 0.0;
        }

        $total = array_sum($ratings);
        return round($total / count($ratings), 1);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
     */
    public static function getDistribution(array $ratings): array
    {
        $distribution = [
            1 => 0, 2 => 0, 3 => 0, 4 => 0, 5 => 0
        ];

        foreach ($ratings as $rating) {
            if (isset($distribution[$rating])) {
                $distribution[$rating]++;
            }
        }

        return $distribution;
    }
}