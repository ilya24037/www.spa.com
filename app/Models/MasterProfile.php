<?php

namespace App\Models;

use App\Traits\HasUniqueSlug; // üî• –î–æ–±–∞–≤–ª–µ–Ω–æ
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Support\Str;

class MasterProfile extends Model
{
    use HasFactory;
    use HasUniqueSlug; // üî• –î–æ–±–∞–≤–ª–µ–Ω–æ
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è trait HasUniqueSlug  üî• –î–æ–±–∞–≤–ª–µ–Ω–æ
     */
    protected $slugField = 'slug';           // –ü–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è slug
    protected $slugSource = 'display_name';  // –û—Ç–∫—É–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å slug

    /**
     * –ê—Ç—Ä–∏–±—É—Ç—ã, –ø—Ä–∏–≥–æ–¥–Ω—ã–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è.
     */
    protected $fillable = [
        'user_id',
        'display_name',
        'slug',
        'bio',
        'avatar',
        'phone',
        'whatsapp',
        'telegram',
        'show_contacts',
        'experience_years',
        'certificates',
        'education',
        'city',
        'district',
        'metro_station',
        'home_service',
        'salon_service',
        'salon_address',
        'rating',
        'reviews_count',
        'completed_bookings',
        'views_count',
        'status',
        'is_verified',
        'is_premium',
        'premium_until',
        'meta_title',
        'meta_description',
    ];

    /**
     * –ö–∞—Å—Ç—ã –∞—Ç—Ä–∏–±—É—Ç–æ–≤.
     */
    protected $casts = [
        'certificates'     => 'array',
        'education'        => 'array',
        'show_contacts'    => 'boolean',
        'home_service'     => 'boolean',
        'salon_service'    => 'boolean',
        'is_verified'      => 'boolean',
        'is_premium'       => 'boolean',
        'premium_until'    => 'datetime',
        'rating'           => 'decimal:2',
    ];

    /**
     * –ê—Ç—Ä–∏–±—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –º–æ–¥–µ–ª–∏
     */
    protected $appends = ['url', 'full_salon_address', 'full_url', 'share_url', 'avatar_url', 'all_photos'];

    /* --------------------------------------------------------------------- */
    /*  –û—Ç–Ω–æ—à–µ–Ω–∏—è                                                            */
    /* --------------------------------------------------------------------- */

    /** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å */
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    /** –£—Å–ª—É–≥–∏ –º–∞—Å—Ç–µ—Ä–∞ */
    public function services(): HasMany
    {
        return $this->hasMany(Service::class);
    }

    /** –ê–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª—É–≥–∏ */
    public function activeServices(): HasMany
    {
        return $this->services()->where('status', 'active');
    }

    /** –†–∞–π–æ–Ω—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è */
    public function workZones(): HasMany
    {
        return $this->hasMany(WorkZone::class);
    }

    /** –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ */
    public function schedules(): HasMany
    {
        return $this->hasMany(Schedule::class);
    }

    /** –ò—Å–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ */
    public function scheduleExceptions(): HasMany
    {
        return $this->hasMany(ScheduleException::class);
    }

    /** –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */
    public function bookings(): HasMany
    {
        return $this->hasMany(Booking::class);
    }

    /** –û—Ç–∑—ã–≤—ã */
    public function reviews(): HasMany
    {
        return $this->hasMany(Review::class);
    }

    /** –ü–æ–¥–ø–∏—Å–∫–∏ */
    public function subscriptions(): HasMany
    {
        return $this->hasMany(MasterSubscription::class);
    }

    /** –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ */
    public function activeSubscription(): HasOne
    {
        return $this->hasOne(MasterSubscription::class)
            ->where('status', 'active')
            ->where('end_date', '>=', now())
            ->latest();
    }

    /* --------------------------------------------------------------------- */
    /*  üì∏  –§–æ—Ç–æ (–¥–æ–±–∞–≤–ª–µ–Ω–æ)                                                 */
    /* --------------------------------------------------------------------- */

    /**
     * –ì–∞–ª–µ—Ä–µ—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ –º–∞—Å—Ç–µ—Ä–∞.
     */
    public function photos(): HasMany
    {
        // –ï—Å–ª–∏ FK –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ—Ç–µ, –ø–µ—Ä–µ–¥–∞–π—Ç–µ –µ–≥–æ –≤—Ç–æ—Ä—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
        return $this->hasMany(MasterPhoto::class, 'master_profile_id');
    }

    /**
     * –ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ (is_main = true).
     */
    public function mainPhoto(): HasOne
    {
        return $this->hasOne(MasterPhoto::class, 'master_profile_id')
                    ->where('is_main', true);
    }

    /* --------------------------------------------------------------------- */
    /*  –õ–æ–≥–∏–∫–∞                                                                */
    /* --------------------------------------------------------------------- */

    /** –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞ */
    public function isPremium(): bool
    {
        return $this->is_premium && $this->premium_until && $this->premium_until->isFuture();
    }

    /** –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è */
    public function isActive(): bool
    {
        return $this->status === 'active';
    }

    /** –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ */
    public function incrementViews(): void
    {
        $this->increment('views_count');
    }

    /** –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ */
    public function updateRating(): void
    {
        $avgRating = $this->reviews()
            ->where('status', 'approved')
            ->avg('rating_overall');

        $this->update([
            'rating'         => round($avgRating, 2),
            'reviews_count'  => $this->reviews()->where('status', 'approved')->count(),
        ]);
    }
    
    /**
     * üî• –î–û–ë–ê–í–õ–ï–ù –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –º–∞—Å—Ç–µ—Ä —Å–µ–π—á–∞—Å
     * 
     * @return bool
     */
    public function isAvailableNow(): bool
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è
        if (!$this->isActive()) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º—è
        $now = now();
        $dayOfWeek = $now->dayOfWeek; // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 6 = —Å—É–±–±–æ—Ç–∞
        $currentTime = $now->format('H:i');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        $schedule = $this->schedules()
            ->where('day_of_week', $dayOfWeek)
            ->where('is_working_day', true)
            ->first();
            
        if (!$schedule) {
            // –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–∏–µ –∑–æ–Ω—ã
            // –ú–∞—Å—Ç–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –∑–æ–Ω—ã
            return $this->workZones()->where('is_active', true)->exists();
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã
        return $currentTime >= $schedule->start_time && $currentTime <= $schedule->end_time;
    }
    
    /**
     * üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SEO –º–µ—Ç–∞-—Ç–µ–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
     * 
     * –°–æ–∑–¥–∞—ë—Ç title –∏ description –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–æ–≤ –∏ —Å–æ—Ü—Å–µ—Ç–µ–π
     * @return self
     */
    public function generateMetaTags(): self
    {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º meta_title –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
        if (empty($this->meta_title)) {
            $parts = [];
            
            // 1. –ò–º—è –º–∞—Å—Ç–µ—Ä–∞ - –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤–æ–µ
            $parts[] = $this->display_name;
            
            // 2. –û—Å–Ω–æ–≤–Ω–∞—è —É—Å–ª—É–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            $mainService = $this->services()
                ->orderBy('bookings_count', 'desc') // –°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è —É—Å–ª—É–≥–∞
                ->first();
                
            if ($mainService) {
                $parts[] = $mainService->name;
            } else {
                $parts[] = '–ú–∞—Å—Å–∞–∂–∏—Å—Ç'; // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            }
            
            // 3. –õ–æ–∫–∞—Ü–∏—è
            if ($this->district && $this->city) {
                $parts[] = "{$this->district}, {$this->city}";
            } else {
                $parts[] = $this->city;
            }
            
            // –°–æ–±–∏—Ä–∞–µ–º title —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            $this->meta_title = implode(' ‚Ä¢ ', $parts);
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º meta_description –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
        if (empty($this->meta_description)) {
            $description = [];
            
            // 1. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            $intro = $this->is_verified ? "‚úì –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∞–∂–∏—Å—Ç" : "–ú–∞—Å—Å–∞–∂–∏—Å—Ç";
            $description[] = "{$intro} {$this->display_name}";
            
            // 2. –õ–æ–∫–∞—Ü–∏—è —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º
            if ($this->metro_station) {
                $description[] = "—É –º–µ—Ç—Ä–æ {$this->metro_station}";
            } elseif ($this->district) {
                $description[] = "–≤ —Ä–∞–π–æ–Ω–µ {$this->district} ({$this->city})";
            } else {
                $description[] = "–≤ –≥–æ—Ä–æ–¥–µ {$this->city}";
            }
            
            // 3. –£—Å–ª—É–≥–∏ (–º–∞–∫—Å–∏–º—É–º 3)
            $services = $this->services()
                ->where('status', 'active')
                ->orderBy('bookings_count', 'desc')
                ->take(3)
                ->pluck('name');
                
            if ($services->isNotEmpty()) {
                $servicesList = $services->implode(', ');
                $description[] = "–£—Å–ª—É–≥–∏: {$servicesList}";
            }
            
            // 4. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            if ($this->experience_years > 0) {
                $years = $this->experience_years;
                $yearWord = $this->getYearWord($years);
                $description[] = "–û–ø—ã—Ç {$years} {$yearWord}";
            }
            
            // 5. –†–µ–π—Ç–∏–Ω–≥ (–µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∑—ã–≤—ã)
            if ($this->rating > 0 && $this->reviews_count > 0) {
                $stars = str_repeat('‚òÖ', round($this->rating)); // –ó–≤—ë–∑–¥–æ—á–∫–∏
                $description[] = "–†–µ–π—Ç–∏–Ω–≥ {$this->rating} {$stars} ({$this->reviews_count} –æ—Ç–∑—ã–≤–æ–≤)";
            }
            
            // 6. –¶–µ–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å —É—Å–ª—É–≥–∏)
            $minPrice = $this->services()
                ->where('status', 'active')
                ->min('price');
                
            if ($minPrice) {
                $description[] = "–¶–µ–Ω—ã –æ—Ç " . number_format($minPrice, 0, '', ' ') . " ‚ÇΩ";
            }
            
            // –°–æ–±–∏—Ä–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            $this->meta_description = implode('. ', $description) . '.';
            
            // –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 150-160 —Å–∏–º–≤–æ–ª–æ–≤)
            if (mb_strlen($this->meta_description) > 160) {
                $this->meta_description = mb_substr($this->meta_description, 0, 157) . '...';
            }
        }
        
        return $this; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º $this –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
    }
    
    /**
     * üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–≥–æ–¥"
     * 
     * @param int $years –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç
     * @return string –≥–æ–¥/–≥–æ–¥–∞/–ª–µ—Ç
     */
    private function getYearWord(int $years): string
    {
        // –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–∏—Ñ—Ä–∞
        $lastDigit = $years % 10;
        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ —Ü–∏—Ñ—Ä—ã
        $lastTwoDigits = $years % 100;
        
        // –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏: 11-14 –ª–µ—Ç (–Ω–µ 11 –≥–æ–¥!)
        if ($lastTwoDigits >= 11 && $lastTwoDigits <= 14) {
            return '–ª–µ—Ç';
        }
        
        // –û–±—ã—á–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–∏—Ñ—Ä–µ
        return match($lastDigit) {
            1 => '–≥–æ–¥',        // 1, 21, 31 –≥–æ–¥
            2, 3, 4 => '–≥–æ–¥–∞', // 2-4, 22-24 –≥–æ–¥–∞  
            default => '–ª–µ—Ç'   // 0, 5-9 –ª–µ—Ç
        };
    }

    /* --------------------------------------------------------------------- */
    /*  Accessors & Mutators                                                 */
    /* --------------------------------------------------------------------- */

    /** URL –ø—Ä–æ—Ñ–∏–ª—è */
    public function getUrlAttribute(): string
{
    return route('masters.show', [
        'slug' => $this->slug,
        'master' => $this->id
    ]);
}

    /** –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å —Å–∞–ª–æ–Ω–∞ */
    public function getFullSalonAddressAttribute(): string
    {
        $parts = array_filter([
            $this->city,
            $this->district,
            $this->metro_station ? "–º. {$this->metro_station}" : null,
            $this->salon_address,
        ]);

        return implode(', ', $parts);
    }
    
    /**
     * üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª–Ω—ã–π URL —Å –¥–æ–º–µ–Ω–æ–º
     * @return string
     */
    public function getFullUrlAttribute(): string
    {
        return config('app.url') . '/master/' . $this->slug;
    }
    
    /**
     * üî• –ù–û–í–´–ô –ú–ï–¢–û–î: URL –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö (–±–µ–∑ https://)
     * @return string
     */
    public function getShareUrlAttribute(): string
    {
        return str_replace(['https://', 'http://'], '', $this->full_url);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å URL –∞–≤–∞—Ç–∞—Ä–∞
     */
    public function getAvatarUrlAttribute(): string
    {
        return \App\Helpers\ImageHelper::getImageUrl($this->avatar, '/images/no-avatar.jpg');
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–≤–∫–ª—é—á–∞—è –∞–≤–∞—Ç–∞—Ä)
     */
    public function getAllPhotosAttribute(): array
    {
        $photos = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –∫–∞–∫ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
        if ($this->avatar) {
            $photos[] = $this->avatar_url;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏
        if ($this->photos) {
            foreach ($this->photos as $photo) {
                $photos[] = \App\Helpers\ImageHelper::getImageUrl($photo->path);
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        if (empty($photos)) {
            $photos[] = '/images/no-photo.jpg';
        }
        
        return $photos;
    }

    /* --------------------------------------------------------------------- */
    /*  Scopes                                                               */
    /* --------------------------------------------------------------------- */

    /** Scope: –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞ */
    public function scopeActive($query)
    {
        return $query->where('status', 'active');
    }

    /** Scope: –ø—Ä–µ–º–∏—É–º –º–∞—Å—Ç–µ—Ä–∞ */
    public function scopePremium($query)
    {
        return $query->where('is_premium', true)
                     ->where('premium_until', '>=', now());
    }

    /** Scope: –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞ */
    public function scopeVerified($query)
    {
        return $query->where('is_verified', true);
    }

    /** Scope: –ø–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥—É */
    public function scopeInCity($query, $city)
    {
        return $query->where('city', $city);
    }

    /** Scope: –ø–æ–∏—Å–∫ –ø–æ —Ä–∞–π–æ–Ω—É */
    public function scopeInDistrict($query, $district)
    {
        return $query->where('district', $district);
    }
}