<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;

return new class extends Migration
{
    /**
     * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ outcall –ø–æ–ª–µ–π –∏–∑ prices –≤ geo
     * 
     * –ü–†–û–ë–õ–ï–ú–ê: –ú–µ—Å—Ç–∞ –≤—ã–µ–∑–¥–∞ (outcall_apartment, outcall_hotel –∏ —Ç.–¥.) –ª–æ–≥–∏—á–µ—Å–∫–∏
     * –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º, –Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –ø–æ–ª–µ prices.
     * 
     * –†–ï–®–ï–ù–ò–ï: –ü–µ—Ä–µ–Ω–æ—Å–∏–º —ç—Ç–∏ –ø–æ–ª—è –∏–∑ prices –≤ geo –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
     */
    public function up(): void
    {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–ø—É—Å—Ç—ã–º –ø–æ–ª–µ–º prices
        $ads = DB::table('ads')
            ->whereNotNull('prices')
            ->get();
        
        foreach ($ads as $ad) {
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON –ø–æ–ª—è
            $prices = json_decode($ad->prices, true);
            $geo = json_decode($ad->geo, true);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ prices —ç—Ç–æ –º–∞—Å—Å–∏–≤
            if (!is_array($prices)) {
                continue;
            }
            
            // –ï—Å–ª–∏ geo –Ω–µ –º–∞—Å—Å–∏–≤ –∏–ª–∏ null - —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            if (!is_array($geo)) {
                $geo = [];
            }
            
            // –ü–æ–ª—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∏–∑ prices –≤ geo
            $fieldsToMigrate = [
                'outcall_apartment',
                'outcall_hotel', 
                'outcall_house',
                'outcall_sauna',
                'outcall_office',
                'taxi_included'
            ];
            
            $updated = false;
            
            // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ø–æ–ª—è –∏–∑ prices –≤ geo
            foreach ($fieldsToMigrate as $field) {
                if (isset($prices[$field])) {
                    // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ geo
                    $geo[$field] = $prices[$field];
                    // –£–¥–∞–ª—è–µ–º –∏–∑ prices
                    unset($prices[$field]);
                    $updated = true;
                }
            }
            
            // –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
            if ($updated) {
                DB::table('ads')
                    ->where('id', $ad->id)
                    ->update([
                        'prices' => json_encode($prices),
                        'geo' => json_encode($geo),
                        'updated_at' => now()
                    ]);
                    
                echo "‚úÖ Migrated outcall fields for ad ID {$ad->id}\n";
            }
        }
        
        echo "üéâ Migration completed! Outcall fields moved from prices to geo.\n";
    }

    /**
     * –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—è –æ–±—Ä–∞—Ç–Ω–æ –≤ prices
     */
    public function down(): void
    {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–ø—É—Å—Ç—ã–º –ø–æ–ª–µ–º geo
        $ads = DB::table('ads')
            ->whereNotNull('geo')
            ->get();
        
        foreach ($ads as $ad) {
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON –ø–æ–ª—è
            $prices = json_decode($ad->prices, true) ?: [];
            $geo = json_decode($ad->geo, true);
            
            if (!is_array($geo)) {
                continue;
            }
            
            // –ü–æ–ª—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ –∏–∑ geo –≤ prices
            $fieldsToMigrate = [
                'outcall_apartment',
                'outcall_hotel',
                'outcall_house',
                'outcall_sauna', 
                'outcall_office',
                'taxi_included'
            ];
            
            $updated = false;
            
            // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ø–æ–ª—è –æ–±—Ä–∞—Ç–Ω–æ –∏–∑ geo –≤ prices
            foreach ($fieldsToMigrate as $field) {
                if (isset($geo[$field])) {
                    // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ prices
                    $prices[$field] = $geo[$field];
                    // –£–¥–∞–ª—è–µ–º –∏–∑ geo
                    unset($geo[$field]);
                    $updated = true;
                }
            }
            
            // –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
            if ($updated) {
                DB::table('ads')
                    ->where('id', $ad->id)
                    ->update([
                        'prices' => json_encode($prices),
                        'geo' => json_encode($geo),
                        'updated_at' => now()
                    ]);
                    
                echo "‚Ü©Ô∏è Rolled back outcall fields for ad ID {$ad->id}\n";
            }
        }
        
        echo "‚Ü©Ô∏è Rollback completed! Outcall fields moved back to prices.\n";
    }
};
