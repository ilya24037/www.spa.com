import { defineStore } from 'pinia'
import axios from 'axios'

export const useBookingStore = defineStore('booking', {
  // üì¶ –°–û–°–¢–û–Ø–ù–ò–ï - –∑–¥–µ—Å—å —Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ
  state: () => ({
    // –¢–µ–∫—É—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    currentBooking: {
      masterId: null,
      serviceId: null,
      date: null,
      time: null,
      clientName: '',
      clientPhone: '',
      clientEmail: '',
      address: '',
      comment: '',
      locationType: 'salon',
      paymentMethod: 'cash'
    },
    
    // –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è
    availableDates: [],
    timeSlots: [],
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    isLoading: false,
    error: null,
    
    // –ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userBookings: [],
    
    // –î–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    lastBooking: null
  }),

  // üîç –ì–ï–¢–¢–ï–†–´ - –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  getters: {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    isBookingValid: (state) => {
      return !!(
        state.currentBooking.masterId &&
        state.currentBooking.serviceId &&
        state.currentBooking.date &&
        state.currentBooking.time &&
        state.currentBooking.clientName &&
        state.currentBooking.clientPhone
      )
    },
    
    // –ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    formattedDate: (state) => {
      if (!state.currentBooking.date) return ''
      
      const date = new Date(state.currentBooking.date)
      return date.toLocaleDateString('ru-RU', {
        weekday: 'long',
        day: 'numeric',
        month: 'long',
        year: 'numeric'
      })
    },
    
    // –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    totalPrice: (state) => {
      let price = 0
      
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ —Ü–µ–Ω—ã
      // price = state.currentService?.price || 0
      // if (state.currentBooking.locationType === 'home') price += 500
      
      return price
    },
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    hasAvailableSlots: (state) => {
      return state.timeSlots.length > 0
    }
  },

  // üéØ –î–ï–ô–°–¢–í–ò–Ø - —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  actions: {
    // üìÖ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –º–∞—Å—Ç–µ—Ä–∞
    async loadAvailableDates(masterId) {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞:', masterId)
      
      this.isLoading = true
      this.error = null
      
      try {
        // –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
        const response = await axios.get(`/api/masters/${masterId}/available-dates`)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—ã
        this.availableDates = response.data.dates
        
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞—Ç:', this.availableDates.length)
        
        return this.availableDates
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—Ç:', error)
        this.error = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã'
        
        // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (—É–±–µ—Ä–∏—Ç–µ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç API)
        this.availableDates = this.generateTestDates()
        
        throw error
      } finally {
        this.isLoading = false
      }
    },
    
    // ‚è∞ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –¥–∞—Ç—É
    async loadTimeSlots(masterId, date) {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –¥–∞—Ç—É:', date)
      
      this.isLoading = true
      this.error = null
      
      try {
        // –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
        const response = await axios.get(`/api/masters/${masterId}/time-slots`, {
          params: { date }
        })
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ—Ç—ã
        this.timeSlots = response.data.slots
        
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–ª–æ—Ç–æ–≤:', this.timeSlots.length)
        
        return this.timeSlots
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ—Ç–æ–≤:', error)
        this.error = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è'
        
        // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (—É–±–µ—Ä–∏—Ç–µ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç API)
        this.timeSlots = this.generateTestTimeSlots()
        
        throw error
      } finally {
        this.isLoading = false
      }
    },
    
    // üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    async createBooking(bookingData) {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:', bookingData)
      
      this.isLoading = true
      this.error = null
      
      try {
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const dataToSend = {
          master_id: bookingData.masterId,
          service_id: bookingData.serviceId,
          date: bookingData.date,
          time: bookingData.time,
          location_type: bookingData.locationType,
          client_name: bookingData.clientName,
          client_phone: bookingData.clientPhone,
          client_email: bookingData.clientEmail,
          address: bookingData.address,
          comment: bookingData.comment,
          payment_method: bookingData.paymentMethod
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await axios.post('/api/bookings', dataToSend)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.lastBooking = response.data.booking
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        this.resetCurrentBooking()
        
        console.log('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', this.lastBooking.id)
        
        return this.lastBooking
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if (error.response?.status === 422) {
          this.error = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã'
          throw error.response.data.errors
        }
        
        this.error = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        throw error
      } finally {
        this.isLoading = false
      }
    },
    
    // üìã –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async loadUserBookings() {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π')
      
      try {
        const response = await axios.get('/api/user/bookings')
        this.userBookings = response.data.bookings
        
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', this.userBookings.length)
        
        return this.userBookings
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error)
        this.userBookings = []
        throw error
      }
    },
    
    // ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    async cancelBooking(bookingId) {
      console.log('üóëÔ∏è –û—Ç–º–µ–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:', bookingId)
      
      try {
        await axios.post(`/api/bookings/${bookingId}/cancel`)
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
        this.userBookings = this.userBookings.filter(b => b.id !== bookingId)
        
        console.log('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
        
        return true
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã:', error)
        throw error
      }
    },
    
    // üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    setBookingData(data) {
      this.currentBooking = { ...this.currentBooking, ...data }
    },
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –∏ —É—Å–ª—É–≥—É
    setMasterAndService(masterId, serviceId) {
      this.currentBooking.masterId = masterId
      this.currentBooking.serviceId = serviceId
    },
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É
    setDate(date) {
      this.currentBooking.date = date
      this.currentBooking.time = null // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∞—Ç—ã
    },
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è
    setTime(time) {
      this.currentBooking.time = time
    },
    
    // –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    resetCurrentBooking() {
      this.currentBooking = {
        masterId: null,
        serviceId: null,
        date: null,
        time: null,
        clientName: '',
        clientPhone: '',
        clientEmail: '',
        address: '',
        comment: '',
        locationType: 'salon',
        paymentMethod: 'cash'
      }
      this.availableDates = []
      this.timeSlots = []
    },
    
    // üß™ –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï (—É–¥–∞–ª–∏—Ç–µ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ backend)
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞—Ç
    generateTestDates() {
      const dates = []
      const today = new Date()
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä—ë–¥
      for (let i = 1; i <= 30; i++) {
        const date = new Date(today)
        date.setDate(today.getDate() + i)
        
        // 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —á—Ç–æ –¥–µ–Ω—å –¥–æ—Å—Ç—É–ø–µ–Ω
        if (Math.random() > 0.3) {
          dates.push(date.toISOString().split('T')[0])
        }
      }
      
      return dates
    },
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
    generateTestTimeSlots() {
      const slots = []
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã —Å 9:00 –¥–æ 20:00
      for (let hour = 9; hour < 20; hour++) {
        // –°–ª–æ—Ç—ã –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        slots.push({
          time: `${hour}:00`,
          available: Math.random() > 0.3 // 70% –¥–æ—Å—Ç—É–ø–Ω—ã
        })
        
        if (hour < 19) {
          slots.push({
            time: `${hour}:30`,
            available: Math.random() > 0.3
          })
        }
      }
      
      return slots
    }
  }
})