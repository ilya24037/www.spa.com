import { defineStore } from 'pinia'
import { ref, computed, type Ref } from 'vue'
import axios, { type AxiosResponse } from 'axios'

// =================== TYPES ===================
export interface BookingData {
  masterId: number
  serviceId: number
  date: string
  time: string
  locationType: 'home' | 'salon'
  clientName: string
  clientPhone: string
  clientEmail?: string
  address?: string
  addressDetails?: string
  comment?: string
  paymentMethod: 'cash' | 'card'
}

export interface BookingResult {
  id: number
  status: 'pending' | 'confirmed' | 'cancelled' | 'completed'
  master_profile_id: number
  service_id: number
  booking_date: string
  booking_time: string
  service_location: 'home' | 'salon'
  client_name: string
  client_phone: string
  client_email?: string
  address?: string
  client_comment?: string
  payment_method: 'cash' | 'card'
  payment_status?: 'pending' | 'paid' | 'failed'
  total_price?: number
  created_at: string
  updated_at: string
  cancelled_at?: string
  confirmed_at?: string
  paid_at?: string
}

export interface TimeSlot {
  time: string
  available: boolean
  price?: number
}

export interface BookingSlots {
  [date: string]: TimeSlot[]
}

interface BookingState {
  masterId: number | null
  serviceId: number | null
  date: string | null
  time: string | null
  locationType: 'home' | 'salon'
  clientName: string
  clientPhone: string
  clientEmail: string
  address: string
  comment: string
  paymentMethod: 'cash' | 'card'
}

export interface BookingStats {
  total: number
  pending: number
  confirmed: number
  completed: number
  cancelled: number
}

interface ApiError {
  response?: {
    status?: number
    data?: {
      message?: string
      errors?: Record<string, string[]>
    }
  }
}

// =================== STORE ===================
export const useBookingStore = defineStore('booking', () => {
  
  // =================== –°–û–°–¢–û–Ø–ù–ò–ï ===================
  
  const bookings: import("vue").Ref<BookingResult[]> = ref([])
  const currentBooking: import("vue").Ref<BookingState> = ref({
    masterId: null,
    serviceId: null,
    date: null,
    time: null,
    locationType: 'home', // 'home' –∏–ª–∏ 'salon'
    clientName: '',
    clientPhone: '',
    clientEmail: '',
    address: '',
    comment: '',
    paymentMethod: 'cash'
  })
  
  const availableSlots: import("vue").Ref<BookingSlots> = ref({})
  const isLoading: import("vue").Ref<boolean> = ref(false)
  const error: import("vue").Ref<string | null> = ref(null)
  const lastBooking: import("vue").Ref<BookingResult | null> = ref(null)
  
  // =================== –í–´–ß–ò–°–õ–Ø–ï–ú–´–ï ===================
  
  const isFormValid = computed((): boolean => {
    return Boolean(
      currentBooking.value.masterId &&
      currentBooking.value.serviceId &&
      currentBooking.value.date &&
      currentBooking.value.time &&
      currentBooking.value.clientName &&
      currentBooking.value.clientPhone
    )
  })
  
  const totalBookings = computed((): number => bookings.value.length)
  
  const pendingBookings = computed((): BookingResult[] => 
    bookings.value.filter(b => b.status === 'pending')
  )
  
  const confirmedBookings = computed((): BookingResult[] => 
    bookings.value.filter(b => b.status === 'confirmed')
  )
  
  // =================== –î–ï–ô–°–¢–í–ò–Ø ===================
  
  // üìã –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  async function fetchBookings(): Promise<BookingResult[]> {
    
    isLoading.value = true
    error.value = null
    
    try {
      const response: AxiosResponse<{ data?: BookingResult[] } | BookingResult[]> = await axios.get('/api/bookings', {
        headers: {
          'Authorization': `Bearer ${getAuthToken()}`,
          'Accept': 'application/json'
        }
      })
      
      bookings.value = response.data.data || response.data as BookingResult[]
      
      return bookings.value
    } catch (err: unknown) {
      const error = err as ApiError
      
      if (error.response?.status === 401) {
        setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')
      } else {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
      }
      
      throw error
    } finally {
      isLoading.value = false
    }
  }
  
  // üìÖ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
  async function fetchAvailableSlots(
    masterId: number, 
    serviceId: number, 
    date: string | null = null
  ): Promise<BookingSlots> {
    
    isLoading.value = true
    error.value = null
    
    try {
      const params: Record<string, string | number> = {
        master_profile_id: masterId,
        service_id: serviceId
      }
      
      if (date) {
        params.date = date
      }
      
      const response: AxiosResponse<{ slots: TimeSlot[] | BookingSlots }> = await axios.get('/api/bookings/available-slots', {
        params,
        headers: {
          'Accept': 'application/json'
        }
      })
      
      if (date) {
        // –°–ª–æ—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
        availableSlots.value[date] = response.data.slots as TimeSlot[]
      } else {
        // –°–ª–æ—Ç—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
        availableSlots.value = response.data.slots as BookingSlots
      }
      
      return availableSlots.value
    } catch (err: unknown) {
      const error = err as ApiError
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã')
      throw error
    } finally {
      isLoading.value = false
    }
  }
  
  // üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î)
  async function createBooking(bookingData: BookingData): Promise<BookingResult> {
    
    isLoading.value = true
    error.value = null
    
    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      const dataToSend = {
        master_profile_id: bookingData.masterId,
        service_id: bookingData.serviceId,
        booking_date: bookingData.date,
        booking_time: bookingData.time,
        service_location: bookingData.locationType,
        client_name: bookingData.clientName,
        client_phone: bookingData.clientPhone,
        client_email: bookingData.clientEmail,
        address: bookingData.address,
        address_details: bookingData.addressDetails,
        client_comment: bookingData.comment,
        payment_method: bookingData.paymentMethod
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π API endpoint
      const response: AxiosResponse<{ booking: BookingResult }> = await axios.post('/api/bookings', dataToSend, {
        headers: {
          'Authorization': `Bearer ${getAuthToken()}`,
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      })
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      lastBooking.value = response.data.booking
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
      bookings.value.unshift(response.data.booking)
      
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      resetCurrentBooking()
      
      return response.data.booking
    } catch (err: unknown) {
      const error = err as ApiError
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      if (error.response?.status === 422) {
        const validationErrors = error.response.data?.errors || {}
        const errorMessage = Object.values(validationErrors).flat().join(', ') || error.response.data?.message
        setError(errorMessage || '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏')
        throw validationErrors
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
      if (error.response?.status === 401) {
        setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')
      } else {
        setError(error.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')
      }
      
      throw error
    } finally {
      isLoading.value = false
    }
  }
  
  // ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  async function cancelBooking(bookingId: number, reason: string | null = null): Promise<any> {
    
    isLoading.value = true
    error.value = null
    
    try {
      const response: AxiosResponse<any> = await axios.post(`/api/bookings/${bookingId}/cancel`, 
        { reason },
        {
          headers: {
            'Authorization': `Bearer ${getAuthToken()}`,
            'Accept': 'application/json'
          }
        }
      )
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
      const booking = bookings.value.find(b => b.id === bookingId)
      if (booking) {
        booking.status = 'cancelled'
        booking.cancelled_at = new Date().toISOString()
      }
      
      return response.data
    } catch (err: unknown) {
      const error = err as ApiError
      setError(error.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')
      throw error
    } finally {
      isLoading.value = false
    }
  }
  
  // ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤)
  async function confirmBooking(bookingId: number): Promise<any> {
    
    isLoading.value = true
    error.value = null
    
    try {
      const response: AxiosResponse<any> = await axios.post(`/api/bookings/${bookingId}/confirm`, {}, {
        headers: {
          'Authorization': `Bearer ${getAuthToken()}`,
          'Accept': 'application/json'
        }
      })
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
      const booking = bookings.value.find(b => b.id === bookingId)
      if (booking) {
        booking.status = 'confirmed'
        booking.confirmed_at = new Date().toISOString()
      }
      
      return response.data
    } catch (err: unknown) {
      const error = err as ApiError
      setError(error.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')
      throw error
    } finally {
      isLoading.value = false
    }
  }
  
  // üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —É—Å–ª—É–≥—É (–¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤)
  async function completeBooking(bookingId: number): Promise<any> {
    
    isLoading.value = true
    error.value = null
    
    try {
      const response: AxiosResponse<any> = await axios.post(`/api/bookings/${bookingId}/complete`, {}, {
        headers: {
          'Authorization': `Bearer ${getAuthToken()}`,
          'Accept': 'application/json'
        }
      })
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
      const booking = bookings.value.find(b => b.id === bookingId)
      if (booking) {
        booking.status = 'completed'
        booking.payment_status = 'paid'
        booking.paid_at = new Date().toISOString()
      }
      
      return response.data
    } catch (err: unknown) {
      const error = err as ApiError
      setError(error.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —É—Å–ª—É–≥—É')
      throw error
    } finally {
      isLoading.value = false
    }
  }
  
  // =================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===================
  
  // üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  function resetCurrentBooking(): void {
    currentBooking.value = {
      masterId: null,
      serviceId: null,
      date: null,
      time: null,
      locationType: 'home',
      clientName: '',
      clientPhone: '',
      clientEmail: '',
      address: '',
      comment: '',
      paymentMethod: 'cash'
    }
  }
  
  // üìù –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
  function updateBookingData(data: Partial<BookingState>): void {
    Object.assign(currentBooking.value, data)
  }
  
  // üîë –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  function getAuthToken(): string {
    // –î–ª—è Laravel Sanctum —Ç–æ–∫–µ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ cookie –∏–ª–∏ localStorage
    // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º CSRF —Ç–æ–∫–µ–Ω
    const token = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
    return token || ''
  }
  
  // üßπ –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫–∏
  function clearError(): void {
    error.value = null
  }
  
  // ‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—à–∏–±–∫—É
  function setError(message: string): void {
    error.value = message
  }
  
  // üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  function getBookingStats(): BookingStats {
    return {
      total: totalBookings.value,
      pending: pendingBookings.value.length,
      confirmed: confirmedBookings.value.length,
      completed: bookings.value.filter(b => b.status === 'completed').length,
      cancelled: bookings.value.filter(b => b.status === 'cancelled').length
    }
  }
  
  // =================== –í–û–ó–í–†–ê–©–ê–ï–ú –ò–ù–¢–ï–†–§–ï–ô–° ===================
  
  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    bookings,
    currentBooking,
    availableSlots,
    isLoading,
    error,
    lastBooking,
    
    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ
    isFormValid,
    totalBookings,
    pendingBookings,
    confirmedBookings,
    
    // –î–µ–π—Å—Ç–≤–∏—è
    fetchBookings,
    fetchAvailableSlots,
    createBooking,
    cancelBooking,
    confirmBooking,
    completeBooking,
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
    resetCurrentBooking,
    updateBookingData,
    clearError,
    getBookingStats
  }
})