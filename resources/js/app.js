import '../css/app.css';
import './bootstrap';

import { createInertiaApp } from '@inertiajs/vue3';
import { resolvePageComponent } from 'laravel-vite-plugin/inertia-helpers';
import { createApp, h } from 'vue';
import { createPinia } from 'pinia';

import { ZiggyVue } from 'ziggy-js';
import { Ziggy } from './ziggy';
import { route } from 'ziggy-js';

const appName = import.meta.env.VITE_APP_NAME || 'Laravel';

createInertiaApp({
    title: (title) => `${title} - ${appName}`,
    resolve: async (name) => {
        const page = await resolvePageComponent(
            `./Pages/${name}.vue`,
            import.meta.glob('./Pages/**/*.vue'),
        );

        if (!page.default.layout) {
            const AppLayout = await import('./Layouts/AppLayout.vue');
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            // –¢–µ–ø–µ—Ä—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
            const isAuthPage = false; // –û—Ç–∫–ª—é—á–∞–µ–º —Å–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            window.isAuthPage = isAuthPage;
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—ã–π AppLayout
            page.default.layout = AppLayout.default;
        }

        return page;
    },
    setup({ el, App, props, plugin }) {
        const pinia = createPinia();

        const app = createApp({ render: () => h(App, props) });

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Vue
        app.config.errorHandler = (err, instance, info) => {
            console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ Vue:', err);
            console.error('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç:', instance);
            console.error('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', info);

            // üî• –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û - endpoint –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            /*
            if (window.axios) {
                window.axios.post('/api/log-error', {
                    error: err.toString(),
                    stack: err.stack,
                    component: instance?.$options.name || 'Unknown',
                    info: info
                }).catch(() => {});
            }
            */

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (window.toast) {
                window.toast.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.');
            }
        };

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π Vue (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        app.config.warnHandler = (msg, instance, trace) => {
            console.warn('Vue –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:', msg);
        };

        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –î–ò–†–ï–ö–¢–ò–í–ê CLICK-OUTSIDE
        app.directive('click-outside', {
            mounted(el, binding) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ el —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (!el) return;
                
                el._clickOutsideHandler = function(event) {
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
                    if (!el || !document.body.contains(el)) {
                        return;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –±—ã–ª –≤–Ω–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                    if (!(el === event.target || el.contains(event.target))) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ binding.value —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è
                        if (binding.value && typeof binding.value === 'function') {
                            binding.value(event);
                        }
                    }
                };
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
                setTimeout(() => {
                    document.addEventListener('click', el._clickOutsideHandler);
                }, 0);
            },
            unmounted(el) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                if (el && el._clickOutsideHandler) {
                    document.removeEventListener('click', el._clickOutsideHandler);
                    delete el._clickOutsideHandler;
                }
            }
        });

        // –î–∏—Ä–µ–∫—Ç–∏–≤–∞ –¥–ª—è –∞–≤—Ç–æ—Ñ–æ–∫—É—Å–∞
        app.directive('focus', {
            mounted(el) {
                if (el && typeof el.focus === 'function') {
                    el.focus();
                }
            }
        });

        // –î–∏—Ä–µ–∫—Ç–∏–≤–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
        app.directive('resize', {
            mounted(el, binding) {
                if (!el || !binding.value) return;
                
                try {
                    const resizeObserver = new ResizeObserver(entries => {
                        if (binding.value && typeof binding.value === 'function') {
                            binding.value(entries[0]);
                        }
                    });
                    resizeObserver.observe(el);
                    el._resizeObserver = resizeObserver;
                } catch (error) {
                    console.warn('ResizeObserver –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:', error);
                }
            },
            unmounted(el) {
                if (el && el._resizeObserver) {
                    el._resizeObserver.disconnect();
                    delete el._resizeObserver;
                }
            }
        });

        // –î–∏—Ä–µ–∫—Ç–∏–≤–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        app.directive('clipboard', {
            mounted(el, binding) {
                if (!el) return;
                
                el._clickHandler = () => {
                    const text = binding.value || el.textContent;
                    
                    if (navigator.clipboard && navigator.clipboard.writeText) {
                        navigator.clipboard.writeText(text).then(() => {
                            if (window.toast) {
                                window.toast.success('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
                            }
                        }).catch(err => {
                            console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
                            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                            fallbackCopyTextToClipboard(text);
                        });
                    } else {
                        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                        fallbackCopyTextToClipboard(text);
                    }
                };
                
                el.addEventListener('click', el._clickHandler);
            },
            unmounted(el) {
                if (el && el._clickHandler) {
                    el.removeEventListener('click', el._clickHandler);
                    delete el._clickHandler;
                }
            }
        });

        // –î–∏—Ä–µ–∫—Ç–∏–≤–∞ –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        app.directive('lazy', {
            mounted(el) {
                if (!el || !('IntersectionObserver' in window)) return;
                
                const imageObserver = new IntersectionObserver((entries, observer) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            const img = entry.target;
                            if (img.dataset.src) {
                                img.src = img.dataset.src;
                                img.classList.remove('lazy');
                                observer.unobserve(img);
                            }
                        }
                    });
                });
                
                imageObserver.observe(el);
                el._imageObserver = imageObserver;
            },
            unmounted(el) {
                if (el && el._imageObserver) {
                    el._imageObserver.disconnect();
                    delete el._imageObserver;
                }
            }
        });

        app.use(plugin);
        app.use(ZiggyVue, Ziggy);
        app.use(pinia);

        app.config.globalProperties.route = route;

        return app.mount(el);
    },
    progress: {
        color: '#4B5563',
    },
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö
function fallbackCopyTextToClipboard(text) {
    const textArea = document.createElement("textarea");
    textArea.value = text;
    textArea.style.top = "0";
    textArea.style.left = "0";
    textArea.style.position = "fixed";
    
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    
    try {
        const successful = document.execCommand('copy');
        if (successful && window.toast) {
            window.toast.success('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        }
    } catch (err) {
        console.error('Fallback: –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', err);
    }
    
    document.body.removeChild(textArea);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ JavaScript
window.addEventListener('error', (event) => {
    console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è JS –æ—à–∏–±–∫–∞:', event.error);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö Promise rejection
window.addEventListener('unhandledrejection', (event) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π Promise rejection:', event.reason);
    event.preventDefault();
});