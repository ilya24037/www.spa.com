# Vue Components Rules (правила компонентов)

## Component Structure (структура компонента)
- Use Composition API with <script setup>
- Type all props with TypeScript interfaces
- Emit events, never modify props directly
- Keep components focused and reusable

Use this template when creating components:
@component-template.vue

## Script Setup Template (шаблон script setup)
```vue
<script setup lang="ts">
interface Props {
  title: string
  description?: string
  isActive: boolean
}

interface Emits {
  (e: 'update:title', value: string): void
  (e: 'toggle'): void
}

const props = defineProps<Props>()
const emit = defineEmits<Emits>()

// Component logic here
</script>
```

## Props & Emits (свойства и события)
- Always type props with interfaces
- Use defineEmits for type safety
- Never modify props directly
- Emit events for parent communication

## Composition API (композиционный API)
- Use <script setup> syntax
- Use composables for reusable logic
- Keep reactive state local
- Use Pinia for global state

## Template Structure (структура шаблона)
- Use semantic HTML elements
- Apply Tailwind CSS classes
- Keep template readable
- Use v-if/v-show appropriately

## Styling (стилизация)
- Use Tailwind CSS utility classes
- Mobile-first approach
- Consistent spacing and colors
- Responsive design patterns

## Component Communication (взаимодействие)
- Props down, events up
- Use provide/inject sparingly
- Pinia stores for complex state
- Keep parent-child communication simple

## Performance (производительность)
- Use v-memo for expensive renders
- Lazy load components when possible
- Optimize reactive dependencies
- Avoid unnecessary re-renders

## Testing (тестирование)
- Test component behavior
- Mock external dependencies
- Test user interactions
- Cover edge cases
