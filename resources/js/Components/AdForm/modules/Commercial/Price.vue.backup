<template>
  <FormSection
    title="–¶–µ–Ω–∞ –∑–∞ —á–∞—Å"
    hint="–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–∏—Ö —É—Å–ª—É–≥. –¶–µ–Ω–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏—é –≤ –ø–æ–∏—Å–∫–µ"
    required
    :error="errors.price_per_hour"
  >
    <div class="price-input-container">
      <!-- –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞ -->
      <FormField
        label="–¶–µ–Ω–∞ –∑–∞ —á–∞—Å"
        hint="–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏"
        :error="errors.price_per_hour"
      >
        <div class="price-input-group">
          <input
            v-model="localPricePerHour"
            @input="updatePricePerHour"
            type="number"
            min="500"
            max="50000"
            step="500"
            placeholder="3000"
            class="price-input"
          />
          <span class="price-suffix">‚ÇΩ/—á–∞—Å</span>
        </div>
      </FormField>

      <!-- –¶–µ–Ω–∞ –∑–∞ –≤—ã–µ–∑–¥ -->
      <FormField
        label="–¶–µ–Ω–∞ –∑–∞ –≤—ã–µ–∑–¥"
        hint="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç–∞ –∑–∞ –≤—ã–µ–∑–¥ –∫ –∫–ª–∏–µ–Ω—Ç—É"
        :error="errors.outcall_price"
      >
        <div class="price-input-group">
          <input
            v-model="localOutcallPrice"
            @input="updateOutcallPrice"
            type="number"
            min="0"
            max="10000"
            step="100"
            placeholder="500"
            class="price-input"
          />
          <span class="price-suffix">‚ÇΩ</span>
        </div>
      </FormField>

      <!-- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è -->
      <FormField
        label="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è"
        hint="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–∞–Ω—Å–∞"
        :error="errors.min_duration"
      >
        <select v-model="localMinDuration" @change="updateMinDuration" class="duration-select">
          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è</option>
          <option value="30">30 –º–∏–Ω—É—Ç</option>
          <option value="60">1 —á–∞—Å</option>
          <option value="90">1.5 —á–∞—Å–∞</option>
          <option value="120">2 —á–∞—Å–∞</option>
          <option value="180">3 —á–∞—Å–∞</option>
        </select>
      </FormField>

      <!-- –°–∫–∏–¥–∫–∞ –Ω–æ–≤—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º -->
      <FormField
        label="–°–∫–∏–¥–∫–∞ –Ω–æ–≤—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"
        hint="–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"
        :error="errors.new_client_discount"
      >
        <div class="discount-input-group">
          <input
            v-model="localNewClientDiscount"
            @input="updateNewClientDiscount"
            type="number"
            min="0"
            max="50"
            step="5"
            placeholder="10"
            class="price-input"
          />
          <span class="price-suffix">%</span>
        </div>
      </FormField>
    </div>

    <!-- –ë—ã—Å—Ç—Ä—ã–µ —Ü–µ–Ω—ã -->
    <div class="quick-prices">
      <p class="quick-prices-label">–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä:</p>
      <div class="quick-price-buttons">
        <button
          v-for="price in quickPrices"
          :key="price"
          type="button"
          @click="setQuickPrice(price)"
          class="quick-price-btn"
        >
          {{ price }} ‚ÇΩ
        </button>
      </div>
    </div>

    <!-- –°–æ–≤–µ—Ç –ø–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é -->
    <div class="pricing-tip">
      <div class="tip-icon">üí°</div>
      <div class="tip-content">
        <p class="tip-title">–°–æ–≤–µ—Ç –ø–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é</p>
        <p class="tip-text">
          –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ: <strong>3000-5000 ‚ÇΩ/—á–∞—Å</strong>. 
          –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤.
        </p>
      </div>
    </div>
  </FormSection>
</template>

<script setup>
import { ref, watch } from 'vue'
import FormSection from '@/Components/UI/Forms/FormSection.vue'
import FormField from '@/Components/UI/Forms/FormField.vue'

const props = defineProps({
  pricePerHour: { type: [String, Number], default: '' },
  outcallPrice: { type: [String, Number], default: '' },
  minDuration: { type: [String, Number], default: '' },
  newClientDiscount: { type: [String, Number], default: '' },
  errors: { type: Object, default: () => ({}) }
})

const emit = defineEmits([
  'update:pricePerHour',
  'update:outcallPrice', 
  'update:minDuration',
  'update:newClientDiscount'
])

// –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–∏)
const localPricePerHour = ref(String(props.pricePerHour || ''))
const localOutcallPrice = ref(String(props.outcallPrice || ''))
const localMinDuration = ref(String(props.minDuration || ''))
const localNewClientDiscount = ref(String(props.newClientDiscount || ''))

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ–ø—Å–æ–≤
watch(() => props.pricePerHour, (newValue) => { 
  localPricePerHour.value = String(newValue || '') 
})
watch(() => props.outcallPrice, (newValue) => { 
  localOutcallPrice.value = String(newValue || '') 
})
watch(() => props.minDuration, (newValue) => { 
  localMinDuration.value = String(newValue || '') 
})
watch(() => props.newClientDiscount, (newValue) => { 
  localNewClientDiscount.value = String(newValue || '') 
})

// –ú–µ—Ç–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
const updatePricePerHour = () => emit('update:pricePerHour', localPricePerHour.value)
const updateOutcallPrice = () => emit('update:outcallPrice', localOutcallPrice.value)
const updateMinDuration = () => emit('update:minDuration', localMinDuration.value)
const updateNewClientDiscount = () => emit('update:newClientDiscount', localNewClientDiscount.value)

// –ë—ã—Å—Ç—Ä—ã–µ —Ü–µ–Ω—ã
const quickPrices = [2000, 2500, 3000, 3500, 4000, 5000, 6000]

const setQuickPrice = (price) => {
  localPricePerHour.value = String(price)
  updatePricePerHour()
}
</script>

<style scoped>
.price-input-container {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1.5rem;
}

.price-input-group,
.discount-input-group {
  position: relative;
  display: flex;
  align-items: center;
}

.price-input {
  flex: 1;
  padding: 0.75rem 1rem;
  border: 1px solid #d1d5db;
  border-radius: 0.5rem;
  font-size: 1rem;
  transition: border-color 0.2s;
}

.price-input:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.price-suffix {
  position: absolute;
  right: 1rem;
  color: #6b7280;
  font-weight: 500;
  pointer-events: none;
}

.duration-select {
  width: 100%;
  padding: 0.75rem 1rem;
  border: 1px solid #d1d5db;
  border-radius: 0.5rem;
  font-size: 1rem;
  background: white;
  transition: border-color 0.2s;
}

.duration-select:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.quick-prices {
  margin-top: 1.5rem;
  padding-top: 1.5rem;
  border-top: 1px solid #e5e7eb;
}

.quick-prices-label {
  font-size: 0.875rem;
  font-weight: 500;
  color: #374151;
  margin-bottom: 0.75rem;
}

.quick-price-buttons {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
}

.quick-price-btn {
  padding: 0.5rem 1rem;
  background: #f3f4f6;
  border: 1px solid #d1d5db;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  color: #374151;
  cursor: pointer;
  transition: all 0.2s;
}

.quick-price-btn:hover {
  background: #e5e7eb;
  border-color: #9ca3af;
}

.quick-price-btn:active {
  background: #3b82f6;
  border-color: #3b82f6;
  color: white;
}

.pricing-tip {
  display: flex;
  gap: 0.75rem;
  margin-top: 1.5rem;
  padding: 1rem;
  background: #fef3c7;
  border: 1px solid #fbbf24;
  border-radius: 0.5rem;
}

.tip-icon {
  font-size: 1.25rem;
  flex-shrink: 0;
}

.tip-content {
  flex: 1;
}

.tip-title {
  font-weight: 600;
  color: #92400e;
  margin-bottom: 0.25rem;
}

.tip-text {
  font-size: 0.875rem;
  color: #92400e;
  margin: 0;
}

@media (max-width: 768px) {
  .price-input-container {
    grid-template-columns: 1fr;
    gap: 1rem;
  }
  
  .quick-price-buttons {
    justify-content: center;
  }
}
</style>