import { ref, computed } from 'vue'
import type { Video } from '../model/types'

export interface VideoMetadata {
  dimensions: string
  duration: string
  fileSize: string
}

export interface VideoSource {
  url: string
  type: string
}

export function useVideoUpload() {
  const localVideos = ref<Video[]>([])
  const error = ref('')
  const videoMetadata = ref<VideoMetadata | null>(null)
  const isUploading = ref(false)

  const videoSources = computed((): VideoSource[] => {
    if (localVideos.value.length === 0) return []
    
    const video = localVideos.value[0]
    const sources: VideoSource[] = []
    
    if (video.url || video.thumbnail) {
      const url = video.url || video.thumbnail!
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞ –∏–ª–∏ MIME —Ç–∏–ø—É
      let type = video.format || ''
      if (!type) {
        if (url.includes('.webm')) type = 'video/webm'
        else if (url.includes('.mp4')) type = 'video/mp4'
        else if (url.includes('.ogv')) type = 'video/ogg'
      }
      
      sources.push({ url, type })
    }
    
    return sources
  })

  const processVideo = (file: File): Promise<Video> => {
    return new Promise((resolve, reject) => {
      error.value = ''
      isUploading.value = true
      
      if (!file.type.startsWith('video/')) {
        error.value = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª'
        isUploading.value = false
        reject(new Error('Invalid file type'))
        return
      }
      
      if (file.size > 100 * 1024 * 1024) {
        error.value = '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ 100MB'
        isUploading.value = false
        reject(new Error('File too large'))
        return
      }
      
      const reader = new FileReader()
      
      reader.onload = (e) => {
        const dataUrl = e.target?.result as string
        const video: Video = {
          id: Date.now(),
          file: file,
          url: dataUrl,           // –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
          thumbnail: dataUrl,     // –î–ª—è –ø—Ä–µ–≤—å—é
          format: file.type,
          size: file.size,
          isUploading: false
        }
        
        console.log('üé• processVideo: –°–æ–∑–¥–∞–Ω–æ –≤–∏–¥–µ–æ:', {
          id: video.id,
          hasUrl: !!video.url,
          hasThumbnail: !!video.thumbnail,
          format: video.format,
          size: video.size
        })
        
        isUploading.value = false
        resolve(video)
      }
      
      reader.onerror = () => {
        error.value = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞'
        isUploading.value = false
        reject(new Error('FileReader error'))
      }
      
      reader.readAsDataURL(file)
    })
  }

  const addVideos = async (files: File[]) => {
    console.log('üé• addVideos: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤:', {
      filesCount: files.length,
      currentVideosCount: localVideos.value.length
    })
    
    const newVideos: Video[] = []
    
    for (const file of files) {
      try {
        console.log('üé• addVideos: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª:', {
          name: file.name,
          type: file.type,
          size: file.size
        })
        
        const video = await processVideo(file)
        newVideos.push(video)
        
        console.log('üé• addVideos: –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:', video.id)
      } catch (err) {
        console.error('üé• addVideos: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ:', err)
      }
    }
    
    const oldLength = localVideos.value.length
    localVideos.value = [...localVideos.value, ...newVideos]
    
    console.log('üé• addVideos: –ó–∞–≤–µ—Ä—à–µ–Ω–æ:', {
      newVideosAdded: newVideos.length,
      totalVideosBefore: oldLength,
      totalVideosAfter: localVideos.value.length
    })
  }

  const addVideo = async (file: File) => {
    try {
      const video = await processVideo(file)
      localVideos.value = [video] // –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –≤–∏–¥–µ–æ
    } catch (err) {
      console.error('Error adding video:', err)
    }
  }

  const removeVideo = (id: string | number) => {
    localVideos.value = localVideos.value.filter(v => v.id !== id)
    if (localVideos.value.length === 0) {
      videoMetadata.value = null
      error.value = ''
    }
  }

  const uploadVideo = async (video: Video): Promise<void> => {
    if (!video.file) return
    
    const updatedVideo = localVideos.value.find(v => v.id === video.id)
    if (!updatedVideo) return
    
    updatedVideo.isUploading = true
    updatedVideo.uploadProgress = 0
    
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤)
      for (let i = 0; i <= 100; i += 10) {
        updatedVideo.uploadProgress = i
        await new Promise(resolve => setTimeout(resolve, 100))
      }
      
      updatedVideo.isUploading = false
      updatedVideo.url = updatedVideo.thumbnail // –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –±—É–¥–µ—Ç URL –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    } catch (err) {
      updatedVideo.isUploading = false
      updatedVideo.error = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'
      throw err
    }
  }

  const extractMetadata = (videoElement: HTMLVideoElement, file?: File) => {
    videoMetadata.value = {
      dimensions: `${videoElement.videoWidth} √ó ${videoElement.videoHeight}`,
      duration: formatDuration(videoElement.duration),
      fileSize: file ? formatFileSize(file.size) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    }
  }

  const formatDuration = (seconds: number): string => {
    if (isNaN(seconds)) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    const minutes = Math.floor(seconds / 60)
    const remainingSeconds = Math.floor(seconds % 60)
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
  }

  const formatFileSize = (bytes: number): string => {
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    if (bytes === 0) return '0 Bytes'
    const i = Math.floor(Math.log(bytes) / Math.log(1024))
    return `${(bytes / Math.pow(1024, i)).toFixed(2)} ${sizes[i]}`
  }

  const getVideoErrorMessage = (errorCode?: number): string => {
    const messages: Record<number, string> = {
      1: '–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞',
      2: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏',
      3: '–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)',
      4: '–ò—Å—Ç–æ—á–Ω–∏–∫ –≤–∏–¥–µ–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'
    }
    return messages[errorCode || 0] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
  }

  const validateVideoFile = (file: File): boolean => {
    const allowedTypes = ['video/mp4', 'video/webm', 'video/ogg']
    const maxSize = 100 * 1024 * 1024 // 100MB
    
    if (!allowedTypes.includes(file.type)) {
      error.value = `–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: ${allowedTypes.join(', ')}`
      return false
    }
    
    if (file.size > maxSize) {
      error.value = `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${formatFileSize(maxSize)}`
      return false
    }
    
    return true
  }

  const initializeFromProps = (videos: Video[] | any[]) => {
    console.log('üé¨ useVideoUpload: initializeFromProps –≤—ã–∑–≤–∞–Ω —Å:', {
      videos,
      videosType: typeof videos,
      isArray: Array.isArray(videos),
      length: videos?.length,
      localVideosLength: localVideos.value.length
    })
    
    if (localVideos.value.length === 0 && videos && videos.length > 0) {
      localVideos.value = videos.map((video, index) => {
        console.log(`üé¨ useVideoUpload: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ ${index}:`, {
          video,
          videoType: typeof video,
          isString: typeof video === 'string',
          hasUrl: video?.url,
          hasId: video?.id
        })
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (URL) - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç Video
        if (typeof video === 'string') {
          const convertedVideo = {
            id: `video-${index}-${Date.now()}`,
            url: video,
            file: null,
            thumbnail: null,
            format: 'video/mp4',
            size: 0,
            isUploading: false,
            uploadProgress: 0,
            error: null
          }
          console.log(`üé¨ useVideoUpload: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–ª–∏ —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç:`, convertedVideo)
          return convertedVideo
        }
        
        // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç, –Ω–æ –±–µ–∑ ID - –¥–æ–±–∞–≤–ª—è–µ–º ID
        if (typeof video === 'object' && !video.id) {
          const videoWithId = {
            ...video,
            id: `video-${index}-${Date.now()}`
          }
          console.log(`üé¨ useVideoUpload: –î–æ–±–∞–≤–∏–ª–∏ ID –∫ –æ–±—ä–µ–∫—Ç—É:`, videoWithId)
          return videoWithId
        }
        
        console.log(`üé¨ useVideoUpload: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏–¥–µ–æ –∫–∞–∫ –µ—Å—Ç—å:`, video)
        return video
      })
      
      console.log('üé¨ useVideoUpload: –§–∏–Ω–∞–ª—å–Ω—ã–π localVideos:', localVideos.value)
    }
  }

  return {
    localVideos,
    error,
    videoMetadata,
    isUploading,
    videoSources,
    processVideo,
    addVideos,
    addVideo,
    removeVideo,
    uploadVideo,
    extractMetadata,
    formatDuration,
    formatFileSize,
    getVideoErrorMessage,
    validateVideoFile,
    initializeFromProps
  }
}