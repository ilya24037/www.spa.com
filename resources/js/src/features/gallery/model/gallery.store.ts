/**
 * Store –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º —Ñ–æ—Ç–æ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é, –∑—É–º, –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
 */

import { defineStore } from 'pinia'
import { ref, computed, nextTick } from 'vue'
import type { Photo, GalleryState, GalleryOptions } from './types'

export const useGalleryStore = defineStore('gallery', () => {
  
  // =================== –°–û–°–¢–û–Ø–ù–ò–ï ===================
  
  const isOpen = ref(false)
  const photos = ref<Photo[]>([])
  const currentIndex = ref(0)
  const isFullscreen = ref(false)
  const isZoomed = ref(false)
  const zoomLevel = ref(1)
  const isLoading = ref(false)
  const error = ref<string | null>(null)
  
  // –û–ø—Ü–∏–∏ –≥–∞–ª–µ—Ä–µ–∏
  const options = ref<GalleryOptions>({
    showThumbnails: true,
    showControls: true,
    showCounter: true,
    autoplay: false,
    autoplayInterval: 3000,
    enableZoom: true,
    maxZoom: 3,
    enableFullscreen: true,
    enableKeyboard: true,
    closeOnOutsideClick: true,
    loop: true
  })

  // =================== –í–´–ß–ò–°–õ–Ø–ï–ú–´–ï ===================
  
  // –¢–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ
  const currentPhoto = computed(() => {
    if (photos.value.length === 0) return null
    return photos.value[currentIndex.value] || null
  })

  // –ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ
  const hasPrevious = computed(() => {
    if (!options.value.loop) {
      return currentIndex.value > 0
    }
    return photos.value.length > 1
  })

  // –ï—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ
  const hasNext = computed(() => {
    if (!options.value.loop) {
      return currentIndex.value < photos.value.length - 1
    }
    return photos.value.length > 1
  })

  // –°—á–µ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
  const photoCounter = computed(() => {
    if (photos.value.length === 0) return '0 / 0'
    return `${currentIndex.value + 1} / ${photos.value.length}`
  })

  // –ò–Ω–¥–µ–∫—Å—ã —Å–æ—Å–µ–¥–Ω–∏—Ö —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
  const preloadIndices = computed(() => {
    const indices: number[] = []
    const length = photos.value.length
    
    if (length <= 1) return indices
    
    // –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ
    const prevIndex = currentIndex.value > 0 
      ? currentIndex.value - 1 
      : (options.value.loop ? length - 1 : -1)
    
    // –°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ
    const nextIndex = currentIndex.value < length - 1 
      ? currentIndex.value + 1 
      : (options.value.loop ? 0 : -1)
    
    if (prevIndex >= 0) indices.push(prevIndex)
    if (nextIndex >= 0) indices.push(nextIndex)
    
    return indices
  })

  // =================== –î–ï–ô–°–¢–í–ò–Ø ===================

  // üñºÔ∏è –û—Ç–∫—Ä—ã—Ç—å –≥–∞–ª–µ—Ä–µ—é
  function openGallery(photoList: Photo[], startIndex = 0) {
    photos.value = [...photoList]
    currentIndex.value = Math.max(0, Math.min(startIndex, photoList.length - 1))
    isOpen.value = true
    isZoomed.value = false
    zoomLevel.value = 1
    error.value = null
    
    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö —Ñ–æ—Ç–æ
    nextTick(() => {
      preloadPhotos()
    })
  }

  // ‚ùå –ó–∞–∫—Ä—ã—Ç—å –≥–∞–ª–µ—Ä–µ—é
  function closeGallery() {
    isOpen.value = false
    isFullscreen.value = false
    isZoomed.value = false
    zoomLevel.value = 1
    photos.value = []
    currentIndex.value = 0
    error.value = null
  }

  // ‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ
  function goToPrevious() {
    if (!hasPrevious.value) return
    
    if (currentIndex.value > 0) {
      currentIndex.value--
    } else if (options.value.loop) {
      currentIndex.value = photos.value.length - 1
    }
    
    resetZoom()
    preloadPhotos()
  }

  // ‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ
  function goToNext() {
    if (!hasNext.value) return
    
    if (currentIndex.value < photos.value.length - 1) {
      currentIndex.value++
    } else if (options.value.loop) {
      currentIndex.value = 0
    }
    
    resetZoom()
    preloadPhotos()
  }

  // üéØ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ñ–æ—Ç–æ
  function goToPhoto(index: number) {
    if (index < 0 || index >= photos.value.length) return
    
    currentIndex.value = index
    resetZoom()
    preloadPhotos()
  }

  // üîç –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∑—É–º
  function toggleZoom() {
    if (!options.value.enableZoom) return
    
    if (isZoomed.value) {
      resetZoom()
    } else {
      zoomLevel.value = 2
      isZoomed.value = true
    }
  }

  // üîç –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑—É–º–∞
  function setZoomLevel(level: number) {
    if (!options.value.enableZoom) return
    
    const clampedLevel = Math.max(1, Math.min(level, options.value.maxZoom))
    zoomLevel.value = clampedLevel
    isZoomed.value = clampedLevel > 1
  }

  // üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∑—É–º
  function resetZoom() {
    zoomLevel.value = 1
    isZoomed.value = false
  }

  // üñ•Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
  function toggleFullscreen() {
    if (!options.value.enableFullscreen) return
    
    if (isFullscreen.value) {
      exitFullscreen()
    } else {
      enterFullscreen()
    }
  }

  // üñ•Ô∏è –í–æ–π—Ç–∏ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
  function enterFullscreen() {
    if (!document.fullscreenElement) {
      document.documentElement.requestFullscreen?.()
    }
    isFullscreen.value = true
  }

  // üö™ –í—ã–π—Ç–∏ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
  function exitFullscreen() {
    if (document.fullscreenElement) {
      document.exitFullscreen?.()
    }
    isFullscreen.value = false
  }

  // ‚öôÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –æ–ø—Ü–∏–∏ –≥–∞–ª–µ—Ä–µ–∏
  function updateOptions(newOptions: Partial<GalleryOptions>) {
    options.value = { ...options.value, ...newOptions }
  }

  // üì• –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
  function preloadPhotos() {
    preloadIndices.value.forEach(index => {
      const photo = photos.value[index]
      if (photo && photo.url) {
        const img = new Image()
        img.src = photo.url
      }
    })
  }

  // üì± –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–µ—Å—Ç–æ–≤ (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
  function handleSwipeLeft() {
    goToNext()
  }

  function handleSwipeRight() {
    goToPrevious()
  }

  function handlePinchZoom(scale: number) {
    if (!options.value.enableZoom) return
    
    const newLevel = Math.max(1, Math.min(scale, options.value.maxZoom))
    setZoomLevel(newLevel)
  }

  // ‚å®Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  function handleKeydown(event: KeyboardEvent) {
    if (!options.value.enableKeyboard || !isOpen.value) return
    
    switch (event.key) {
      case 'Escape':
        closeGallery()
        break
      case 'ArrowLeft':
        goToPrevious()
        break
      case 'ArrowRight':
        goToNext()
        break
      case 'ArrowUp':
        if (currentIndex.value >= 10) {
          goToPhoto(currentIndex.value - 10)
        }
        break
      case 'ArrowDown':
        if (currentIndex.value + 10 < photos.value.length) {
          goToPhoto(currentIndex.value + 10)
        }
        break
      case 'Home':
        goToPhoto(0)
        break
      case 'End':
        goToPhoto(photos.value.length - 1)
        break
      case ' ':
        event.preventDefault()
        toggleZoom()
        break
      case 'f':
      case 'F11':
        event.preventDefault()
        toggleFullscreen()
        break
      case '+':
      case '=':
        event.preventDefault()
        setZoomLevel(zoomLevel.value + 0.5)
        break
      case '-':
        event.preventDefault()
        setZoomLevel(zoomLevel.value - 0.5)
        break
      case '0':
        event.preventDefault()
        resetZoom()
        break
    }
  }

  // üñ±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –≤–Ω–µ —Ñ–æ—Ç–æ
  function handleOutsideClick(event: MouseEvent) {
    if (!options.value.closeOnOutsideClick) return
    
    const target = event.target as HTMLElement
    if (target.classList.contains('gallery-backdrop')) {
      closeGallery()
    }
  }

  // üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ–æ—Ç–æ
  async function sharePhoto(photo?: Photo) {
    const photoToShare = photo || currentPhoto.value
    if (!photoToShare) return
    
    if (navigator.share) {
      try {
        await navigator.share({
          title: photoToShare.title || '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è',
          text: photoToShare.description || '',
          url: photoToShare.url
        })
      } catch (err) {
        console.warn('–û—à–∏–±–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:', err)
      }
    } else {
      // Fallback: –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
      try {
        await navigator.clipboard.writeText(photoToShare.url)
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      } catch (err) {
        console.warn('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err)
      }
    }
  }

  // üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ
  function downloadPhoto(photo?: Photo) {
    const photoToDownload = photo || currentPhoto.value
    if (!photoToDownload) return
    
    const link = document.createElement('a')
    link.href = photoToDownload.url
    link.download = photoToDownload.filename || `photo-${Date.now()}.jpg`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }

  // üîÑ –ü–æ–≤–µ—Ä–Ω—É—Ç—å —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
  function rotatePhoto(degrees: number = 90) {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–≤–æ—Ä–æ—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    // –ó–¥–µ—Å—å –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    console.log(`–ü–æ–≤–æ—Ä–æ—Ç —Ñ–æ—Ç–æ –Ω–∞ ${degrees} –≥—Ä–∞–¥—É—Å–æ–≤`)
  }

  // =================== –ê–í–¢–û–ü–õ–ï–ô ===================

  let autoplayTimer: number | null = null

  function startAutoplay() {
    if (!options.value.autoplay || photos.value.length <= 1) return
    
    stopAutoplay()
    autoplayTimer = window.setInterval(() => {
      goToNext()
    }, options.value.autoplayInterval)
  }

  function stopAutoplay() {
    if (autoplayTimer) {
      clearInterval(autoplayTimer)
      autoplayTimer = null
    }
  }

  function toggleAutoplay() {
    if (autoplayTimer) {
      stopAutoplay()
    } else {
      startAutoplay()
    }
  }

  // =================== –í–û–ó–í–†–ê–©–ê–ï–ú –ò–ù–¢–ï–†–§–ï–ô–° ===================

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isOpen,
    photos,
    currentIndex,
    isFullscreen,
    isZoomed,
    zoomLevel,
    isLoading,
    error,
    options,

    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ
    currentPhoto,
    hasPrevious,
    hasNext,
    photoCounter,
    preloadIndices,

    // –î–µ–π—Å—Ç–≤–∏—è
    openGallery,
    closeGallery,
    goToPrevious,
    goToNext,
    goToPhoto,
    toggleZoom,
    setZoomLevel,
    resetZoom,
    toggleFullscreen,
    enterFullscreen,
    exitFullscreen,
    updateOptions,
    preloadPhotos,

    // –ñ–µ—Å—Ç—ã –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    handleSwipeLeft,
    handleSwipeRight,
    handlePinchZoom,
    handleKeydown,
    handleOutsideClick,

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    sharePhoto,
    downloadPhoto,
    rotatePhoto,

    // –ê–≤—Ç–æ–ø–ª–µ–π
    startAutoplay,
    stopAutoplay,
    toggleAutoplay
  }
})