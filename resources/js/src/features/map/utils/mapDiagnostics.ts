/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–∞—Ä—Ç—ã
 * –ü–æ–º–æ–≥–∞—é—Ç –≤—ã—è–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
 */

export interface DiagnosticsResult {
  step: string
  status: 'ok' | 'error' | 'warning'
  message: string
  details?: any
}

export class MapDiagnostics {
  private results: DiagnosticsResult[] = []
  
  // –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  clear() {
    this.results = []
    console.log('[MapDiagnostics] üßπ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã')
  }
  
  // –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  private addResult(step: string, status: 'ok' | 'error' | 'warning', message: string, details?: any) {
    this.results.push({ step, status, message, details })
    
    const icon = status === 'ok' ? '‚úÖ' : status === 'warning' ? '‚ö†Ô∏è' : '‚ùå'
    console.log(`[MapDiagnostics] ${icon} ${step}: ${message}`)
    if (details) {
      console.log(`[MapDiagnostics] üìã –î–µ—Ç–∞–ª–∏:`, details)
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Yandex Maps API
  checkApiAvailability(apiKey: string) {
    if (!apiKey || apiKey.trim() === '') {
      this.addResult('API Key', 'warning', 'API –∫–ª—é—á –ø—É—Å—Ç–æ–π', { apiKey })
      return
    }
    
    if (window.ymaps) {
      if (window.ymaps.ready) {
        this.addResult('API Availability', 'ok', 'Yandex Maps API –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤')
      } else {
        this.addResult('API Availability', 'warning', 'Yandex Maps API –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –Ω–µ –≥–æ—Ç–æ–≤')
      }
    } else {
      this.addResult('API Availability', 'error', 'Yandex Maps API –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω')
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å DOM —ç–ª–µ–º–µ–Ω—Ç—ã
  checkDomElements(mapId: string) {
    const container = document.getElementById(mapId)
    if (container) {
      this.addResult('DOM Container', 'ok', `–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω: ${mapId}`, {
        id: mapId,
        offsetWidth: container.offsetWidth,
        offsetHeight: container.offsetHeight,
        style: container.style.cssText
      })
    } else {
      this.addResult('DOM Container', 'error', `–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: ${mapId}`)
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç—ã
  checkMapConfig(config: any) {
    if (!config) {
      this.addResult('Map Config', 'error', '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
      return
    }
    
    if (!config.center || !Array.isArray(config.center) || config.center.length !== 2) {
      this.addResult('Map Config', 'error', '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã', { center: config.center })
      return
    }
    
    if (typeof config.zoom !== 'number' || config.zoom < 1 || config.zoom > 23) {
      this.addResult('Map Config', 'warning', '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ zoom', { zoom: config.zoom })
    } else {
      this.addResult('Map Config', 'ok', '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞', config)
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã
  checkMapInstance(map: any) {
    if (!map) {
      this.addResult('Map Instance', 'error', '–û–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã –Ω–µ —Å–æ–∑–¥–∞–Ω')
      return
    }
    
    try {
      const center = map.getCenter()
      const zoom = map.getZoom()
      const bounds = map.getBounds()
      
      this.addResult('Map Instance', 'ok', '–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç', {
        center,
        zoom,
        bounds
      })
    } catch (error) {
      this.addResult('Map Instance', 'error', '–ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç', { error: error.message })
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
  checkLoadedScripts() {
    const scripts = Array.from(document.querySelectorAll('script[src*="api-maps.yandex.ru"]'))
    
    if (scripts.length === 0) {
      this.addResult('Scripts', 'error', '–°–∫—Ä–∏–ø—Ç—ã Yandex Maps –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ DOM')
    } else if (scripts.length === 1) {
      const script = scripts[0] as HTMLScriptElement
      this.addResult('Scripts', 'ok', '–°–∫—Ä–∏–ø—Ç Yandex Maps –∑–∞–≥—Ä—É–∂–µ–Ω', {
        src: script.src,
        loaded: script.readyState === 'complete'
      })
    } else {
      this.addResult('Scripts', 'warning', `–ù–∞–π–¥–µ–Ω–æ ${scripts.length} —Å–∫—Ä–∏–ø—Ç–æ–≤ Yandex Maps (–≤–æ–∑–º–æ–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)`)
    }
  }
  
  // –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
  fullDiagnostics(params: {
    mapId: string
    apiKey: string
    config?: any
    mapInstance?: any
  }) {
    console.log('[MapDiagnostics] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É')
    
    this.clear()
    
    this.checkLoadedScripts()
    this.checkApiAvailability(params.apiKey)
    this.checkDomElements(params.mapId)
    
    if (params.config) {
      this.checkMapConfig(params.config)
    }
    
    if (params.mapInstance) {
      this.checkMapInstance(params.mapInstance)
    }
    
    this.printSummary()
    return this.results
  }
  
  // –ü–µ—á–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞
  printSummary() {
    const errors = this.results.filter(r => r.status === 'error').length
    const warnings = this.results.filter(r => r.status === 'warning').length
    const success = this.results.filter(r => r.status === 'ok').length
    
    console.log('[MapDiagnostics] üìä –ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:')
    console.log(`[MapDiagnostics] ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${success}`)
    console.log(`[MapDiagnostics] ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${warnings}`)
    console.log(`[MapDiagnostics] ‚ùå –û—à–∏–±–∫–∏: ${errors}`)
    
    if (errors > 0) {
      console.log('[MapDiagnostics] üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏!')
      const errorMessages = this.results.filter(r => r.status === 'error').map(r => `  ‚Ä¢ ${r.step}: ${r.message}`)
      console.log(errorMessages.join('\n'))
    }
    
    return { errors, warnings, success }
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  getResults() {
    return this.results
  }
}

// –°–æ–∑–¥–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é —É—Ç–∏–ª–∏—Ç—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
export const mapDiagnostics = new MapDiagnostics()

// –î–æ–±–∞–≤–∏—Ç—å –≤ window –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if (typeof window !== 'undefined') {
  (window as any).__mapDiagnostics = mapDiagnostics
}