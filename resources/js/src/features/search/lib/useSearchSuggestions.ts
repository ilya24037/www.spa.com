/**
 * Composable –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –ø–æ–∏—Å–∫–∞
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */

import { ref, computed, type Ref } from 'vue'
import { debounce } from '@/src/shared/lib/utils'
import { useSearchStore } from '../model/search.store'
import type { 
  SearchSuggestion, 
  UseSearchSuggestionsReturn,
  SearchFilters
} from '../model/search.types'

// –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
const DEFAULT_SUGGESTIONS: SearchSuggestion[] = [
  { 
    title: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∞–∂', 
    category: '–ú–∞—Å—Å–∞–∂', 
    type: 'service', 
    url: '/services/classic-massage',
    popularity: 95
  },
  { 
    title: '–¢–∞–π—Å–∫–∏–π –º–∞—Å—Å–∞–∂', 
    category: '–ú–∞—Å—Å–∞–∂', 
    type: 'service', 
    url: '/services/thai-massage',
    popularity: 88
  },
  { 
    title: '–ú–∞—Å—Å–∞–∂ —Å–ø–∏–Ω—ã', 
    category: '–ú–∞—Å—Å–∞–∂', 
    type: 'service', 
    url: '/services/back-massage',
    popularity: 92
  },
  { 
    title: '–°–ü–ê –ø—Ä–æ—Ü–µ–¥—É—Ä—ã', 
    category: '–†–µ–ª–∞–∫—Å', 
    type: 'service', 
    url: '/services/spa',
    popularity: 85
  },
  { 
    title: '–ê–Ω—Ç–∏—Ü–µ–ª–ª—é–ª–∏—Ç–Ω—ã–π –º–∞—Å—Å–∞–∂', 
    category: '–ö–æ—Ä—Ä–µ–∫—Ü–∏—è', 
    type: 'service', 
    url: '/services/anti-cellulite',
    popularity: 78
  },
  { 
    title: '–†–µ–ª–∞–∫—Å –º–∞—Å—Å–∞–∂', 
    category: '–†–µ–ª–∞–∫—Å', 
    type: 'service', 
    url: '/services/relax-massage',
    popularity: 82
  },
  { 
    title: '–õ–∏–º—Ñ–æ–¥—Ä–µ–Ω–∞–∂–Ω—ã–π –º–∞—Å—Å–∞–∂', 
    category: '–û–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π', 
    type: 'service', 
    url: '/services/lymphatic-drainage',
    popularity: 75
  },
  { 
    title: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∞–∂', 
    category: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π', 
    type: 'service', 
    url: '/services/sports-massage',
    popularity: 70
  }
]

/**
 * –û–ø—Ü–∏–∏ –¥–ª—è composable
 */
interface UseSearchSuggestionsOptions {
  debounceDelay?: number
  maxSuggestions?: number
  useCache?: boolean
  cacheTimeout?: number
}

/**
 * –ö–µ—à –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
 */
interface SuggestionsCache {
  [query: string]: {
    suggestions: SearchSuggestion[]
    timestamp: number
  }
}

/**
 * Composable –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –ø–æ–∏—Å–∫–∞
 */
export function useSearchSuggestions(
  options: UseSearchSuggestionsOptions = {}
): UseSearchSuggestionsReturn {
  const {
    debounceDelay = 300,
    maxSuggestions = 8,
    useCache = true,
    cacheTimeout = 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç
  } = options

  // Store
  const searchStore = useSearchStore()

  // State
  const suggestions = ref<SearchSuggestion[]>([])
  const isLoading = ref(false)
  const error = ref<string | null>(null)
  const cache = ref<SuggestionsCache>({})
  const abortController = ref<AbortController | null>(null)

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –æ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
   */
  const cleanupCache = (): void => {
    const now = Date.now()
    Object.keys(cache.value).forEach(key => {
      if (now - cache.value[key].timestamp > cacheTimeout) {
        delete cache.value[key]
      }
    })
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏–∑ –∫–µ—à–∞
   */
  const getCachedSuggestions = (query: string): SearchSuggestion[] | null => {
    if (!useCache) return null

    cleanupCache()
    const cached = cache.value[query.toLowerCase()]
    
    if (cached && Date.now() - cached.timestamp < cacheTimeout) {
      return cached.suggestions
    }
    
    return null
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤ –∫–µ—à
   */
  const setCachedSuggestions = (query: string, items: SearchSuggestion[]): void => {
    if (!useCache) return

    cache.value[query.toLowerCase()] = {
      suggestions: items,
      timestamp: Date.now()
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞
   */
  const loadSuggestionsFromAPI = async (query: string): Promise<SearchSuggestion[]> => {
    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å
    if (abortController.value) {
      abortController.value.abort()
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã
    abortController.value = new AbortController()

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º store –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
      await searchStore.loadSuggestions(query)
      return searchStore.suggestions || []
    } catch (err: any) {
      if (err.name === 'AbortError') {
        // –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        return []
      }
      throw err
    }
  }

  /**
   * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
   */
  const filterLocalSuggestions = (query: string): SearchSuggestion[] => {
    const lowerQuery = query.toLowerCase()
    
    return DEFAULT_SUGGESTIONS
      .filter(item => {
        const titleMatch = item.title.toLowerCase().includes(lowerQuery)
        const categoryMatch = item.category?.toLowerCase().includes(lowerQuery)
        return titleMatch || categoryMatch
      })
      .sort((a, b) => {
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        const aStartsWith = a.title.toLowerCase().startsWith(lowerQuery)
        const bStartsWith = b.title.toLowerCase().startsWith(lowerQuery)
        
        if (aStartsWith && !bStartsWith) return -1
        if (!aStartsWith && bStartsWith) return 1
        
        // –ó–∞—Ç–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        return (b.popularity || 0) - (a.popularity || 0)
      })
      .slice(0, maxSuggestions)
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫
   */
  const loadSuggestions = async (query: string): Promise<void> => {
    const trimmedQuery = query.trim()
    
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
    if (!trimmedQuery) {
      suggestions.value = DEFAULT_SUGGESTIONS
        .sort((a, b) => (b.popularity || 0) - (a.popularity || 0))
        .slice(0, maxSuggestions)
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cached = getCachedSuggestions(trimmedQuery)
    if (cached) {
      suggestions.value = cached
      return
    }

    isLoading.value = true
    error.value = null

    try {
      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
      const apiSuggestions = await loadSuggestionsFromAPI(trimmedQuery)
      
      if (apiSuggestions.length > 0) {
        suggestions.value = apiSuggestions.slice(0, maxSuggestions)
        setCachedSuggestions(trimmedQuery, suggestions.value)
      } else {
        // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        suggestions.value = filterLocalSuggestions(trimmedQuery)
      }
    } catch (err: any) {
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      console.warn('Failed to load suggestions from API:', err)
      suggestions.value = filterLocalSuggestions(trimmedQuery)
      error.value = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏'
    } finally {
      isLoading.value = false
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Å debounce
   */
  const debouncedLoadSuggestions = debounce(loadSuggestions, debounceDelay)

  /**
   * –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫
   */
  const clearSuggestions = (): void => {
    suggestions.value = []
    error.value = null
    isLoading.value = false
    
    // –û—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    if (abortController.value) {
      abortController.value.abort()
      abortController.value = null
    }
  }

  /**
   * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
   */
  const filterSuggestions = (query: string): SearchSuggestion[] => {
    const lowerQuery = query.toLowerCase()
    
    return suggestions.value.filter(item =>
      item.title.toLowerCase().includes(lowerQuery) ||
      item.category?.toLowerCase().includes(lowerQuery)
    )
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏
   */
  const addCustomSuggestion = (suggestion: SearchSuggestion): void => {
    const exists = suggestions.value.some(
      s => s.title === suggestion.title && s.type === suggestion.type
    )
    
    if (!exists) {
      suggestions.value.unshift(suggestion)
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      if (suggestions.value.length > maxSuggestions) {
        suggestions.value = suggestions.value.slice(0, maxSuggestions)
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ —Ç–∏–ø—É
   */
  const getSuggestionsByType = (type: SearchSuggestion['type']): SearchSuggestion[] => {
    return suggestions.value.filter(s => s.type === type)
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
   */
  const getPopularSuggestions = (limit: number = 6): SearchSuggestion[] => {
    return DEFAULT_SUGGESTIONS
      .sort((a, b) => (b.popularity || 0) - (a.popularity || 0))
      .slice(0, limit)
  }

  /**
   * –û–±–æ–≥–∞—â–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
   */
  const enrichSuggestions = (items: SearchSuggestion[]): SearchSuggestion[] => {
    return items.map(item => ({
      ...item,
      icon: getIconForType(item.type),
      priority: calculatePriority(item)
    }))
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞
   */
  const getIconForType = (type: SearchSuggestion['type']): string => {
    const icons = {
      service: 'üéØ',
      master: 'üë§',
      location: 'üìç',
      category: 'üìÇ'
    }
    return icons[type] || 'üîç'
  }

  /**
   * –†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏
   */
  const calculatePriority = (item: SearchSuggestion): SearchSuggestion['priority'] => {
    const popularity = item.popularity || 0
    
    if (popularity > 90) return 'high'
    if (popularity > 70) return 'medium'
    return 'low'
  }

  /**
   * –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  const reset = (): void => {
    clearSuggestions()
    cache.value = {}
  }

  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    suggestions,
    isLoading,
    error,
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    loadSuggestions: debouncedLoadSuggestions,
    clearSuggestions,
    filterSuggestions,
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    addCustomSuggestion,
    getSuggestionsByType,
    getPopularSuggestions,
    enrichSuggestions,
    reset
  }
}

/**
 * –•–µ–ª–ø–µ—Ä –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–µ
 */
export function highlightMatch(text: string, query: string): string {
  if (!query) return text
  
  const regex = new RegExp(`(${query})`, 'gi')
  return text.replace(regex, '<mark class="bg-yellow-200">$1</mark>')
}

/**
 * –•–µ–ª–ø–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */
export function groupSuggestionsByCategory(
  items: SearchSuggestion[]
): Record<string, SearchSuggestion[]> {
  const groups: Record<string, SearchSuggestion[]> = {}
  
  items.forEach(item => {
    const category = item.category || '–î—Ä—É–≥–æ–µ'
    if (!groups[category]) {
      groups[category] = []
    }
    groups[category].push(item)
  })
  
  return groups
}

/**
 * –•–µ–ª–ø–µ—Ä –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫
 */
export function sortSuggestions(
  items: SearchSuggestion[],
  sortBy: 'relevance' | 'popularity' | 'alphabetical' = 'relevance'
): SearchSuggestion[] {
  const sorted = [...items]
  
  switch (sortBy) {
    case 'popularity':
      return sorted.sort((a, b) => (b.popularity || 0) - (a.popularity || 0))
    
    case 'alphabetical':
      return sorted.sort((a, b) => a.title.localeCompare(b.title, 'ru'))
    
    case 'relevance':
    default:
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–∏ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
      return sorted
  }
}