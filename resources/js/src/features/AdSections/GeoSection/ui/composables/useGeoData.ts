/**
 * useGeoData - composable –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 * 
 * –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å:
 * - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö geo –¥–∞–Ω–Ω—ã—Ö
 * - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ (–∫–∞—Ä—Ç–∞, –≤—ã–µ–∑–¥, –∑–æ–Ω—ã, –º–µ—Ç—Ä–æ, —Ç–∏–ø—ã)
 * - –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
 * - –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
 */

import { ref, reactive, watch, computed } from 'vue'

// –¢–∏–ø—ã
export type OutcallType = 'none' | 'city' | 'zones'

export interface OutcallTypes {
  apartment: boolean
  hotel: boolean
  office: boolean
  sauna: boolean
  house: boolean
}

export interface GeoData {
  address: string
  coordinates: { lat: number; lng: number } | null
  zoom: number
  outcall: OutcallType
  zones: string[]
  metro_stations: string[]
  outcall_apartment: boolean
  outcall_hotel: boolean
  outcall_house: boolean
  outcall_sauna: boolean
  outcall_office: boolean
  taxi_included: boolean
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —ç–º–∏—Ç–æ–≤
export interface GeoChangeEvent {
  geoData: GeoData
}

export interface UseGeoDataOptions {
  initialData?: Partial<GeoData>
  onDataChange?: (data: GeoData) => void
  autoSave?: boolean
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π composable –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å geo –¥–∞–Ω–Ω—ã–º–∏
 */
export function useGeoData(options: UseGeoDataOptions = {}) {
  const { 
    initialData = {}, 
    onDataChange,
    autoSave = true 
  } = options

  // –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const createDefaultGeoData = (): GeoData => ({
    address: '',
    coordinates: null,
    zoom: 12,
    outcall: 'none',
    zones: [],
    metro_stations: [],
    outcall_apartment: true,  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
    outcall_hotel: false,
    outcall_house: false,
    outcall_sauna: false,
    outcall_office: false,
    taxi_included: false,
    ...initialData
  })

  // –†–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const geoData = reactive<GeoData>(createDefaultGeoData())
  const isLoading = ref(false)
  const error = ref<string | null>(null)
  const isInitializing = ref(false) // üõ°Ô∏è –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

  // Computed –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–ø–∞–º–∏ –≤—ã–µ–∑–¥–∞
  const outcallTypes = computed<OutcallTypes>({
    get: () => ({
      apartment: geoData.outcall_apartment,
      hotel: geoData.outcall_hotel,
      office: geoData.outcall_office,
      sauna: geoData.outcall_sauna,
      house: geoData.outcall_house
    }),
    set: (types: OutcallTypes) => {
      geoData.outcall_apartment = types.apartment
      geoData.outcall_hotel = types.hotel
      geoData.outcall_office = types.office
      geoData.outcall_sauna = types.sauna
      geoData.outcall_house = types.house
    }
  })

  // –ú–µ—Ç–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ –∫–∞—Ä—Ç—ã
   */
  const updateAddress = (address: string) => {
    geoData.address = address
    
    // üîÑ –ü—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∞–¥—Ä–µ—Å–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–ù–µ –≤—ã–µ–∑–∂–∞—é"
    if (!address || address === '') {
      geoData.outcall = 'none'
      // –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –∑–æ–Ω—ã –∏ —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –±–µ–∑ –∞–¥—Ä–µ—Å–∞
      geoData.zones = []
      geoData.metro_stations = []
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∏–ø—ã –º–µ—Å—Ç –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      geoData.outcall_apartment = true
      geoData.outcall_hotel = false
      geoData.outcall_house = false
      geoData.outcall_sauna = false
      geoData.outcall_office = false
      geoData.taxi_included = false
      console.log('üîÑ [updateAddress] –ê–¥—Ä–µ—Å –æ—á–∏—â–µ–Ω - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∏–ø –≤—ã–µ–∑–¥–∞ "–ù–µ –≤—ã–µ–∑–∂–∞—é"')
    }
  }

  const updateCoordinates = (coords: { lat: number; lng: number } | null) => {
    geoData.coordinates = coords
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤—ã–µ–∑–¥–∞
   */
  const updateOutcall = (outcall: OutcallType, shouldClearZones = false) => {
    geoData.outcall = outcall
    
    // –û—á–∏—â–∞–µ–º –∑–æ–Ω—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å 'zones' –Ω–∞ –¥—Ä—É–≥–æ–π —Ç–∏–ø)
    if (shouldClearZones || outcall !== 'zones') {
      geoData.zones = []
    }
    
    // –û—á–∏—â–∞–µ–º –º–µ—Ç—Ä–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω 'none'
    if (outcall === 'none') {
      geoData.metro_stations = []
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∏–ø—ã –º–µ—Å—Ç –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      geoData.outcall_apartment = true
      geoData.outcall_hotel = false
      geoData.outcall_house = false
      geoData.outcall_sauna = false
      geoData.outcall_office = false
      geoData.taxi_included = false
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–æ–Ω
   */
  const updateZones = (zones: string[]) => {
    geoData.zones = [...zones]
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ
   */
  const updateMetroStations = (stations: string[]) => {
    geoData.metro_stations = [...stations]
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –º–µ—Å—Ç –≤—ã–µ–∑–¥–∞
   */
  const updateOutcallTypes = (types: OutcallTypes) => {
    outcallTypes.value = types
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–∫—Å–∏
   */
  const updateTaxiIncluded = (included: boolean) => {
    geoData.taxi_included = included
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
   */
  const loadFromJson = (jsonString: string) => {
    try {
      if (!jsonString) return

      // üõ°Ô∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      isInitializing.value = true
      console.log('üîí [loadFromJson] –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ')

      const parsed = JSON.parse(jsonString)
      
      // üîç –û–¢–õ–ê–î–û–ß–ù–´–ï –õ–û–ì–ò –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      console.log('üì• [loadFromJson] –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ:', {
        jsonString_length: jsonString.length,
        parsed_address: parsed.address,
        parsed_keys: Object.keys(parsed),
        current_address_before: geoData.address
      })
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
      Object.assign(geoData, {
        address: parsed.address || '',
        coordinates: parsed.coordinates || null,
        zoom: parsed.zoom || 12,
        outcall: parsed.outcall || 'none',
        zones: parsed.zones || [],
        metro_stations: parsed.metro_stations || [],
        outcall_apartment: parsed.outcall_apartment ?? true,
        outcall_hotel: parsed.outcall_hotel ?? false,
        outcall_house: parsed.outcall_house ?? false,
        outcall_sauna: parsed.outcall_sauna ?? false,
        outcall_office: parsed.outcall_office ?? false,
        taxi_included: parsed.taxi_included ?? false
      })

      console.log('‚úÖ [loadFromJson] –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', {
        current_address_after: geoData.address,
        coordinates: geoData.coordinates
      })

      error.value = null
      
      // üõ°Ô∏è –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
      setTimeout(() => {
        isInitializing.value = false
        console.log('üîì [loadFromJson] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ')
      }, 100)
      
    } catch (err) {
      error.value = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + (err as Error).message
      console.error('‚ùå [loadFromJson] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ geo –¥–∞–Ω–Ω—ã—Ö:', err)
      isInitializing.value = false
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JSON –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
   */
  const toJson = (): string => {
    return JSON.stringify(geoData)
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  const getDataCopy = (): GeoData => {
    return { ...geoData }
  }

  /**
   * –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
   */
  const resetData = () => {
    Object.assign(geoData, createDefaultGeoData())
    error.value = null
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
   */
  const validateData = (): { isValid: boolean; errors: string[] } => {
    const errors: string[] = []

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å
    if (!geoData.address.trim()) {
      errors.push('–ù–µ —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    if (!geoData.coordinates) {
      errors.push('–ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–æ–Ω—ã –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤—ã–µ–∑–¥ –≤ –∑–æ–Ω—ã
    if (geoData.outcall === 'zones' && geoData.zones.length === 0) {
      errors.push('–ù–µ –≤—ã–±—Ä–∞–Ω—ã –∑–æ–Ω—ã –≤—ã–µ–∑–¥–∞')
    }

    return {
      isValid: errors.length === 0,
      errors
    }
  }

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
  if (autoSave && onDataChange) {
    watch(
      geoData,
      (newData) => {
        // üõ°Ô∏è –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if (isInitializing.value) {
          console.log('‚è∏Ô∏è [useGeoData] –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ - –∏–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è')
          return
        }
        
        console.log('üíæ [useGeoData] –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ')
        onDataChange(newData)
      },
      { deep: true }
    )
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏—á–Ω–æ–µ API
  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    geoData,
    isLoading,
    error,
    isInitializing, // üîç –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    outcallTypes,

    // –ú–µ—Ç–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    updateAddress,
    updateCoordinates,
    updateOutcall,
    updateZones,
    updateMetroStations,
    updateOutcallTypes,
    updateTaxiIncluded,

    // –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    loadFromJson,
    toJson,
    getDataCopy,
    resetData,
    validateData
  }
}

/**
 * –¢–∏–ø—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
 */
export type { GeoData, OutcallTypes, OutcallType }