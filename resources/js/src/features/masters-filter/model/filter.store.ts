import { logger } from '@/src/shared/lib/logger'

/**
 * Store –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä–æ–≤
 * –†–µ–∞–ª–∏–∑—É–µ—Ç —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
 * - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥
 * - –î–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω
 * - –ì–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏ —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞
 * - –†–µ–π—Ç–∏–Ω–≥–∞ –∏ –æ—Ç–∑—ã–≤–æ–≤
 * - –í—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
 * - –¢–∏–ø–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–¥–æ–º/—Å–∞–ª–æ–Ω)
 */

import { defineStore } from 'pinia'
import { ref, computed, watch } from 'vue'
import type { 
  FilterState, 
  LocationFilter, 
  PriceRange,
  WorkingHoursFilter,
  Master,
  FilterOptions,
  ServiceLocationType,
  SortingType
} from '../model/types'

export const useFilterStore = defineStore('masters-filter', () => {
  
  // =================== –°–û–°–¢–û–Ø–ù–ò–ï ===================
  
  const filters = ref<FilterState>({
    services: [], // ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥
    priceRange: {
      min: 0,
      max: 10000
    },
    location: {
      address: '',
      lat: null,
      lng: null,
      radius: 5 // –∫–º
    },
    rating: {
      min: 0,
      onlyWithReviews: false
    },
    workingHours: {
      day: null, // 'today', 'tomorrow', –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞
      timeFrom: null,
      timeTo: null
    },
    serviceLocation: [], // 'home', 'salon'
    availability: {
      availableToday: false,
      availableTomorrow: false,
      availableThisWeek: false
    },
    sorting: 'relevance' // 'relevance', 'rating', 'price_asc', 'price_desc', 'distance'
  })

  const isLoading = ref(false)
  const error = ref<string | null>(null)
  
  // –û–ø—Ü–∏–∏ –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ–≤ (–∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å —Å–µ—Ä–≤–µ—Ä–∞)
  const options = ref<FilterOptions>({
    services: [],
    priceRanges: [
      { min: 0, max: 1000, label: '–î–æ 1000 ‚ÇΩ' },
      { min: 1000, max: 3000, label: '1000 - 3000 ‚ÇΩ' },
      { min: 3000, max: 5000, label: '3000 - 5000 ‚ÇΩ' },
      { min: 5000, max: 10000, label: '5000 - 10000 ‚ÇΩ' },
      { min: 10000, max: null, label: '–û—Ç 10000 ‚ÇΩ' }
    ],
    districts: [],
    metros: []
  })

  // –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
  const filterHistory = ref<FilterState[]>([])
  
  // =================== –í–´–ß–ò–°–õ–Ø–ï–ú–´–ï ===================
  
  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –±–µ–π–¥–∂–∞
  const activeFiltersCount = computed(() => {
    let count = 0
    
    if (filters.value.services.length > 0) count++
    if (filters.value.priceRange.min > 0 || filters.value.priceRange.max < 10000) count++
    if (filters.value.location.address) count++
    if (filters.value.rating.min > 0) count++
    if (filters.value.workingHours.day) count++
    if (filters.value.serviceLocation.length > 0) count++
    if (filters.value.availability.availableToday || 
        filters.value.availability.availableTomorrow || 
        filters.value.availability.availableThisWeek) count++
    
    return count
  })

  // –ï—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
  const hasActiveFilters = computed(() => activeFiltersCount.value > 0)

  // –¢–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"
  const applyButtonText = computed(() => {
    const count = activeFiltersCount.value
    if (count === 0) return '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤'
    return `–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã (${count})`
  })

  // –í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –∫–∞–∫ –æ–±—ä–µ–∫—Ç—ã
  const selectedServices = computed(() => {
    return options.value.services.filter(service => 
      filters.value.services.includes(service.id)
    )
  })

  // –°—Ç—Ä–æ–∫–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const selectedServicesText = computed(() => {
    const services = selectedServices.value
    if (services.length === 0) return '–õ—é–±—ã–µ —É—Å–ª—É–≥–∏'
    if (services.length === 1) return services[0].name
    if (services.length <= 3) return services.map(s => s.name).join(', ')
    return `${services[0].name} –∏ –µ—â–µ ${services.length - 1}`
  })

  // –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
  const priceRangeText = computed(() => {
    const { min, max } = filters.value.priceRange
    if (min === 0 && max === 10000) return '–õ—é–±–∞—è —Ü–µ–Ω–∞'
    if (min === 0) return `–î–æ ${max} ‚ÇΩ`
    if (max === 10000) return `–û—Ç ${min} ‚ÇΩ`
    return `${min} - ${max} ‚ÇΩ`
  })

  // =================== –î–ï–ô–°–¢–í–ò–Ø ===================

  // üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
  async function loadFilterOptions() {
    isLoading.value = true
    error.value = null

    try {
      const response = await fetch('/api/masters/filters/options', {
        headers: {
          'Accept': 'application/json'
        }
      })

      if (!response.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤')
      }

      const data = await response.json()
      options.value = {
        ...options.value,
        ...data
      }

    } catch (err) {
      error.value = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤'
      logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ü–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤:', err)
    } finally {
      isLoading.value = false
    }
  }

  // üéõÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —É—Å–ª—É–≥
  function setServiceFilter(serviceIds: number[]) {
    filters.value.services = [...serviceIds]
  }

  // ‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É –∫ —Ñ–∏–ª—å—Ç—Ä—É
  function addServiceToFilter(serviceId: number) {
    if (!filters.value.services.includes(serviceId)) {
      filters.value.services.push(serviceId)
    }
  }

  // ‚ûñ –£–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
  function removeServiceFromFilter(serviceId: number) {
    const index = filters.value.services.indexOf(serviceId)
    if (index > -1) {
      filters.value.services.splice(index, 1)
    }
  }

  // üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
  function setPriceRange(min: number, max: number) {
    filters.value.priceRange = { min, max }
  }

  // üìç –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é
  function setLocation(address: string, lat?: number, lng?: number, radius?: number) {
    filters.value.location = {
      address,
      lat: lat || null,
      lng: lng || null,
      radius: radius || filters.value.location.radius
    }
  }

  // ‚≠ê –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞
  function setRatingFilter(min: number, onlyWithReviews: boolean = false) {
    filters.value.rating = { min, onlyWithReviews }
  }

  // üïê –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
  function setWorkingHoursFilter(day: string | null, timeFrom?: string, timeTo?: string) {
    filters.value.workingHours = {
      day,
      timeFrom: timeFrom || null,
      timeTo: timeTo || null
    }
  }

  // üè† –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∏–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
  function setServiceLocationFilter(locations: ServiceLocationType[]) {
    filters.value.serviceLocation = [...locations]
  }

  // üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  function setAvailabilityFilter(
    availableToday: boolean, 
    availableTomorrow: boolean, 
    availableThisWeek: boolean
  ) {
    filters.value.availability = {
      availableToday,
      availableTomorrow,
      availableThisWeek
    }
  }

  // üîÑ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
  function setSorting(sorting: SortingType) {
    filters.value.sorting = sorting
  }

  // üßπ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
  function resetFilters() {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    addToHistory()
    
    filters.value = {
      services: [],
      priceRange: { min: 0, max: 10000 },
      location: { address: '', lat: null, lng: null, radius: 5 },
      rating: { min: 0, onlyWithReviews: false },
      workingHours: { day: null, timeFrom: null, timeTo: null },
      serviceLocation: [],
      availability: {
        availableToday: false,
        availableTomorrow: false,
        availableThisWeek: false
      },
      sorting: 'relevance'
    }
  }

  // üßπ –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
  function resetFilter(filterName: keyof FilterState) {
    addToHistory()
    
    switch (filterName) {
      case 'services':
        filters.value.services = []
        break
      case 'priceRange':
        filters.value.priceRange = { min: 0, max: 10000 }
        break
      case 'location':
        filters.value.location = { address: '', lat: null, lng: null, radius: 5 }
        break
      case 'rating':
        filters.value.rating = { min: 0, onlyWithReviews: false }
        break
      case 'workingHours':
        filters.value.workingHours = { day: null, timeFrom: null, timeTo: null }
        break
      case 'serviceLocation':
        filters.value.serviceLocation = []
        break
      case 'availability':
        filters.value.availability = {
          availableToday: false,
          availableTomorrow: false,
          availableThisWeek: false
        }
        break
    }
  }

  // üìö –î–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
  function addToHistory() {
    filterHistory.value.push(JSON.parse(JSON.stringify(filters.value)))
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 10 –∑–∞–ø–∏—Å—è–º–∏
    if (filterHistory.value.length > 10) {
      filterHistory.value.shift()
    }
  }

  // ‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
  function goBack() {
    if (filterHistory.value.length > 0) {
      const previousState = filterHistory.value.pop()
      if (previousState) {
        filters.value = previousState
      }
    }
  }

  // üîç –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è API
  function getQueryParams(): Record<string, any> {
    const params: Record<string, any> = {}

    if (filters.value.services.length > 0) {
      params.services = filters.value.services.join(',')
    }

    if (filters.value.priceRange.min > 0) {
      params.price_min = filters.value.priceRange.min
    }
    
    if (filters.value.priceRange.max < 10000) {
      params.price_max = filters.value.priceRange.max
    }

    if (filters.value.location.lat && filters.value.location.lng) {
      params.lat = filters.value.location.lat
      params.lng = filters.value.location.lng
      params.radius = filters.value.location.radius
    }

    if (filters.value.rating.min > 0) {
      params.rating_min = filters.value.rating.min
    }

    if (filters.value.rating.onlyWithReviews) {
      params.only_with_reviews = 1
    }

    if (filters.value.workingHours.day) {
      params.available_day = filters.value.workingHours.day
      if (filters.value.workingHours.timeFrom) {
        params.time_from = filters.value.workingHours.timeFrom
      }
      if (filters.value.workingHours.timeTo) {
        params.time_to = filters.value.workingHours.timeTo
      }
    }

    if (filters.value.serviceLocation.length > 0) {
      params.service_location = filters.value.serviceLocation.join(',')
    }

    if (filters.value.availability.availableToday) {
      params.available_today = 1
    }

    if (filters.value.availability.availableTomorrow) {
      params.available_tomorrow = 1
    }

    if (filters.value.availability.availableThisWeek) {
      params.available_this_week = 1
    }

    params.sort = filters.value.sorting

    return params
  }

  // üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –≤ localStorage
  function saveFiltersToStorage() {
    try {
      localStorage.setItem('spa-masters-filters', JSON.stringify(filters.value))
    } catch (err) {
      logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã:', { metadata: { data: err } })
    }
  }

  // üìñ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ localStorage
  function loadFiltersFromStorage() {
    try {
      const saved = localStorage.getItem('spa-masters-filters')
      if (saved) {
        const parsed = JSON.parse(saved)
        // –ú–µ—Ä–∂–∏–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        filters.value = {
          ...filters.value,
          ...parsed
        }
      }
    } catch (err) {
      logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:', { metadata: { data: err } })
    }
  }

  // =================== WATCHERS ===================

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  watch(
    filters,
    () => {
      saveFiltersToStorage()
    },
    { deep: true }
  )

  // =================== –í–û–ó–í–†–ê–©–ê–ï–ú –ò–ù–¢–ï–†–§–ï–ô–° ===================

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    filters,
    isLoading,
    error,
    options,
    filterHistory,

    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ
    activeFiltersCount,
    hasActiveFilters,
    applyButtonText,
    selectedServices,
    selectedServicesText,
    priceRangeText,

    // –î–µ–π—Å—Ç–≤–∏—è
    loadFilterOptions,
    setServiceFilter,
    addServiceToFilter,
    removeServiceFromFilter,
    setPriceRange,
    setLocation,
    setRatingFilter,
    setWorkingHoursFilter,
    setServiceLocationFilter,
    setAvailabilityFilter,
    setSorting,
    resetFilters,
    resetFilter,
    addToHistory,
    goBack,
    getQueryParams,
    saveFiltersToStorage,
    loadFiltersFromStorage
  }
})