import { ref } from 'vue'
import { loadYandexMaps } from '../lib/yandexMapsLoader'
import { isMobileDevice } from '../lib/deviceDetector'
import type { MapConfig, Coordinates } from '../types'
import { MAP_CONTROLS, MIN_ZOOM, MAX_ZOOM } from '../lib/mapConstants'

export function useMapInitializer() {
  const loading = ref(true)
  const loadingText = ref('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã...')
  const mapReady = ref(false)

  const initMap = async (
    containerId: string,
    config: MapConfig,
    callbacks?: {
      onReady?: (map: any) => void
      onError?: (error: string) => void
    }
  ) => {
    console.log('üó∫Ô∏è useMapInitializer: Starting SIMPLIFIED initMap...', { containerId })
    
    try {
      loadingText.value = '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...'
      await loadYandexMaps(config.apiKey)
      
      // –ñ–¥–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ DOM
      await new Promise(resolve => setTimeout(resolve, 100))
      
      const container = document.getElementById(containerId)
      if (!container) {
        throw new Error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }

      const isMobile = isMobileDevice()
      
      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ)
      const controls = config.mode === 'single' 
        ? ['zoomControl', 'typeSelector'] 
        : ['zoomControl', 'searchControl']
      
      const map = new window.ymaps.Map(containerId, {
        center: [config.center.lat, config.center.lng],
        zoom: config.zoom,
        controls,
        behaviors: isMobile 
          ? ['drag', 'dblClickZoom', 'multiTouch'] 
          : ['default']
      })

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑—É–º–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
      map.options.set('minZoom', MIN_ZOOM)
      map.options.set('maxZoom', MAX_ZOOM)
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      if (isMobile) {
        map.behaviors.enable('multiTouch')
        map.options.set('suppressMapOpenBlock', true)
        map.options.set('dragInertiaEnable', true)
      }

      console.log('üó∫Ô∏è useMapInitializer: Map created successfully!')
      loading.value = false
      mapReady.value = true
      
      callbacks?.onReady?.(map)
      return map
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:', error)
      loading.value = false
      mapReady.value = false
      const errorMsg = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã'
      callbacks?.onError?.(errorMsg)
      throw error
    }
  }

  return {
    loading,
    loadingText,
    mapReady,
    initMap
  }
}