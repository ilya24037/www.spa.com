<?php

require_once __DIR__ . '/vendor/autoload.php';
$app = require_once __DIR__ . '/bootstrap/app.php';
$kernel = $app->make(Illuminate\Contracts\Http\Kernel::class);
$response = $kernel->handle(
    $request = Illuminate\Http\Request::capture()
);

use App\Domain\Ad\Models\Ad;
use Illuminate\Support\Facades\Storage;

echo "üîç –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è storage/app/public\n";
echo "==========================================\n\n";

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–∫–∏ ads/
echo "üìÅ /ads/ (—Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞):\n";
$adsPhotosPath = 'ads/photos';
$adsVideosPath = 'ads/videos';

if (Storage::disk('public')->exists($adsPhotosPath)) {
    $photoFiles = Storage::disk('public')->allFiles($adsPhotosPath);
    $photoSize = 0;
    foreach ($photoFiles as $file) {
        $photoSize += Storage::disk('public')->size($file);
    }
    echo "   üì∑ /ads/photos/: " . count($photoFiles) . " —Ñ–∞–π–ª–æ–≤ (" . round($photoSize / 1024 / 1024, 2) . " MB)\n";
} else {
    echo "   üì∑ /ads/photos/: –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n";
}

if (Storage::disk('public')->exists($adsVideosPath)) {
    $videoFiles = Storage::disk('public')->allFiles($adsVideosPath);
    $videoSize = 0;
    foreach ($videoFiles as $file) {
        $videoSize += Storage::disk('public')->size($file);
    }
    echo "   üìπ /ads/videos/: " . count($videoFiles) . " —Ñ–∞–π–ª–æ–≤ (" . round($videoSize / 1024 / 1024, 2) . " MB)\n";
} else {
    echo "   üìπ /ads/videos/: –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n";
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –ë–î
$oldStructureAds = Ad::where(function($query) {
    $query->where('photos', 'LIKE', '%/ads/photos/%')
          ->orWhere('video', 'LIKE', '%/ads/videos/%');
})->get();

echo "   üìä –û–±—ä—è–≤–ª–µ–Ω–∏–π —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ /ads/: " . $oldStructureAds->count() . "\n";

if ($oldStructureAds->count() > 0) {
    echo "   ‚ö†Ô∏è  –≠—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤—Å–µ –µ—â–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å—Ç–∞—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É:\n";
    foreach ($oldStructureAds->take(5) as $ad) {
        echo "      - ID {$ad->id}: {$ad->title}\n";
    }
    if ($oldStructureAds->count() > 5) {
        echo "      ... –∏ –µ—â–µ " . ($oldStructureAds->count() - 5) . " –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n";
    }
}

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–∫–∏ masters/
echo "\nüìÅ /masters/ (—Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∞—Å—Ç–µ—Ä–æ–≤):\n";
$mastersPath = 'masters';

if (Storage::disk('public')->exists($mastersPath)) {
    $mastersFolders = Storage::disk('public')->directories($mastersPath);
    $totalMastersSize = 0;
    $totalMastersFiles = 0;
    
    foreach ($mastersFolders as $folder) {
        $files = Storage::disk('public')->allFiles($folder);
        $totalMastersFiles += count($files);
        foreach ($files as $file) {
            $totalMastersSize += Storage::disk('public')->size($file);
        }
    }
    
    echo "   üìÇ –ü–∞–ø–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤: " . count($mastersFolders) . "\n";
    echo "   üìÑ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {$totalMastersFiles} (" . round($totalMastersSize / 1024, 2) . " KB)\n";
} else {
    echo "   –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n";
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –ë–î
$mastersReferences = Ad::where(function($query) {
    $query->where('photos', 'LIKE', '%/masters/%')
          ->orWhere('video', 'LIKE', '%/masters/%');
})->count();

echo "   üìä –û–±—ä—è–≤–ª–µ–Ω–∏–π —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ /masters/: {$mastersReferences}\n";

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã users/
echo "\nüìÅ /users/ (–Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞):\n";
$usersPath = 'users';

if (Storage::disk('public')->exists($usersPath)) {
    $usersFolders = Storage::disk('public')->directories($usersPath);
    $totalUsersSize = 0;
    $totalUsersFiles = 0;
    $totalAds = 0;
    
    foreach ($usersFolders as $userFolder) {
        $adsFolders = Storage::disk('public')->directories($userFolder . '/ads');
        $totalAds += count($adsFolders);
        
        $files = Storage::disk('public')->allFiles($userFolder);
        $totalUsersFiles += count($files);
        foreach ($files as $file) {
            $totalUsersSize += Storage::disk('public')->size($file);
        }
    }
    
    echo "   üìÇ –ü–∞–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " . count($usersFolders) . "\n";
    echo "   üì¶ –ü–∞–ø–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {$totalAds}\n";
    echo "   üìÑ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {$totalUsersFiles} (" . round($totalUsersSize / 1024 / 1024, 2) . " MB)\n";
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –ë–î
$newStructureAds = Ad::where(function($query) {
    $query->where('photos', 'LIKE', '%/users/%')
          ->orWhere('video', 'LIKE', '%/users/%');
})->count();

echo "   üìä –û–±—ä—è–≤–ª–µ–Ω–∏–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π: {$newStructureAds}\n";

// 4. –ò—Ç–æ–≥–∏
echo "\n" . str_repeat("=", 50) . "\n";
echo "üìä –ò–¢–û–ì–ò:\n";
echo str_repeat("=", 50) . "\n\n";

echo "üóëÔ∏è  –ú–û–ñ–ù–û –£–î–ê–õ–ò–¢–¨:\n";
if (isset($photoFiles) && count($photoFiles) > 0 && $oldStructureAds->count() == 0) {
    echo "   ‚úÖ /ads/photos/ - " . count($photoFiles) . " —Ñ–∞–π–ª–æ–≤ (" . round($photoSize / 1024 / 1024, 2) . " MB)\n";
    echo "      –≠—Ç–∏ —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –ë–î\n";
} elseif (isset($photoFiles) && count($photoFiles) > 0) {
    echo "   ‚ö†Ô∏è  /ads/photos/ - –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ " . $oldStructureAds->count() . " –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö\n";
}

if (isset($videoFiles) && count($videoFiles) > 0 && $oldStructureAds->count() == 0) {
    echo "   ‚úÖ /ads/videos/ - " . count($videoFiles) . " —Ñ–∞–π–ª–æ–≤ (" . round($videoSize / 1024 / 1024, 2) . " MB)\n";
    echo "      –≠—Ç–∏ —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –ë–î\n";
}

if ($mastersReferences == 0 && isset($totalMastersFiles) && $totalMastersFiles > 0) {
    echo "   ‚úÖ /masters/ - " . $totalMastersFiles . " —Ñ–∞–π–ª–æ–≤ (" . round($totalMastersSize / 1024, 2) . " KB)\n";
    echo "      –≠—Ç–∞ –ø–∞–ø–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è\n";
} elseif ($mastersReferences > 0) {
    echo "   ‚ö†Ô∏è  /masters/ - –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ {$mastersReferences} –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö\n";
}

echo "\nüíæ –ù–£–ñ–ù–û –°–û–•–†–ê–ù–ò–¢–¨:\n";
echo "   ‚úÖ /users/ - –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å {$newStructureAds} –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏\n";

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ storage/app
echo "\nüìÑ –î–†–£–ì–ò–ï –§–ê–ô–õ–´ –í storage/app:\n";
$rootFiles = [
    'project-report-2025-06-13.txt',
    'project-report-2025-06-14.txt'
];

foreach ($rootFiles as $file) {
    $path = '../' . $file; // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ public/
    if (file_exists(storage_path('app/' . $file))) {
        $size = filesize(storage_path('app/' . $file));
        echo "   üìÑ {$file} (" . round($size / 1024, 2) . " KB) - –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (—Å—Ç–∞—Ä—ã–µ –æ—Ç—á–µ—Ç—ã)\n";
    }
}