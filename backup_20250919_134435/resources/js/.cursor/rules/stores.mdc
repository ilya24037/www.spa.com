# Pinia Stores Rules (правила stores)

## Store Structure (структура store)
- Use Composition API syntax
- Type all state and actions
- Keep stores focused on specific domains
- Use proper naming conventions

Use this template when creating stores:
@store-template.ts

## Store Template (шаблон store)
```typescript
import { defineStore } from 'pinia'

interface State {
  items: Item[]
  loading: boolean
  error: string | null
}

export const useItemStore = defineStore('items', () => {
  // State
  const items = ref<Item[]>([])
  const loading = ref(false)
  const error = ref<string | null>(null)
  
  // Getters
  const activeItems = computed(() => 
    items.value.filter(item => item.isActive)
  )
  
  // Actions
  const fetchItems = async () => {
    loading.value = true
    try {
      const response = await api.getItems()
      items.value = response.data
    } catch (err) {
      error.value = err.message
    } finally {
      loading.value = false
    }
  }
  
  return {
    items,
    loading,
    error,
    activeItems,
    fetchItems
  }
})

## State Management (управление состоянием)
- Use ref() for reactive state
- Keep state normalized
- Avoid deeply nested objects
- Use computed for derived state

## Actions (действия)
- Handle async operations
- Update state atomically
- Handle errors gracefully
- Return meaningful results

## Getters (геттеры)
- Use computed() for derived state
- Keep getters pure
- Cache expensive calculations
- Avoid side effects

## Error Handling (обработка ошибок)
- Track loading states
- Store error messages
- Provide error recovery
- Log errors for debugging

## Store Composition (композиция stores)
- Use stores for related data
- Avoid circular dependencies
- Share common logic via composables
- Keep stores independent

## Testing (тестирование)
- Test state changes
- Mock API calls
- Test error scenarios
- Verify loading states

## Performance (производительность)
- Use shallowRef for large objects
- Avoid unnecessary reactivity
- Use markRaw for static data
- Optimize computed dependencies
