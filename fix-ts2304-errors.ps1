#!/usr/bin/env pwsh
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è TS2304 –æ—à–∏–±–æ–∫ –≤ SPA Platform
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\fix-ts2304-errors.ps1

Write-Host "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TS2304 –æ—à–∏–±–æ–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ SPA Platform" -ForegroundColor Green
Write-Host "=" * 60

$resourcesPath = "resources\js"
$backupPath = "ts-backup-$(Get-Date -Format 'yyyyMMdd-HHmmss')"

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
Write-Host "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤: $backupPath" -ForegroundColor Yellow
Copy-Item -Recurse $resourcesPath $backupPath

# –°—á–µ—Ç—á–∏–∫–∏
$fixed = 0
$errors = 0

# –§—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
function Fix-VueFile {
    param($filePath)
    
    try {
        $content = Get-Content $filePath -Raw -Encoding UTF8
        $originalContent = $content
        $changed = $false
        
        # 1. –ó–∞–º–µ–Ω–∞ <script setup> –Ω–∞ <script setup lang="ts">
        if ($content -match '<script setup>') {
            $content = $content -replace '<script setup>', '<script setup lang="ts">'
            $changed = $true
            Write-Host "  ‚úì –î–æ–±–∞–≤–ª–µ–Ω lang='ts'" -ForegroundColor Green
        }
        
        # 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        $globalVars = @{
            'window\.' = 'window as any'
            'document\.' = 'document as any' 
            'console\.' = 'console as any'
            '\bconfirm\(' = '(window as any).confirm('
            '\balert\(' = '(window as any).alert('
            '\bprompt\(' = '(window as any).prompt('
            'new URLSearchParams' = 'new (window as any).URLSearchParams'
            'new URL\(' = 'new (window as any).URL('
            '\bfetch\(' = '(window as any).fetch('
            'localStorage\.' = '(window as any).localStorage.'
            'sessionStorage\.' = '(window as any).sessionStorage.'
        }
        
        foreach ($pattern in $globalVars.Keys) {
            if ($content -match $pattern) {
                $replacement = $globalVars[$pattern]
                $content = $content -replace $pattern, $replacement
                $changed = $true
                Write-Host "  ‚úì –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω: $pattern" -ForegroundColor Green
            }
        }
        
        # 3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ Inertia.js
        if ($content -match '\broute\(' -and $content -notmatch "import.*route.*from.*ziggy") {
            # –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∑ @inertiajs/vue3
            if ($content -match "import\s+{([^}]+)}\s+from\s+'@inertiajs/vue3'") {
                $imports = $matches[1]
                if ($imports -notmatch 'router') {
                    $newImports = $imports.Trim() + ', router'
                    $content = $content -replace "import\s+{[^}]+}\s+from\s+'@inertiajs/vue3'", "import { $newImports } from '@inertiajs/vue3'"
                    $changed = $true
                }
            }
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ route –∏–∑ ziggy-js
            $scriptMatch = $content -match '<script setup lang="ts">(.*?)</script>'
            if ($scriptMatch) {
                $imports = "import { route } from 'ziggy-js'`n"
                $content = $content -replace '(<script setup lang="ts">)', "`$1`n$imports"
                $changed = $true
                Write-Host "  ‚úì –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç route –∏–∑ ziggy-js" -ForegroundColor Green
            }
        }
        
        # 4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –¥–ª—è useForm –∏ usePage
        $composables = @{
            'useForm\(' = 'useForm'
            'usePage\(' = 'usePage'
        }
        
        foreach ($pattern in $composables.Keys) {
            if ($content -match $pattern -and $content -notmatch "import.*$($composables[$pattern]).*from.*@inertiajs") {
                # –î–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if ($content -match "import\s+{([^}]+)}\s+from\s+'@inertiajs/vue3'") {
                    $imports = $matches[1]
                    $composableName = $composables[$pattern]
                    if ($imports -notmatch $composableName) {
                        $newImports = $imports.Trim() + ", $composableName"
                        $content = $content -replace "import\s+{[^}]+}\s+from\s+'@inertiajs/vue3'", "import { $newImports } from '@inertiajs/vue3'"
                        $changed = $true
                        Write-Host "  ‚úì –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç $composableName" -ForegroundColor Green
                    }
                }
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if ($changed) {
            Set-Content -Path $filePath -Value $content -Encoding UTF8 -NoNewline
            $script:fixed++
            Write-Host "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: $filePath" -ForegroundColor Green
        }
        
    } catch {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ $filePath`: $($_.Exception.Message)" -ForegroundColor Red
        $script:errors++
    }
}

# –ü–æ–∏—Å–∫ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
Write-Host "üîç –ü–æ–∏—Å–∫ Vue —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏..." -ForegroundColor Cyan

Get-ChildItem -Path $resourcesPath -Recurse -Filter "*.vue" | ForEach-Object {
    $filePath = $_.FullName
    $relativePath = $filePath.Replace((Get-Location).Path + "\", "")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º
    $content = Get-Content $filePath -Raw -Encoding UTF8 -ErrorAction SilentlyContinue
    
    if ($content -match '<script setup>' -or 
        $content -match '\b(window|document|console|confirm|alert|fetch|localStorage)\.' -or
        ($content -match '\broute\(' -and $content -notmatch "import.*route.*from")) {
        
        Write-Host "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: $relativePath" -ForegroundColor Yellow
        Fix-VueFile $filePath
    }
}

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤
$globalTypesPath = "$resourcesPath\types\global.d.ts"
if (Test-Path $globalTypesPath) {
    Write-Host "üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤..." -ForegroundColor Yellow
    
    $globalContent = Get-Content $globalTypesPath -Raw
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤
    $newTypes = @"

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è TS2304
declare global {
  interface Window {
    route: Route
    axios: any
    Echo?: any
    confirm: (message: string) => boolean
    alert: (message: string) => void
    prompt: (message: string, defaultValue?: string) => string | null
  }
  
  const route: Route
  const console: Console
  const window: Window & typeof globalThis
  const document: Document
  const URLSearchParams: typeof URLSearchParams
  const URL: typeof URL
  const fetch: typeof fetch
  const localStorage: Storage
  const sessionStorage: Storage
}
"@
    
    if ($globalContent -notmatch "confirm.*boolean") {
        $globalContent += $newTypes
        Set-Content -Path $globalTypesPath -Value $globalContent -Encoding UTF8
        Write-Host "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã" -ForegroundColor Green
    }
}

# –ò—Ç–æ–≥–∏
Write-Host "`n" + "=" * 60
Write-Host "üìä –ò–¢–û–ì–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:" -ForegroundColor Cyan
Write-Host "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: $fixed" -ForegroundColor Green
Write-Host "‚ùå –û—à–∏–±–æ–∫: $errors" -ForegroundColor Red
Write-Host "üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $backupPath" -ForegroundColor Yellow

if ($fixed -gt 0) {
    Write-Host "`nüîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–æ–≤:" -ForegroundColor Yellow
    Write-Host "npm run type-check" -ForegroundColor White
}

Write-Host "`nüéâ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!" -ForegroundColor Green