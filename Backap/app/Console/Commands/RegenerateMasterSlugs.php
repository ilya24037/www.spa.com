<?php

namespace App\Console\Commands;

use App\Models\MasterProfile;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ slug —É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –º–∞—Å—Ç–µ—Ä–æ–≤
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * php artisan masters:regenerate-slugs
 * php artisan masters:regenerate-slugs --dry-run
 * php artisan masters:regenerate-slugs --force
 */
class RegenerateMasterSlugs extends Command
{
    /**
     * –ò–º—è –∏ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
     */
    protected $signature = 'masters:regenerate-slugs 
                            {--dry-run : –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è}
                            {--force : –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ slug}';

    /**
     * –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
     */
    protected $description = '–†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç slug –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π –º–∞—Å—Ç–µ—Ä–æ–≤ (—É–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã)';

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
     */
    public function handle()
    {
        $this->info('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é slug –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π –º–∞—Å—Ç–µ—Ä–æ–≤...');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏
        $query = MasterProfile::query();
        
        // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω --force, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ slug —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        if (!$this->option('force')) {
            // –ò—â–µ–º slug —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º —Ç–∏–ø–∞ "anna-x7k9m2" (–∏–º—è + –¥–µ—Ñ–∏—Å + 6 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤)
            $query->where('slug', 'REGEXP', '-[a-z0-9]{6}$');
        }
        
        $profiles = $query->get();
        
        if ($profiles->isEmpty()) {
            $this->info('‚úÖ –ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
            return Command::SUCCESS;
        }
        
        $this->info("üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {$profiles->count()}");
        $this->newLine();
        
        // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        $changes = [];
        
        // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –µ—Å–ª–∏ –Ω–µ dry-run
        if (!$this->option('dry-run')) {
            DB::beginTransaction();
        }
        
        try {
            foreach ($profiles as $profile) {
                $oldSlug = $profile->slug;
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π slug
                $newSlug = $profile->generateUniqueSlug($profile->display_name);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
                $changes[] = [
                    'ID' => $profile->id,
                    '–ò–º—è' => $profile->display_name,
                    '–°—Ç–∞—Ä—ã–π slug' => $oldSlug,
                    '–ù–æ–≤—ã–π slug' => $newSlug,
                    '–°—Ç–∞—Ç—É—Å' => $oldSlug === $newSlug ? '‚è≠Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π' : '‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω'
                ];
                
                // –ï—Å–ª–∏ –Ω–µ dry-run –∏ slug –∏–∑–º–µ–Ω–∏–ª—Å—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                if (!$this->option('dry-run') && $oldSlug !== $newSlug) {
                    $profile->slug = $newSlug;
                    $profile->saveQuietly(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –≤—ã–∑–æ–≤–∞ —Å–æ–±—ã—Ç–∏–π
                }
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
            $this->table(
                ['ID', '–ò–º—è', '–°—Ç–∞—Ä—ã–π slug', '–ù–æ–≤—ã–π slug', '–°—Ç–∞—Ç—É—Å'],
                $changes
            );
            
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            $updated = collect($changes)->where('–°—Ç–∞—Ç—É—Å', '‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω')->count();
            $skipped = collect($changes)->where('–°—Ç–∞—Ç—É—Å', '‚è≠Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π')->count();
            
            $this->newLine();
            $this->info("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
            $this->info("   - –û–±–Ω–æ–≤–ª–µ–Ω–æ: {$updated}");
            $this->info("   - –ü—Ä–æ–ø—É—â–µ–Ω–æ: {$skipped}");
            
            if ($this->option('dry-run')) {
                $this->newLine();
                $this->warn('‚ö†Ô∏è  –≠—Ç–æ –±—ã–ª —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–æ–Ω (--dry-run).');
                $this->warn('   –ù–∏–∫–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.');
                $this->info('   –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ --dry-run');
            } else {
                // –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                DB::commit();
                $this->newLine();
                $this->info('‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            $this->checkForDuplicates();
            
        } catch (\Exception $e) {
            // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if (!$this->option('dry-run')) {
                DB::rollBack();
            }
            
            $this->error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' . $e->getMessage());
            return Command::FAILURE;
        }
        
        return Command::SUCCESS;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã slug –ø–æ—Å–ª–µ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    private function checkForDuplicates()
    {
        $duplicates = MasterProfile::select('slug', DB::raw('COUNT(*) as count'))
            ->groupBy('slug')
            ->having('count', '>', 1)
            ->get();
        
        if ($duplicates->isNotEmpty()) {
            $this->newLine();
            $this->warn('‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã slug:');
            foreach ($duplicates as $duplicate) {
                $this->warn("   - {$duplicate->slug} ({$duplicate->count} –∑–∞–ø–∏—Å–µ–π)");
            }
            $this->info('   –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç —á–∏—Å–ª–æ–≤—ã–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏.');
        }
    }
}