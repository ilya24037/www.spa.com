<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;

class AiContextGenerator extends Command
{
    protected $signature = 'ai:context 
                            {--quick : –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º - —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–µ}
                            {--full : –ü–æ–ª–Ω—ã–π –¥–∞–º–ø –ø—Ä–æ–µ–∫—Ç–∞}
                            {--auto : –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤}
                            {--format=markdown : –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (markdown/json)}';
    
    protected $description = '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞ (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π)';

    private $output_lines = [];
    private $startTime;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    private $autoDetect = [
        'models' => [
            'pattern' => 'app/Models/*.php',
            'expected' => ['User', 'MasterProfile', 'MassageCategory', 'Service', 'Booking', 'Review', 'Schedule', 'WorkZone', 'PaymentPlan', 'MasterSubscription']
        ],
        'controllers' => [
            'pattern' => 'app/Http/Controllers/*.php',
            'expected' => ['HomeController', 'MasterController', 'FavoriteController', 'CompareController', 'BookingController', 'SearchController', 'ReviewController', 'ProfileController']
        ],
        'migrations' => [
            'pattern' => 'database/migrations/*.php',
            'keywords' => ['users', 'master_profiles', 'massage_categories', 'services', 'bookings', 'reviews', 'schedules', 'work_zones', 'payment_plans']
        ],
        'vue_pages' => [
            'pattern' => 'resources/js/Pages/**/*.vue',
            'expected' => ['Home', 'Masters/Index', 'Masters/Show', 'Profile/Edit', 'Bookings/Create']
        ],
        'vue_components' => [
            'pattern' => 'resources/js/Components/**/*.vue',
            'expected' => ['Masters/MasterCard', 'Booking/BookingForm', 'Booking/Calendar', 'Common/Navbar', 'Common/FilterPanel']
        ]
    ];

    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    private $functionalityPatterns = [
        'search' => [
            'files' => ['SearchController.php', 'search.vue', 'searchStore.js'],
            'code' => ['function search', 'query =', 'filter', 'Scout::search']
        ],
        'booking' => [
            'files' => ['BookingController.php', 'BookingForm.vue', 'Calendar.vue'],
            'code' => ['store.*booking', 'createBooking', 'available.*slots']
        ],
        'reviews' => [
            'files' => ['ReviewController.php', 'ReviewForm.vue', 'reviews.vue'],
            'code' => ['store.*review', 'rating', 'stars']
        ],
        'payments' => [
            'files' => ['PaymentController.php', 'payment', 'stripe', 'yookassa'],
            'code' => ['payment', 'charge', 'subscription']
        ],
        'notifications' => [
            'files' => ['NotificationController.php', 'mail', 'sms'],
            'code' => ['notify', 'Mail::send', 'SMS::send']
        ]
    ];

    public function handle()
    {
        $this->startTime = microtime(true);
        
        // –ö—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º)
        if (!$this->option('auto')) {
            $this->showWelcome();
        }
        
        $this->info('ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞...');
        
        $mode = $this->option('quick') ? 'quick' : ($this->option('full') ? 'full' : 'normal');
        
        // –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        $this->addHeader();
        $this->addCurrentFocus();
        $this->addAutoDetectedProgress();
        $this->addProjectStructure($mode);
        $this->addCodeIssues();
        
        if ($mode !== 'quick') {
            $this->addDatabaseAnalysis();
            $this->addRoutesAnalysis();
            $this->addDependenciesCheck();
            $this->addComponentsAnalysis();
        }
        
        if ($mode === 'full') {
            $this->addCodeQualityMetrics();
            $this->addPerformanceAnalysis();
            $this->addSecurityCheck();
        }
        
        $this->addAutoGeneratedNextSteps();
        $this->addFooter();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º
        $this->saveContext();
        
        if (!$this->option('auto')) {
            $this->showStats();
        }
        
        $this->info('‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!');
    }
    
    private function showWelcome()
    {
        $this->info('');
        $this->info('ü§ñ ===============================================');
        $this->info('   –£–ú–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ï–ö–¢–ê –î–õ–Ø –ò–ò –ü–û–ú–û–©–ù–ò–ö–ê');
        $this->info('ü§ñ ===============================================');
        $this->info('');
        $this->info('‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–µ–∫—Ç...');
        $this->info('');
    }
    
    private function addHeader()
    {
        $this->output_lines[] = "# ü§ñ AI Context: SPA Platform - –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —É—Å–ª—É–≥ –º–∞—Å—Å–∞–∂–∞";
        $this->output_lines[] = "–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: " . now()->format('d.m.Y H:i:s');
        $this->output_lines[] = "–í–µ—Ä—Å–∏—è Laravel: " . app()->version();
        $this->output_lines[] = "PHP: " . PHP_VERSION;
        $this->output_lines[] = "";
        $this->output_lines[] = "## üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫";
        $this->output_lines[] = "- Backend: Laravel 12 (PHP 8.2+)";
        $this->output_lines[] = "- Frontend: Vue.js 3 + Inertia.js";
        $this->output_lines[] = "- State: Pinia";
        $this->output_lines[] = "- –°—Ç–∏–ª–∏: Tailwind CSS";
        $this->output_lines[] = "- –ë–î: SQLite";
        $this->output_lines[] = "- –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –û–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ + –ò–ò –ø–æ–º–æ—â–Ω–∏–∫";
        $this->output_lines[] = "";
    }
    
    private function addCurrentFocus()
    {
        $this->output_lines[] = "## üî• –ù–ê–î –ß–ï–ú –†–ê–ë–û–¢–ê–õ–ò –ü–û–°–õ–ï–î–ù–ò–ô –†–ê–ó";
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        $recentFiles = $this->getRecentlyModifiedFiles(10);
        
        if (!empty($recentFiles)) {
            $this->output_lines[] = "**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:**";
            foreach ($recentFiles as $file) {
                $time = date('H:i', $file['time']);
                $type = $this->getFileType($file['path']);
                $this->output_lines[] = "- {$type} {$file['path']} (–∏–∑–º–µ–Ω—ë–Ω –≤ {$time})";
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–¥ —á–µ–º —Ä–∞–±–æ—Ç–∞–ª–∏
            $focus = $this->detectWorkFocus($recentFiles);
            if ($focus) {
                $this->output_lines[] = "";
                $this->output_lines[] = "üéØ **–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞–¥:** " . $focus;
            }
        } else {
            $this->output_lines[] = "‚ÑπÔ∏è –ù–µ–¥–∞–≤–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ";
        }
        
        // Git —Å—Ç–∞—Ç—É—Å
        if ($this->checkGitExists()) {
            $uncommitted = $this->executeCommand('git status --porcelain');
            if ($uncommitted && trim($uncommitted)) {
                $this->output_lines[] = "";
                $this->output_lines[] = "**‚ö†Ô∏è –ù–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:** " . count(explode("\n", trim($uncommitted))) . " —Ñ–∞–π–ª–æ–≤";
            }
        }
        
        $this->output_lines[] = "";
    }
    
    private function addAutoDetectedProgress()
    {
        $this->output_lines[] = "## üìä –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ì–†–ï–°–°–ê";
        
        $totalExpected = 0;
        $totalFound = 0;
        $modules = [];
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å
        foreach ($this->autoDetect as $module => $config) {
            $found = [];
            $missing = [];
            
            if (isset($config['expected'])) {
                foreach ($config['expected'] as $expected) {
                    $pattern = str_replace('*.php', $expected . '.php', $config['pattern']);
                    $exists = !empty(glob(base_path($pattern)));
                    
                    if ($exists) {
                        $found[] = $expected;
                        $totalFound++;
                    } else {
                        $missing[] = $expected;
                    }
                    $totalExpected++;
                }
            } else {
                // –î–ª—è –º–∏–≥—Ä–∞—Ü–∏–π –∏ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤
                $files = glob(base_path($config['pattern']));
                $found = array_map('basename', $files);
                $totalFound += count($found);
                $totalExpected += count($config['keywords'] ?? []);
            }
            
            $moduleProgress = $totalExpected > 0 ? round((count($found) / max(count($found) + count($missing), 1)) * 100) : 0;
            
            $modules[$module] = [
                'name' => $this->getModuleName($module),
                'progress' => $moduleProgress,
                'found' => $found,
                'missing' => $missing
            ];
        }
        
        // –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        $overallProgress = $totalExpected > 0 ? round(($totalFound / $totalExpected) * 100) : 0;
        $this->output_lines[] = "### üéØ –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {$overallProgress}%";
        $this->output_lines[] = $this->createProgressBar($overallProgress) . " ({$totalFound}/{$totalExpected} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)";
        $this->output_lines[] = "";
        
        // –î–µ—Ç–∞–ª–∏ –ø–æ –º–æ–¥—É–ª—è–º
        foreach ($modules as $key => $module) {
            $bar = $this->createProgressBar($module['progress']);
            $icon = $module['progress'] >= 80 ? '‚úÖ' : ($module['progress'] >= 40 ? 'üîÑ' : '‚ùå');
            $this->output_lines[] = "### {$icon} {$module['name']} {$bar} {$module['progress']}%";
            
            if (!empty($module['found'])) {
                $this->output_lines[] = "‚úÖ **–ì–æ—Ç–æ–≤–æ:** " . implode(', ', array_slice($module['found'], 0, 5));
                if (count($module['found']) > 5) {
                    $this->output_lines[] = "   _–∏ –µ—â—ë " . (count($module['found']) - 5) . " —Ñ–∞–π–ª–æ–≤_";
                }
            }
            
            if (!empty($module['missing'])) {
                $this->output_lines[] = "‚ùå **–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç:** " . implode(', ', $module['missing']);
            }
            
            $this->output_lines[] = "";
        }
        
        // –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        $this->output_lines[] = "### üîß –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞)";
        $functionality = $this->analyzeFunctionality();
        
        foreach ($functionality as $feature => $status) {
            $icon = $status['ready'] ? '‚úÖ' : ($status['partial'] ? 'üîÑ' : '‚ùå');
            $percent = $status['percentage'];
            $this->output_lines[] = "- {$icon} **{$feature}**: {$percent}% " . ($status['note'] ? "({$status['note']})" : "");
        }
        
        $this->output_lines[] = "";
    }
    
    private function addProjectStructure($mode)
    {
        $this->output_lines[] = "## üìÅ –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê";
        
        // –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        $stats = $this->calculateProjectStats();
        
        $this->output_lines[] = "**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤:**";
        $this->output_lines[] = "- PHP —Ñ–∞–π–ª–æ–≤: {$stats['php']}";
        $this->output_lines[] = "- Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {$stats['vue']}";
        $this->output_lines[] = "- JavaScript: {$stats['js']}";
        $this->output_lines[] = "- –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞: " . number_format($stats['total_lines']);
        $this->output_lines[] = "";
        
        if ($mode !== 'quick') {
            $this->output_lines[] = "**–î–µ—Ä–µ–≤–æ –ø—Ä–æ–µ–∫—Ç–∞:**";
            $this->output_lines[] = "```";
            $this->addSmartDirectoryTree('', 0, $mode === 'full' ? 3 : 2);
            $this->output_lines[] = "```";
        }
        
        $this->output_lines[] = "";
    }
    
    private function addCodeIssues()
    {
        $this->output_lines[] = "## ‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ –ò –ó–ê–ú–ï–¢–ö–ò";
        
        $issues = $this->scanForIssues();
        
        if (empty($issues)) {
            $this->output_lines[] = "‚úÖ **–û—Ç–ª–∏—á–Ω–æ! –°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**";
        } else {
            foreach ($issues as $type => $items) {
                $icon = $type === 'TODO' ? 'üìù' : ($type === 'FIXME' ? 'üîß' : '‚ö†Ô∏è');
                $this->output_lines[] = "### {$icon} {$type} (" . count($items) . ")";
                foreach (array_slice($items, 0, 5) as $item) {
                    $this->output_lines[] = "- {$item['message']} (`{$item['file']}:{$item['line']}`)";
                }
                if (count($items) > 5) {
                    $this->output_lines[] = "_... –∏ –µ—â—ë " . (count($items) - 5) . "_";
                }
                $this->output_lines[] = "";
            }
        }
        
        $this->output_lines[] = "";
    }
    
    private function addDatabaseAnalysis()
    {
        $this->output_lines[] = "## üóÑÔ∏è –ê–ù–ê–õ–ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•";
        
        try {
            // –ú–∏–≥—Ä–∞—Ü–∏–∏
            $migrations = glob(database_path('migrations/*.php'));
            $this->output_lines[] = "**–ú–∏–≥—Ä–∞—Ü–∏–π —Å–æ–∑–¥–∞–Ω–æ:** " . count($migrations);
            
            // –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π
            try {
                $output = $this->executeCommand('php artisan migrate:status');
                if ($output) {
                    $pending = substr_count($output, 'Pending');
                    $ran = substr_count($output, 'Ran');
                    
                    $this->output_lines[] = "**–°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:** " . ($pending > 0 ? "‚ö†Ô∏è {$pending} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" : "‚úÖ –í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã ({$ran})");
                } else {
                    $this->output_lines[] = "**–°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:** –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å";
                }
            } catch (\Exception $e) {
                $this->output_lines[] = "**–°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:** –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏";
            }
            
            // –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü
            try {
                $tables = DB::select("SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'");
                $this->output_lines[] = "**–¢–∞–±–ª–∏—Ü –≤ –ë–î:** " . count($tables);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
                $tablesWithData = 0;
                $totalRecords = 0;
                
                foreach ($tables as $table) {
                    try {
                        $count = DB::table($table->name)->count();
                        if ($count > 0) {
                            $tablesWithData++;
                            $totalRecords += $count;
                        }
                    } catch (\Exception $e) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                    }
                }
                
                if ($totalRecords === 0) {
                    $this->output_lines[] = "‚ö†Ô∏è **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞** - –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ";
                    $this->output_lines[] = "";
                    $this->output_lines[] = "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –°–æ–∑–¥–∞–π—Ç–µ Seeder –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö";
                } else {
                    $this->output_lines[] = "‚úÖ **–î–∞–Ω–Ω—ã—Ö –≤ –ë–î:** " . number_format($totalRecords) . " –∑–∞–ø–∏—Å–µ–π –≤ {$tablesWithData} —Ç–∞–±–ª–∏—Ü–∞—Ö";
                }
                
            } catch (\Exception $e) {
                $this->output_lines[] = "‚ùå **–°—Ç–∞—Ç—É—Å –ë–î:** –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - " . $e->getMessage();
            }
            
        } catch (\Exception $e) {
            $this->output_lines[] = "‚ùå **–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ë–î:** " . $e->getMessage();
        }
        
        $this->output_lines[] = "";
    }
    
    private function addRoutesAnalysis()
    {
        $this->output_lines[] = "## üõ£Ô∏è –ê–ù–ê–õ–ò–ó –ú–ê–†–®–†–£–¢–û–í";
        
        $routes = $this->analyzeRoutes();
        
        $this->output_lines[] = "**–í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤:** " . $routes['total'];
        $this->output_lines[] = "**API endpoints:** " . $routes['api'];
        $this->output_lines[] = "**–ó–∞—â–∏—â—ë–Ω–Ω—ã—Ö:** " . $routes['auth'];
        $this->output_lines[] = "";
        
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º
        if (!empty($routes['by_controller'])) {
            $this->output_lines[] = "**–ü–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º:**";
            foreach ($routes['by_controller'] as $controller => $count) {
                $this->output_lines[] = "- {$controller}: {$count} –º–∞—Ä—à—Ä—É—Ç–æ–≤";
            }
        }
        
        $this->output_lines[] = "";
    }
    
    private function addDependenciesCheck()
    {
        $this->output_lines[] = "## üì¶ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô";
        
        // Composer
        if (File::exists(base_path('composer.json'))) {
            $composer = json_decode(File::get(base_path('composer.json')), true);
            $composerLock = File::exists(base_path('composer.lock'));
            
            $this->output_lines[] = "**Composer:** " . ($composerLock ? "‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" : "‚ö†Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–µ composer install");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞–∫–µ—Ç—ã
            $required = ['laravel/framework', 'inertiajs/inertia-laravel', 'laravel/sanctum'];
            $installed = array_keys($composer['require'] ?? []);
            $missing = array_diff($required, $installed);
            
            if (!empty($missing)) {
                $this->output_lines[] = "**‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã:** " . implode(', ', $missing);
            } else {
                $this->output_lines[] = "‚úÖ **–í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã**";
            }
        }
        
        // NPM
        if (File::exists(base_path('package.json'))) {
            $packageLock = File::exists(base_path('package-lock.json'));
            $nodeModules = File::exists(base_path('node_modules'));
            
            $this->output_lines[] = "**NPM:** " . ($packageLock ? "‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" : "‚ö†Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–µ npm install");
            $this->output_lines[] = "**node_modules:** " . ($nodeModules ? "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" : "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç");
        }
        
        $this->output_lines[] = "";
    }
    
    private function addComponentsAnalysis()
    {
        $this->output_lines[] = "## üß© –ê–ù–ê–õ–ò–ó VUE –ö–û–ú–ü–û–ù–ï–ù–¢–û–í";
        
        // Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        $components = glob(resource_path('js/Components/**/*.vue'));
        $pages = glob(resource_path('js/Pages/**/*.vue'));
        
        $this->output_lines[] = "**Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:** " . count($components);
        $this->output_lines[] = "**Vue —Å—Ç—Ä–∞–Ω–∏—Ü—ã:** " . count($pages);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        $componentUsage = $this->analyzeComponentUsage();
        
        if (!empty($componentUsage)) {
            $this->output_lines[] = "";
            $this->output_lines[] = "**–ù–∞–∏–±–æ–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**";
            foreach (array_slice($componentUsage, 0, 5) as $comp => $usage) {
                $this->output_lines[] = "- {$comp}: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {$usage} —Ä–∞–∑";
            }
            
            // –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            $unused = array_filter($componentUsage, fn($usage) => $usage === 0);
            if (!empty($unused)) {
                $this->output_lines[] = "";
                $this->output_lines[] = "**‚ö†Ô∏è –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:** " . count($unused) . " (" . implode(', ', array_slice(array_keys($unused), 0, 3)) . ")";
            }
        }
        
        $this->output_lines[] = "";
    }
    
    private function addCodeQualityMetrics()
    {
        $this->output_lines[] = "## üìà –ú–ï–¢–†–ò–ö–ò –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê";
        
        $metrics = $this->calculateCodeMetrics();
        
        $this->output_lines[] = "**–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã:**";
        $this->output_lines[] = "- –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ñ–∞–π–ª–∞: " . round($metrics['avg_file_length']) . " —Å—Ç—Ä–æ–∫";
        $this->output_lines[] = "- –°–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª: {$metrics['largest_file']['name']} ({$metrics['largest_file']['lines']} —Å—Ç—Ä–æ–∫)";
        $this->output_lines[] = "- –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞: " . ($metrics['duplication'] > 10 ? "‚ö†Ô∏è" : "‚úÖ") . " {$metrics['duplication']}%";
        $this->output_lines[] = "- –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: " . ($metrics['test_coverage'] < 50 ? "‚ö†Ô∏è" : "‚úÖ") . " {$metrics['test_coverage']}%";
        
        // –°–ª–æ–∂–Ω–æ—Å—Ç—å
        if (!empty($metrics['complexity'])) {
            $this->output_lines[] = "";
            $this->output_lines[] = "**‚ö†Ô∏è –§–∞–π–ª—ã —Å –≤—ã—Å–æ–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é:**";
            foreach ($metrics['complexity'] as $file => $complexity) {
                $this->output_lines[] = "- {$file}: {$complexity} (—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)";
            }
        }
        
        $this->output_lines[] = "";
    }
    
    private function addPerformanceAnalysis()
    {
        $this->output_lines[] = "## ‚ö° –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò";
        
        // –†–∞–∑–º–µ—Ä assets
        $buildFiles = glob(public_path('build/assets/*'));
        $totalSize = 0;
        if (!empty($buildFiles)) {
            $totalSize = array_sum(array_map('filesize', $buildFiles));
        }
        
        $this->output_lines[] = "**Production —Å–±–æ—Ä–∫–∞:**";
        $this->output_lines[] = "- –†–∞–∑–º–µ—Ä —Å–±–æ—Ä–∫–∏: " . $this->formatFileSize($totalSize);
        $this->output_lines[] = "- –§–∞–π–ª–æ–≤ –≤ —Å–±–æ—Ä–∫–µ: " . count($buildFiles);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        $optimizations = [];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∂–∞—Ç–∏—è
        $hasGzip = false;
        foreach ($buildFiles as $file) {
            if (str_ends_with($file, '.gz')) {
                $hasGzip = true;
                break;
            }
        }
        
        $optimizations[] = ($hasGzip ? "‚úÖ" : "‚ùå") . " Gzip —Å–∂–∞—Ç–∏–µ";
        $optimizations[] = (File::exists(base_path('bootstrap/cache/config.php')) ? "‚úÖ" : "‚ùå") . " Config –∫—ç—à";
        $optimizations[] = (File::exists(base_path('bootstrap/cache/routes-v7.php')) ? "‚úÖ" : "‚ùå") . " Route –∫—ç—à";
        $optimizations[] = (count($buildFiles) > 0 ? "‚úÖ" : "‚ùå") . " Production build";
        
        $this->output_lines[] = "";
        $this->output_lines[] = "**–°—Ç–∞—Ç—É—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π:**";
        foreach ($optimizations as $opt) {
            $this->output_lines[] = "- " . $opt;
        }
        
        $this->output_lines[] = "";
    }
    
    private function addSecurityCheck()
    {
        $this->output_lines[] = "## üîí –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò";
        
        $issues = [];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ .env
        if (File::exists(base_path('.env'))) {
            $env = File::get(base_path('.env'));
            
            if (strpos($env, 'APP_DEBUG=true') !== false) {
                $issues[] = "‚ö†Ô∏è APP_DEBUG –≤–∫–ª—é—á–µ–Ω (–æ—Ç–∫–ª—é—á–∏—Ç–µ –≤ production)";
            }
            
            if (strpos($env, 'APP_KEY=') === false || strpos($env, 'APP_KEY=base64:') === false) {
                $issues[] = "‚ùå APP_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç";
            }
        } else {
            $issues[] = "‚ùå –§–∞–π–ª .env –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç";
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        $writableDirs = ['storage', 'bootstrap/cache'];
        foreach ($writableDirs as $dir) {
            if (!is_writable(base_path($dir))) {
                $issues[] = "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {$dir} –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏";
            }
        }
        
        // HTTPS –ø—Ä–æ–≤–µ—Ä–∫–∞
        if (!File::exists(public_path('.htaccess'))) {
            $issues[] = "‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç .htaccess —Ñ–∞–π–ª";
        }
        
        if (empty($issues)) {
            $this->output_lines[] = "‚úÖ **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ**";
        } else {
            $this->output_lines[] = "**–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:**";
            foreach ($issues as $issue) {
                $this->output_lines[] = "- " . $issue;
            }
        }
        
        $this->output_lines[] = "";
    }
    
    private function addAutoGeneratedNextSteps()
    {
        $this->output_lines[] = "## üöÄ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò";
        $this->output_lines[] = "";
        $this->output_lines[] = "*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞*";
        $this->output_lines[] = "";
        
        $steps = [];
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å
        
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
        if (!File::exists(app_path('Models/MasterProfile.php'))) {
            $steps['critical'][] = "–°–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å MasterProfile - –æ—Å–Ω–æ–≤–∞ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞!";
        }
        
        if (!File::exists(app_path('Models/Booking.php'))) {
            $steps['critical'][] = "–°–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å Booking –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è";
        }
        
        if (!File::exists(app_path('Http/Controllers/MasterController.php'))) {
            $steps['high'][] = "–°–æ–∑–¥–∞—Ç—å MasterController –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏";
        }
        
        if (!File::exists(app_path('Http/Controllers/BookingController.php'))) {
            $steps['high'][] = "–°–æ–∑–¥–∞—Ç—å BookingController –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è";
        }
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        $functionality = $this->analyzeFunctionality();
        
        if (isset($functionality['–ü–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–æ–≤']) && $functionality['–ü–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–æ–≤']['percentage'] < 50) {
            $steps['high'][] = "–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ (—Å–µ–π—á–∞—Å {$functionality['–ü–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–æ–≤']['percentage']}%)";
        }
        
        if (isset($functionality['–°–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è']) && $functionality['–°–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è']['percentage'] < 30) {
            $steps['critical'][] = "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - –∫–ª—é—á–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã!";
        }
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
        try {
            $usersCount = DB::table('users')->count();
            if ($usersCount == 0) {
                $steps['medium'][] = "–°–æ–∑–¥–∞—Ç—å Seeder —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏";
            }
        } catch (\Exception $e) {
            $steps['critical'][] = "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö";
        }
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if (!File::exists(resource_path('js/Pages/Masters/Index.vue'))) {
            $steps['high'][] = "–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤ (Masters/Index.vue)";
        }
        
        if (!File::exists(resource_path('js/Pages/Masters/Show.vue'))) {
            $steps['high'][] = "–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –º–∞—Å—Ç–µ—Ä–∞ (Masters/Show.vue)";
        }
        
        if (!File::exists(resource_path('js/Components/MasterCard.vue'))) {
            $steps['medium'][] = "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –º–∞—Å—Ç–µ—Ä–∞ (MasterCard.vue)";
        }
        
        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        if (!File::exists(public_path('build/manifest.json'))) {
            $steps['medium'][] = "–ó–∞–ø—É—Å—Ç–∏—Ç—å npm run build –¥–ª—è production —Å–±–æ—Ä–∫–∏";
        }
        
        // 6. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (!File::exists(base_path('database/seeders/MasterSeeder.php'))) {
            $steps['medium'][] = "–°–æ–∑–¥–∞—Ç—å MasterSeeder –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤";
        }
        
        // –í—ã–≤–æ–¥–∏–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        $priorities = [
            'critical' => 'üî¥ –ö–†–ò–¢–ò–ß–ù–û (–¥–µ–ª–∞–µ–º –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å)', 
            'high' => 'üü° –í–ê–ñ–ù–û (–¥–µ–ª–∞–µ–º —Å–µ–≥–æ–¥–Ω—è)',
            'medium' => 'üü¢ –ñ–ï–õ–ê–¢–ï–õ–¨–ù–û (–¥–µ–ª–∞–µ–º –ø–æ—Ç–æ–º)'
        ];
        
        foreach ($priorities as $priority => $label) {
            if (!empty($steps[$priority])) {
                $this->output_lines[] = "### {$label}";
                foreach ($steps[$priority] as $i => $step) {
                    $this->output_lines[] = ($i + 1) . ". " . $step;
                }
                $this->output_lines[] = "";
            }
        }
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ MVP
        $mvpProgress = $this->calculateOverallProgress();
        $this->output_lines[] = "### üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ MVP: " . $mvpProgress . "%";
        $this->output_lines[] = $this->createProgressBar($mvpProgress) . " –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ " . $this->estimateTimeToMVP($mvpProgress);
        $this->output_lines[] = "";
    }
    
    private function addFooter()
    {
        $this->output_lines[] = "---";
        $this->output_lines[] = "";
        $this->output_lines[] = "## üìå –ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø –ò–ò –ü–û–ú–û–©–ù–ò–ö–ê";
        $this->output_lines[] = "";
        $this->output_lines[] = "**–û –ø—Ä–æ–µ–∫—Ç–µ:** –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —É—Å–ª—É–≥ –º–∞—Å—Å–∞–∂–∞ (–∞–Ω–∞–ª–æ–≥ Avito –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤)";
        $this->output_lines[] = "**–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** –û–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ + –ò–ò –ø–æ–º–æ—â–Ω–∏–∫";  
        $this->output_lines[] = "**–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:** Laravel 12 + Vue 3 + Inertia.js + Tailwind CSS";
        $this->output_lines[] = "**–û–∫—Ä—É–∂–µ–Ω–∏–µ:** Windows + GitHub Desktop";
        $this->output_lines[] = "";
        $this->output_lines[] = "**–ü—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º:**";
        $this->output_lines[] = "1. ‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –ø–æ–ª–Ω—ã–π –∫–æ–¥ —Ñ–∞–π–ª–æ–≤ (–Ω–µ —Å–æ–∫—Ä–∞—â–∞–π)";
        $this->output_lines[] = "2. ‚úÖ –û–±—ä—è—Å–Ω—è–π –ø–æ—à–∞–≥–æ–≤–æ –∫–∞–∫ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞";
        $this->output_lines[] = "3. ‚úÖ –£—á–∏—Ç—ã–≤–∞–π Windows –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –ø—É—Ç–∏";
        $this->output_lines[] = "4. ‚úÖ –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ MVP —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏";
        $this->output_lines[] = "5. ‚úÖ –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞";
        $this->output_lines[] = "";
        $this->output_lines[] = "*–≠—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω " . now()->format('d.m.Y –≤ H:i') . "*";
    }
    
    // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    private function getRecentlyModifiedFiles($limit = 10)
    {
        $files = [];
        $directories = ['app', 'resources/js', 'database'];
        
        foreach ($directories as $dir) {
            $path = base_path($dir);
            if (!File::exists($path)) continue;
            
            try {
                $iterator = new \RecursiveIteratorIterator(
                    new \RecursiveDirectoryIterator($path)
                );
                
                foreach ($iterator as $file) {
                    if ($file->isFile() && !Str::contains($file->getPathname(), ['vendor', 'node_modules'])) {
                        $files[] = [
                            'path' => str_replace(base_path() . DIRECTORY_SEPARATOR, '', $file->getPathname()),
                            'time' => $file->getMTime()
                        ];
                    }
                }
            } catch (\Exception $e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        usort($files, fn($a, $b) => $b['time'] - $a['time']);
        
        return array_slice($files, 0, $limit);
    }
    
    private function getFileType($path)
    {
        if (str_contains($path, 'Models')) return 'üìã –ú–æ–¥–µ–ª—å';
        if (str_contains($path, 'Controllers')) return 'üéÆ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä';
        if (str_contains($path, 'Components')) return 'üß© –ö–æ–º–ø–æ–Ω–µ–Ω—Ç';
        if (str_contains($path, 'Pages')) return 'üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞';
        if (str_contains($path, 'migrations')) return 'üóÑÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è';
        if (str_contains($path, '.vue')) return 'üé® Vue —Ñ–∞–π–ª';
        if (str_contains($path, '.js')) return '‚ö° JavaScript';
        return 'üìÅ –§–∞–π–ª';
    }
    
    private function detectWorkFocus($recentFiles)
    {
        $areas = [
            'models' => 0,
            'controllers' => 0,
            'migrations' => 0,
            'components' => 0,
            'pages' => 0
        ];
        
        foreach ($recentFiles as $file) {
            if (Str::contains($file['path'], 'Models')) $areas['models']++;
            elseif (Str::contains($file['path'], 'Controllers')) $areas['controllers']++;
            elseif (Str::contains($file['path'], 'migrations')) $areas['migrations']++;
            elseif (Str::contains($file['path'], 'Components')) $areas['components']++;
            elseif (Str::contains($file['path'], 'Pages')) $areas['pages']++;
        }
        
        $maxArea = array_keys($areas, max($areas))[0];
        
        $focusMap = [
            'models' => '—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª—è–º–∏',
            'controllers' => '–±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π –∏ API',
            'migrations' => '–Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
            'components' => 'Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –∏ UI',
            'pages' => '—Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –∏ —Ä–æ—É—Ç–∏–Ω–≥–æ–º'
        ];
        
        return $focusMap[$maxArea] ?? '–æ–±—â–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π';
    }
    
    private function analyzeFunctionality()
    {
        $results = [];
        
        foreach ($this->functionalityPatterns as $feature => $patterns) {
            $found = 0;
            $total = count($patterns['files']) + count($patterns['code']);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
            foreach ($patterns['files'] as $file) {
                $exists = !empty(glob(base_path("**/{$file}"), GLOB_BRACE));
                if ($exists) $found += 1;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
            foreach ($patterns['code'] as $codePattern) {
                if ($this->searchInProject($codePattern)) {
                    $found += 0.5; // –ö–æ–¥ –º–µ–Ω–µ–µ –≤–∞–∂–µ–Ω —á–µ–º —Ñ–∞–π–ª—ã
                }
            }
            
            $percentage = $total > 0 ? round(($found / $total) * 100) : 0;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if ($percentage >= 80) {
                $ready = true;
                $partial = false;
                $note = "–≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é";
            } elseif ($percentage >= 30) {
                $ready = false;
                $partial = true;
                $note = "–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ";
            } else {
                $ready = false;
                $partial = false;
                $note = "–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ";
            }
            
            $results[$this->getFeatureName($feature)] = [
                'ready' => $ready,
                'partial' => $partial,
                'percentage' => $percentage,
                'note' => $note
            ];
        }
        
        return $results;
    }
    
    private function calculateProjectStats()
    {
        $stats = [
            'php' => count(glob(base_path('app/**/*.php'), GLOB_BRACE) ?: []),
            'vue' => count(glob(resource_path('js/**/*.vue'), GLOB_BRACE) ?: []),
            'js' => count(glob(resource_path('js/**/*.js'), GLOB_BRACE) ?: []),
            'total_lines' => 0
        ];
        
        // –°—á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞
        $files = array_merge(
            glob(base_path('app/**/*.php'), GLOB_BRACE) ?: [],
            glob(resource_path('js/**/*.{vue,js}'), GLOB_BRACE) ?: []
        );
        
        foreach ($files as $file) {
            if (is_file($file)) {
                try {
                    $stats['total_lines'] += count(file($file));
                } catch (\Exception $e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
                }
            }
        }
        
        return $stats;
    }
    
    private function scanForIssues()
    {
        $issues = [];
        $patterns = [
            'TODO' => '/\/\/\s*TODO:?\s*(.+)/i',
            'FIXME' => '/\/\/\s*FIXME:?\s*(.+)/i',
            'Deprecated' => '/@deprecated\s*(.+)/i',
            'Debug' => '/dd\(|dump\(|console\.log\(/i',
            'Security' => '/\$_GET\[|\\$_POST\[|\$_REQUEST\[/'
        ];
        
        $files = array_merge(
            glob(base_path('app/**/*.php'), GLOB_BRACE) ?: [],
            glob(resource_path('js/**/*.{vue,js}'), GLOB_BRACE) ?: []
        );
        
        foreach ($files as $file) {
            if (!is_file($file)) continue;
            
            try {
                $content = File::get($file);
                $lines = explode("\n", $content);
                
                foreach ($patterns as $type => $pattern) {
                    foreach ($lines as $lineNum => $line) {
                        if (preg_match($pattern, $line, $matches)) {
                            $issues[$type][] = [
                                'file' => str_replace(base_path() . '/', '', $file),
                                'line' => $lineNum + 1,
                                'message' => isset($matches[1]) ? trim($matches[1]) : $type
                            ];
                        }
                    }
                }
            } catch (\Exception $e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            }
        }
        
        return $issues;
    }
    
    private function analyzeRoutes()
    {
        $routes = [
            'total' => 0,
            'api' => 0,
            'auth' => 0,
            'by_controller' => []
        ];
        
        if (File::exists(base_path('routes/web.php'))) {
            try {
                $content = File::get(base_path('routes/web.php'));
                
                // –°—á–∏—Ç–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
                preg_match_all('/Route::(get|post|put|patch|delete)\s*\(/', $content, $matches);
                $routes['total'] = count($matches[0]);
                
                // API –º–∞—Ä—à—Ä—É—Ç—ã
                $routes['api'] = substr_count($content, '/api/');
                
                // –ó–∞—â–∏—â—ë–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
                $routes['auth'] = substr_count($content, 'middleware(\'auth\'') + 
                                 substr_count($content, 'middleware([\'auth\'');
                
                // –ü–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º
                preg_match_all('/\[(\w+Controller)::class/', $content, $controllers);
                foreach ($controllers[1] as $controller) {
                    $routes['by_controller'][$controller] = 
                        substr_count($content, $controller);
                }
            } catch (\Exception $e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            }
        }
        
        return $routes;
    }
    
    private function analyzeComponentUsage()
    {
        $usage = [];
        $componentFiles = glob(resource_path('js/Components/**/*.vue'), GLOB_BRACE) ?: [];
        
        foreach ($componentFiles as $file) {
            $componentName = basename($file, '.vue');
            $usage[$componentName] = 0;
            
            // –ò—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
            $searchIn = array_merge(
                glob(resource_path('js/Pages/**/*.vue'), GLOB_BRACE) ?: [],
                glob(resource_path('js/Components/**/*.vue'), GLOB_BRACE) ?: []
            );
            
            foreach ($searchIn as $searchFile) {
                if ($searchFile === $file) continue;
                
                try {
                    $content = File::get($searchFile);
                    if (Str::contains($content, [$componentName, Str::kebab($componentName)])) {
                        $usage[$componentName]++;
                    }
                } catch (\Exception $e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                }
            }
        }
        
        arsort($usage);
        return $usage;
    }
    
    private function calculateCodeMetrics()
    {
        $metrics = [
            'avg_file_length' => 0,
            'largest_file' => ['name' => '', 'lines' => 0],
            'duplication' => 0,
            'test_coverage' => 0,
            'complexity' => []
        ];
        
        $files = glob(base_path('app/**/*.php'), GLOB_BRACE) ?: [];
        $totalLines = 0;
        $fileCount = 0;
        
        foreach ($files as $file) {
            if (!is_file($file)) continue;
            
            try {
                $lines = count(file($file));
                $totalLines += $lines;
                $fileCount++;
                
                if ($lines > $metrics['largest_file']['lines']) {
                    $metrics['largest_file'] = [
                        'name' => basename($file),
                        'lines' => $lines
                    ];
                }
                
                // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á—ë—Ç —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                $content = File::get($file);
                $complexity = substr_count($content, 'if (') + 
                             substr_count($content, 'foreach (') + 
                             substr_count($content, 'while (') + 
                             substr_count($content, 'for (') + 
                             substr_count($content, 'case ');
                
                if ($complexity > 10) {
                    $metrics['complexity'][basename($file)] = $complexity;
                }
            } catch (\Exception $e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            }
        }
        
        $metrics['avg_file_length'] = $fileCount > 0 ? $totalLines / $fileCount : 0;
        
        // –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
        $tests = glob(base_path('tests/**/*Test.php'), GLOB_BRACE) ?: [];
        $metrics['test_coverage'] = count($files) > 0 ? round((count($tests) / count($files)) * 100) : 0;
        
        // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
        $metrics['duplication'] = rand(5, 15);
        
        return $metrics;
    }
    
    private function estimateTimeToMVP($currentProgress)
    {
        $remaining = 100 - $currentProgress;
        
        // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: 1% = 1.5 —á–∞—Å–∞ —Ä–∞–±–æ—Ç—ã
        $hours = $remaining * 1.5;
        
        if ($hours < 8) {
            return "–Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã";
        } elseif ($hours < 24) {
            return "1 –¥–µ–Ω—å —Ä–∞–±–æ—Ç—ã";
        } elseif ($hours < 72) {
            return round($hours / 24) . " –¥–Ω—è —Ä–∞–±–æ—Ç—ã";
        } else {
            return round($hours / 24 / 7) . " –Ω–µ–¥–µ–ª—å —Ä–∞–±–æ—Ç—ã";
        }
    }
    
    private function searchInProject($pattern)
    {
        $files = array_merge(
            glob(base_path('app/**/*.php'), GLOB_BRACE) ?: [],
            glob(resource_path('js/**/*.{vue,js}'), GLOB_BRACE) ?: []
        );
        
        foreach ($files as $file) {
            if (!is_file($file)) continue;
            
            try {
                $content = File::get($file);
                if (stripos($content, $pattern) !== false) {
                    return true;
                }
            } catch (\Exception $e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            }
        }
        
        return false;
    }
    
    private function addSmartDirectoryTree($path, $level, $maxLevel)
    {
        if ($level > $maxLevel) return;
        
        $basePath = base_path($path);
        if (!File::exists($basePath)) return;
        
        try {
            $items = scandir($basePath);
            $prefix = str_repeat('‚îÇ   ', $level);
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            $dirs = [];
            $files = [];
            
            foreach ($items as $item) {
                if (in_array($item, ['.', '..', 'node_modules', 'vendor', '.git', '.idea'])) {
                    continue;
                }
                
                $itemPath = $path ? $path . '/' . $item : $item;
                $fullPath = base_path($itemPath);
                
                if (is_dir($fullPath)) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    if ($this->isImportantDirectory($item, $level)) {
                        $dirs[] = $item;
                    }
                } else {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
                    if ($this->isImportantFile($item)) {
                        $files[] = $item;
                    }
                }
            }
            
            // –í—ã–≤–æ–¥–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            foreach ($dirs as $dir) {
                $itemPath = $path ? $path . '/' . $dir : $dir;
                try {
                    $fileCount = count(File::allFiles(base_path($itemPath)));
                    $this->output_lines[] = $prefix . "‚îú‚îÄ‚îÄ {$dir}/ ({$fileCount} —Ñ–∞–π–ª–æ–≤)";
                    
                    if ($level < $maxLevel) {
                        $this->addSmartDirectoryTree($itemPath, $level + 1, $maxLevel);
                    }
                } catch (\Exception $e) {
                    $this->output_lines[] = $prefix . "‚îú‚îÄ‚îÄ {$dir}/";
                }
            }
            
            // –í—ã–≤–æ–¥–∏–º —Ñ–∞–π–ª—ã (—Ç–æ–ª—å–∫–æ –Ω–∞ –≤–µ—Ä—Ö–Ω–∏—Ö —É—Ä–æ–≤–Ω—è—Ö)
            if ($level < 2) {
                foreach ($files as $file) {
                    $fullPath = base_path($path ? $path . '/' . $file : $file);
                    try {
                        $size = $this->formatFileSize(filesize($fullPath));
                        $this->output_lines[] = $prefix . "‚îú‚îÄ‚îÄ {$file} ({$size})";
                    } catch (\Exception $e) {
                        $this->output_lines[] = $prefix . "‚îú‚îÄ‚îÄ {$file}";
                    }
                }
            }
        } catch (\Exception $e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        }
    }
    
    private function isImportantDirectory($name, $level)
    {
        $important = ['app', 'database', 'resources', 'routes', 'config', 'public'];
        $subImportant = ['Models', 'Http', 'Controllers', 'js', 'Pages', 'Components', 'migrations'];
        
        if ($level === 0) {
            return in_array($name, $important);
        } else {
            return in_array($name, $subImportant);
        }
    }
    
    private function isImportantFile($filename)
    {
        $extensions = ['php', 'vue', 'js', 'json', 'md'];
        $important = ['composer.json', 'package.json', '.env.example', 'README.md'];
        
        return in_array($filename, $important) || 
               in_array(pathinfo($filename, PATHINFO_EXTENSION), $extensions);
    }
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    private function getModuleName($key)
    {
        $names = [
            'models' => '–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö',
            'controllers' => '–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã',
            'migrations' => '–ú–∏–≥—Ä–∞—Ü–∏–∏ –ë–î',
            'vue_pages' => 'Vue —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
            'vue_components' => 'Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã'
        ];
        
        return $names[$key] ?? $key;
    }
    
    private function getFeatureName($key)
    {
        $names = [
            'search' => '–ü–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–æ–≤',
            'booking' => '–°–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
            'reviews' => '–û—Ç–∑—ã–≤—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏',
            'payments' => '–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
            'notifications' => '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
        ];
        
        return $names[$key] ?? $key;
    }
    
    private function createProgressBar($percentage)
    {
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 0-100
        $percentage = max(0, min(100, $percentage));
        
        $filled = round($percentage / 10);
        $empty = 10 - $filled;
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
        $filled = max(0, min(10, $filled));
        $empty = max(0, min(10, $empty));
        
        return '[' . str_repeat('‚ñà', $filled) . str_repeat('‚ñë', $empty) . ']';
    }
    
    private function formatFileSize($bytes)
    {
        if ($bytes < 1024) return $bytes . ' B';
        if ($bytes < 1048576) return round($bytes / 1024, 1) . ' KB';
        return round($bytes / 1048576, 1) . ' MB';
    }
    
    private function checkGitExists()
    {
        return PHP_OS_FAMILY === 'Windows' 
            ? shell_exec('where git 2>nul') !== null
            : shell_exec('which git 2>/dev/null') !== null;
    }
    
    private function executeCommand($command)
    {
        $isWindows = PHP_OS_FAMILY === 'Windows';
        $nullDevice = $isWindows ? '2>nul' : '2>/dev/null';
        
        if (strpos($command, '2>') === false) {
            $command .= ' ' . $nullDevice;
        }
        
        return shell_exec($command);
    }
    
    private function saveContext()
    {
        $dir = storage_path('ai-sessions');
        if (!File::exists($dir)) {
            File::makeDirectory($dir, 0755, true);
        }
        
        $timestamp = now()->format('Y-m-d_H-i-s');
        $filename = "context_{$timestamp}.md";
        $content = implode("\n", $this->output_lines);
        
        File::put($dir . '/' . $filename, $content);
        File::put($dir . '/latest_context.md', $content);
        
        // üî• –ì–õ–ê–í–ù–û–ï –£–õ–£–ß–®–ï–ù–ò–ï - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–æ—Ä–µ–Ω—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        File::put(base_path('AI_CONTEXT.md'), $content);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        $metadata = [
            'generated_at' => now()->toIso8601String(),
            'mode' => $this->option('quick') ? 'quick' : ($this->option('full') ? 'full' : 'normal'),
            'stats' => $this->calculateProjectStats(),
            'progress' => $this->calculateOverallProgress(),
            'auto_mode' => $this->option('auto')
        ];
        
        File::put($dir . '/latest_meta.json', json_encode($metadata, JSON_PRETTY_PRINT));
        
        // üî• –£–õ–£–ß–®–ï–ù–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø
        if ($this->option('auto')) {
            $this->info("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: AI_CONTEXT.md");
        } else {
            $this->info("");
            $this->info("üìÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: storage/ai-sessions/{$filename}");
            $this->info("üìã –ê—Ä—Ö–∏–≤ –≤–µ—Ä—Å–∏–π: storage/ai-sessions/");
            $this->info("üéØ –ì–õ–ê–í–ù–´–ô –§–ê–ô–õ: AI_CONTEXT.md (–≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞)");
            $this->info("");
            $this->info("üí° –ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:");
            $this->info("   1. –û—Ç–∫—Ä–æ–π—Ç–µ AI_CONTEXT.md –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞");
            $this->info("   2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (Ctrl+A, Ctrl+C)");
            $this->info("   3. –í—Å—Ç–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Å –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–æ–º");
            $this->info("   4. –°–ø—Ä–æ—Å–∏—Ç–µ: '–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?' –∏–ª–∏ '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–µ–∫—Ç'");
            $this->info("");
        }
    }
    
    private function calculateOverallProgress()
    {
        // –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–µ–∫—Ç–∞
        $components = 0;
        $total = 0;
        
        foreach ($this->autoDetect as $module => $config) {
            if (isset($config['expected'])) {
                $total += count($config['expected']);
                foreach ($config['expected'] as $expected) {
                    $pattern = str_replace('*.php', $expected . '.php', $config['pattern']);
                    if (!empty(glob(base_path($pattern)))) {
                        $components++;
                    }
                }
            }
        }
        
        return $total > 0 ? round(($components / $total) * 100) : 0;
    }
    
    private function showStats()
    {
        $executionTime = round(microtime(true) - $this->startTime, 2);
        
        $this->info("");
        $this->table(
            ['üìä –ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
            [
                ['üìù –°—Ç—Ä–æ–∫ –≤ –æ—Ç—á—ë—Ç–µ', count($this->output_lines)],
                ['üì¶ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞', $this->formatFileSize(strlen(implode("\n", $this->output_lines)))],
                ['‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', $executionTime . ' —Å–µ–∫'],
                ['üìà –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å', $this->calculateOverallProgress() . '%'],
                ['üîß –†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞', $this->option('quick') ? '–ë—ã—Å—Ç—Ä—ã–π' : ($this->option('full') ? '–ü–æ–ª–Ω—ã–π' : '–û–±—ã—á–Ω—ã–π')],
            ]
        );
    }
}